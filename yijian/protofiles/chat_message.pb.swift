/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: chat_message.proto
 *
 */

///   protoc --proto_path=./ --cpp_out=./ ./

import Foundation
import SwiftProtobuf


enum Chat_IsAgree: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknow // = 0
  case agree // = 1
  case refuse // = 2
  case ignore // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unknow
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknow
    case 1: self = .agree
    case 2: self = .refuse
    case 3: self = .ignore
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  init?(name: String) {
    switch name {
    case "unknow": self = .unknow
    case "agree": self = .agree
    case "refuse": self = .refuse
    case "ignore": self = .ignore
    default: return nil
    }
  }

  init?(jsonName: String) {
    switch jsonName {
    case "unknow": self = .unknow
    case "agree": self = .agree
    case "refuse": self = .refuse
    case "ignore": self = .ignore
    default: return nil
    }
  }

  init?(protoName: String) {
    switch protoName {
    case "unknow": self = .unknow
    case "agree": self = .agree
    case "refuse": self = .refuse
    case "ignore": self = .ignore
    default: return nil
    }
  }

  var rawValue: Int {
    get {
      switch self {
      case .unknow: return 0
      case .agree: return 1
      case .refuse: return 2
      case .ignore: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  var json: String {
    get {
      switch self {
      case .unknow: return "\"unknow\""
      case .agree: return "\"agree\""
      case .refuse: return "\"refuse\""
      case .ignore: return "\"ignore\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  var hashValue: Int { return rawValue }

  var debugDescription: String {
    get {
      switch self {
      case .unknow: return ".unknow"
      case .agree: return ".agree"
      case .refuse: return ".refuse"
      case .ignore: return ".ignore"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

enum Chat_UserProperty: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case realname // = 0
  case nickname // = 1
  case icon // = 2
  case description // = 3
  case isMale // = 4
  case birthday // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .realname
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .realname
    case 1: self = .nickname
    case 2: self = .icon
    case 3: self = .description
    case 4: self = .isMale
    case 5: self = .birthday
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  init?(name: String) {
    switch name {
    case "realname": self = .realname
    case "nickname": self = .nickname
    case "icon": self = .icon
    case "description": self = .description
    case "isMale": self = .isMale
    case "birthday": self = .birthday
    default: return nil
    }
  }

  init?(jsonName: String) {
    switch jsonName {
    case "realname": self = .realname
    case "nickname": self = .nickname
    case "icon": self = .icon
    case "description": self = .description
    case "isMale": self = .isMale
    case "birthday": self = .birthday
    default: return nil
    }
  }

  init?(protoName: String) {
    switch protoName {
    case "realname": self = .realname
    case "nickname": self = .nickname
    case "icon": self = .icon
    case "description": self = .description
    case "isMale": self = .isMale
    case "birthday": self = .birthday
    default: return nil
    }
  }

  var rawValue: Int {
    get {
      switch self {
      case .realname: return 0
      case .nickname: return 1
      case .icon: return 2
      case .description: return 3
      case .isMale: return 4
      case .birthday: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  var json: String {
    get {
      switch self {
      case .realname: return "\"realname\""
      case .nickname: return "\"nickname\""
      case .icon: return "\"icon\""
      case .description: return "\"description\""
      case .isMale: return "\"isMale\""
      case .birthday: return "\"birthday\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  var hashValue: Int { return rawValue }

  var debugDescription: String {
    get {
      switch self {
      case .realname: return ".realname"
      case .nickname: return ".nickname"
      case .icon: return ".icon"
      case .description: return ".description"
      case .isMale: return ".isMale"
      case .birthday: return ".birthday"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

///   mongo scheme 
///   index toNodeID 1, incrementID 1
enum Chat_MediaType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknow // = 0
  case text // = 1
  case jpg // = 2
  case mp3 // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unknow
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknow
    case 1: self = .text
    case 2: self = .jpg
    case 3: self = .mp3
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  init?(name: String) {
    switch name {
    case "unknow": self = .unknow
    case "text": self = .text
    case "jpg": self = .jpg
    case "mp3": self = .mp3
    default: return nil
    }
  }

  init?(jsonName: String) {
    switch jsonName {
    case "UNKNOW": self = .unknow
    case "TEXT": self = .text
    case "JPG": self = .jpg
    case "MP3": self = .mp3
    default: return nil
    }
  }

  init?(protoName: String) {
    switch protoName {
    case "UNKNOW": self = .unknow
    case "TEXT": self = .text
    case "JPG": self = .jpg
    case "MP3": self = .mp3
    default: return nil
    }
  }

  var rawValue: Int {
    get {
      switch self {
      case .unknow: return 0
      case .text: return 1
      case .jpg: return 2
      case .mp3: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }
  }

  var json: String {
    get {
      switch self {
      case .unknow: return "\"UNKNOW\""
      case .text: return "\"TEXT\""
      case .jpg: return "\"JPG\""
      case .mp3: return "\"MP3\""
      case .UNRECOGNIZED(let i): return String(i)
      }
    }
  }

  var hashValue: Int { return rawValue }

  var debugDescription: String {
    get {
      switch self {
      case .unknow: return ".unknow"
      case .text: return ".text"
      case .jpg: return ".jpg"
      case .mp3: return ".mp3"
      case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
      }
    }
  }

}

struct Chat_ErrorNth: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_ErrorNth"}
  public var protoMessageName: String {return "ErrorNth"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "maxnth", swift: "maxnth"),
  ]


  var maxnth: Int32 = 0

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &maxnth)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if maxnth != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: maxnth, protoFieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_ErrorNth) -> Bool {
    if maxnth != other.maxnth {return false}
    return true
  }
}

struct Chat_NodeInfo: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_NodeInfo"}
  public var protoMessageName: String {return "NodeInfo"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "toNodeID", swift: "toNodeId"),
    2: .same(proto: "maxIncrementid", swift: "maxIncrementid"),
    3: .same(proto: "recentTimestamp", swift: "recentTimestamp"),
  ]


  var toNodeId: String = ""

  var maxIncrementid: Int32 = 0

  var recentTimestamp: Int32 = 0

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &toNodeId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &maxIncrementid)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &recentTimestamp)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if toNodeId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: toNodeId, protoFieldNumber: 1)
    }
    if maxIncrementid != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: maxIncrementid, protoFieldNumber: 2)
    }
    if recentTimestamp != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: recentTimestamp, protoFieldNumber: 3)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_NodeInfo) -> Bool {
    if toNodeId != other.toNodeId {return false}
    if maxIncrementid != other.maxIncrementid {return false}
    if recentTimestamp != other.recentTimestamp {return false}
    return true
  }
}

struct Chat_TalkList: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_TalkList"}
  public var protoMessageName: String {return "TalkList"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "nodeReadMap", swift: "nodeReadMap"),
  ]


  var nodeReadMap: Dictionary<String,Int32> = [:]

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeMapField(fieldType: SwiftProtobuf.ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt32>.self, value: &nodeReadMap)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if !nodeReadMap.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf.ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt32>.self, value: nodeReadMap, protoFieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_TalkList) -> Bool {
    if nodeReadMap != other.nodeReadMap {return false}
    return true
  }
}

struct Chat_Friends: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_Friends"}
  public var protoMessageName: String {return "Friends"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "userid", swift: "userid"),
  ]


  var userid: [String] = []

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &userid)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if !userid.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: userid, protoFieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_Friends) -> Bool {
    if userid != other.userid {return false}
    return true
  }
}

struct Chat_Ping: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_Ping"}
  public var protoMessageName: String {return "Ping"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "msg", swift: "msg"),
  ]


  var msg: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &msg)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if msg != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: msg, protoFieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_Ping) -> Bool {
    if msg != other.msg {return false}
    return true
  }
}

struct Chat_Pong: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_Pong"}
  public var protoMessageName: String {return "Pong"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "msg", swift: "msg"),
  ]


  var msg: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &msg)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if msg != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: msg, protoFieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_Pong) -> Bool {
    if msg != other.msg {return false}
    return true
  }
}

///   server & client
struct Chat_NodeSelfDevice: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_NodeSelfDevice"}
  public var protoMessageName: String {return "NodeSelfDevice"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames = FieldNameMap()


  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
  }

  public func _protoc_generated_isEqualTo(other: Chat_NodeSelfDevice) -> Bool {
    return true
  }
}

struct Chat_NodePeerServer: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_NodePeerServer"}
  public var protoMessageName: String {return "NodePeerServer"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames = FieldNameMap()


  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
  }

  public func _protoc_generated_isEqualTo(other: Chat_NodePeerServer) -> Bool {
    return true
  }
}

struct Chat_NodeSpecifiy: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_NodeSpecifiy"}
  public var protoMessageName: String {return "NodeSpecifiy"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "toNodeID", swift: "toNodeId"),
  ]


  var toNodeId: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &toNodeId)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if toNodeId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: toNodeId, protoFieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_NodeSpecifiy) -> Bool {
    if toNodeId != other.toNodeId {return false}
    return true
  }
}

struct Chat_NodeUser: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_NodeUser"}
  public var protoMessageName: String {return "NodeUser"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "toUserID", swift: "toUserId"),
  ]


  var toUserId: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &toUserId)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if toUserId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: toUserId, protoFieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_NodeUser) -> Bool {
    if toUserId != other.toUserId {return false}
    return true
  }
}

struct Chat_Error: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_Error"}
  public var protoMessageName: String {return "Error"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "errnum", swift: "errnum"),
    2: .same(proto: "errmsg", swift: "errmsg"),
  ]


  var errnum: Int32 = 0

  var errmsg: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &errnum)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &errmsg)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if errnum != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: errnum, protoFieldNumber: 1)
    }
    if errmsg != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: errmsg, protoFieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_Error) -> Bool {
    if errnum != other.errnum {return false}
    if errmsg != other.errmsg {return false}
    return true
  }
}

struct Chat_Device: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_Device"}
  public var protoMessageName: String {return "Device"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "OS", swift: "os"),
    2: .same(proto: "deviceModel", swift: "deviceModel"),
    3: .same(proto: "deviceNickname", swift: "deviceNickname"),
    4: .same(proto: "UUID", swift: "uuid"),
  ]


  enum OperatingSystem: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case iOs // = 0
    case android // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .iOs
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .iOs
      case 1: self = .android
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    init?(name: String) {
      switch name {
      case "iOs": self = .iOs
      case "android": self = .android
      default: return nil
      }
    }

    init?(jsonName: String) {
      switch jsonName {
      case "iOS": self = .iOs
      case "Android": self = .android
      default: return nil
      }
    }

    init?(protoName: String) {
      switch protoName {
      case "iOS": self = .iOs
      case "Android": self = .android
      default: return nil
      }
    }

    var rawValue: Int {
      get {
        switch self {
        case .iOs: return 0
        case .android: return 1
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    var json: String {
      get {
        switch self {
        case .iOs: return "\"iOS\""
        case .android: return "\"Android\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    var hashValue: Int { return rawValue }

    var debugDescription: String {
      get {
        switch self {
        case .iOs: return ".iOs"
        case .android: return ".android"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  var os: Chat_Device.OperatingSystem = Chat_Device.OperatingSystem.iOs

  var deviceModel: String = ""

  var deviceNickname: String = ""

  var uuid: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: Chat_Device.OperatingSystem.self, value: &os)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &deviceModel)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &deviceNickname)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &uuid)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if os != Chat_Device.OperatingSystem.iOs {
      try visitor.visitSingularField(fieldType: Chat_Device.OperatingSystem.self, value: os, protoFieldNumber: 1)
    }
    if deviceModel != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: deviceModel, protoFieldNumber: 2)
    }
    if deviceNickname != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: deviceNickname, protoFieldNumber: 3)
    }
    if uuid != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: uuid, protoFieldNumber: 4)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_Device) -> Bool {
    if os != other.os {return false}
    if deviceModel != other.deviceModel {return false}
    if deviceNickname != other.deviceNickname {return false}
    if uuid != other.uuid {return false}
    return true
  }
}

///   mongo scheme
struct Chat_MessageNode: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_MessageNode"}
  public var protoMessageName: String {return "MessageNode"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "id", swift: "id"),
    2: .same(proto: "authorize", swift: "authorize"),
    3: .same(proto: "creatorID", swift: "creatorId"),
    4: .same(proto: "nickname", swift: "nickname"),
    5: .same(proto: "version", swift: "version"),
    6: .same(proto: "managerIDs", swift: "managerIds"),
    7: .same(proto: "members", swift: "members"),
  ]


  enum Authorize: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case creator // = 0
    case manager // = 1
    case member // = 2
    case peer // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .creator
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .creator
      case 1: self = .manager
      case 2: self = .member
      case 3: self = .peer
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    init?(name: String) {
      switch name {
      case "creator": self = .creator
      case "manager": self = .manager
      case "member": self = .member
      case "peer": self = .peer
      default: return nil
      }
    }

    init?(jsonName: String) {
      switch jsonName {
      case "creator": self = .creator
      case "manager": self = .manager
      case "member": self = .member
      case "peer": self = .peer
      default: return nil
      }
    }

    init?(protoName: String) {
      switch protoName {
      case "creator": self = .creator
      case "manager": self = .manager
      case "member": self = .member
      case "peer": self = .peer
      default: return nil
      }
    }

    var rawValue: Int {
      get {
        switch self {
        case .creator: return 0
        case .manager: return 1
        case .member: return 2
        case .peer: return 3
        case .UNRECOGNIZED(let i): return i
        }
      }
    }

    var json: String {
      get {
        switch self {
        case .creator: return "\"creator\""
        case .manager: return "\"manager\""
        case .member: return "\"member\""
        case .peer: return "\"peer\""
        case .UNRECOGNIZED(let i): return String(i)
        }
      }
    }

    var hashValue: Int { return rawValue }

    var debugDescription: String {
      get {
        switch self {
        case .creator: return ".creator"
        case .manager: return ".manager"
        case .member: return ".member"
        case .peer: return ".peer"
        case .UNRECOGNIZED(let v): return ".UNRECOGNIZED(\(v))"
        }
      }
    }

  }

  ///   to node 
  var id: String = ""

  var authorize: Chat_MessageNode.Authorize = Chat_MessageNode.Authorize.creator

  var creatorId: String = ""

  var nickname: String = ""

  var version: Int32 = 0

  var managerIds: [String] = []

  var members: [String] = []

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &id)
    case 2: try setter.decodeSingularField(fieldType: Chat_MessageNode.Authorize.self, value: &authorize)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &creatorId)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &nickname)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &version)
    case 6: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &managerIds)
    case 7: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &members)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if id != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: id, protoFieldNumber: 1)
    }
    if authorize != Chat_MessageNode.Authorize.creator {
      try visitor.visitSingularField(fieldType: Chat_MessageNode.Authorize.self, value: authorize, protoFieldNumber: 2)
    }
    if creatorId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: creatorId, protoFieldNumber: 3)
    }
    if nickname != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: nickname, protoFieldNumber: 4)
    }
    if version != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: version, protoFieldNumber: 5)
    }
    if !managerIds.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: managerIds, protoFieldNumber: 6)
    }
    if !members.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: members, protoFieldNumber: 7)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_MessageNode) -> Bool {
    if id != other.id {return false}
    if authorize != other.authorize {return false}
    if creatorId != other.creatorId {return false}
    if nickname != other.nickname {return false}
    if version != other.version {return false}
    if managerIds != other.managerIds {return false}
    if members != other.members {return false}
    return true
  }
}

//  mongo scheme
//  index code_phone 1

struct Chat_UserInfo: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_UserInfo"}
  public var protoMessageName: String {return "UserInfo"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "toNodeID", swift: "toNodeId"),
    2: .same(proto: "userID", swift: "userId"),
  ]


  var toNodeId: String = ""

  var userId: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &toNodeId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &userId)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if toNodeId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: toNodeId, protoFieldNumber: 1)
    }
    if userId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: userId, protoFieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_UserInfo) -> Bool {
    if toNodeId != other.toNodeId {return false}
    if userId != other.userId {return false}
    return true
  }
}

struct Chat_User: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_User"}
  public var protoMessageName: String {return "User"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "id", swift: "id"),
    2: .same(proto: "realname", swift: "realname"),
    3: .same(proto: "nickname", swift: "nickname"),
    4: .same(proto: "icon", swift: "icon"),
    5: .same(proto: "description", swift: "description_p"),
    6: .same(proto: "isMale", swift: "isMale"),
    7: .same(proto: "phoneNo", swift: "phoneNo"),
    8: .same(proto: "countryCode", swift: "countryCode"),
    9: .same(proto: "password", swift: "password"),
    10: .same(proto: "birthday", swift: "birthday"),
    11: .same(proto: "version", swift: "version"),
    12: .same(proto: "friends", swift: "friends"),
    13: .same(proto: "blacklist", swift: "blacklist"),
    14: .same(proto: "groupNodeIDs", swift: "groupNodeIds"),
    15: .same(proto: "devices", swift: "devices"),
  ]


  var id: String = ""

  var realname: String = ""

  var nickname: String = ""

  ///   path
  var icon: String = ""

  var description_p: String = ""

  var isMale: Bool = false

  ///   code_phone 86_18514029918 
  var phoneNo: String = ""

  ///   default is 86 
  var countryCode: String = ""

  ///   sha1 double 
  var password: String = ""

  var birthday: Int32 = 0

  var version: Int32 = 0

  var friends: [Chat_UserInfo] = []

  var blacklist: [String] = []

  var groupNodeIds: [String] = []

  var devices: [Chat_Device] = []

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &id)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &realname)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &nickname)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &icon)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &description_p)
    case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &isMale)
    case 7: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &phoneNo)
    case 8: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &countryCode)
    case 9: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &password)
    case 10: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &birthday)
    case 11: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &version)
    case 12: try setter.decodeRepeatedMessageField(fieldType: Chat_UserInfo.self, value: &friends)
    case 13: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &blacklist)
    case 14: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &groupNodeIds)
    case 15: try setter.decodeRepeatedMessageField(fieldType: Chat_Device.self, value: &devices)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if id != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: id, protoFieldNumber: 1)
    }
    if realname != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: realname, protoFieldNumber: 2)
    }
    if nickname != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: nickname, protoFieldNumber: 3)
    }
    if icon != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: icon, protoFieldNumber: 4)
    }
    if description_p != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: description_p, protoFieldNumber: 5)
    }
    if isMale != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: isMale, protoFieldNumber: 6)
    }
    if phoneNo != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: phoneNo, protoFieldNumber: 7)
    }
    if countryCode != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: countryCode, protoFieldNumber: 8)
    }
    if password != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: password, protoFieldNumber: 9)
    }
    if birthday != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: birthday, protoFieldNumber: 10)
    }
    if version != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: version, protoFieldNumber: 11)
    }
    if !friends.isEmpty {
      try visitor.visitRepeatedMessageField(value: friends, protoFieldNumber: 12)
    }
    if !blacklist.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: blacklist, protoFieldNumber: 13)
    }
    if !groupNodeIds.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: groupNodeIds, protoFieldNumber: 14)
    }
    if !devices.isEmpty {
      try visitor.visitRepeatedMessageField(value: devices, protoFieldNumber: 15)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_User) -> Bool {
    if id != other.id {return false}
    if realname != other.realname {return false}
    if nickname != other.nickname {return false}
    if icon != other.icon {return false}
    if description_p != other.description_p {return false}
    if isMale != other.isMale {return false}
    if phoneNo != other.phoneNo {return false}
    if countryCode != other.countryCode {return false}
    if password != other.password {return false}
    if birthday != other.birthday {return false}
    if version != other.version {return false}
    if friends != other.friends {return false}
    if blacklist != other.blacklist {return false}
    if groupNodeIds != other.groupNodeIds {return false}
    if devices != other.devices {return false}
    return true
  }
}

struct Chat_SetUserProperty: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_SetUserProperty"}
  public var protoMessageName: String {return "SetUserProperty"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "property", swift: "property"),
    2: .same(proto: "value", swift: "value"),
  ]


  var property: Chat_UserProperty = Chat_UserProperty.realname

  var value: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: Chat_UserProperty.self, value: &property)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &value)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if property != Chat_UserProperty.realname {
      try visitor.visitSingularField(fieldType: Chat_UserProperty.self, value: property, protoFieldNumber: 1)
    }
    if value != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: value, protoFieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_SetUserProperty) -> Bool {
    if property != other.property {return false}
    if value != other.value {return false}
    return true
  }
}

struct Chat_SetUserPropertyRes: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_SetUserPropertyRes"}
  public var protoMessageName: String {return "SetUserPropertyRes"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "property", swift: "property"),
    2: .same(proto: "value", swift: "value"),
  ]


  var property: Chat_UserProperty = Chat_UserProperty.realname

  var value: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: Chat_UserProperty.self, value: &property)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &value)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if property != Chat_UserProperty.realname {
      try visitor.visitSingularField(fieldType: Chat_UserProperty.self, value: property, protoFieldNumber: 1)
    }
    if value != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: value, protoFieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_SetUserPropertyRes) -> Bool {
    if property != other.property {return false}
    if value != other.value {return false}
    return true
  }
}

struct Chat_QueryUser: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_QueryUser"}
  public var protoMessageName: String {return "QueryUser"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "userID", swift: "userId"),
    2: .same(proto: "countryCode", swift: "countryCode"),
    3: .same(proto: "phoneNo", swift: "phoneNo"),
  ]


  var userId: String = ""

  var countryCode: String = ""

  var phoneNo: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &userId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &countryCode)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &phoneNo)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if userId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: userId, protoFieldNumber: 1)
    }
    if countryCode != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: countryCode, protoFieldNumber: 2)
    }
    if phoneNo != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: phoneNo, protoFieldNumber: 3)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_QueryUser) -> Bool {
    if userId != other.userId {return false}
    if countryCode != other.countryCode {return false}
    if phoneNo != other.phoneNo {return false}
    return true
  }
}

struct Chat_QueryUserRes: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_QueryUserRes"}
  public var protoMessageName: String {return "QueryUserRes"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "toUserID_outer", json: "toUserIDOuter", swift: "toUserIdOuter"),
    2: .same(proto: "user", swift: "user"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Chat_QueryUserRes
    var _toUserIdOuter: String = ""
    var _user: Chat_User? = nil

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_toUserIdOuter)
      case 2: try setter.decodeSingularMessageField(fieldType: Chat_User.self, value: &_user)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if _toUserIdOuter != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _toUserIdOuter, protoFieldNumber: 1)
      }
      if let v = _user {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 2)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _toUserIdOuter != other._toUserIdOuter {return false}
      if _user != other._user {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._toUserIdOuter = _toUserIdOuter
      clone._user = _user
      return clone
    }
  }

  private var _storage = _StorageClass()


  var toUserIdOuter: String {
    get {return _storage._toUserIdOuter}
    set {_uniqueStorage()._toUserIdOuter = newValue}
  }

  var user: Chat_User {
    get {return _storage._user ?? Chat_User()}
    set {_uniqueStorage()._user = newValue}
  }
  public var hasUser: Bool {
    return _storage._user != nil
  }
  public mutating func clearUser() {
    return _storage._user = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Chat_QueryUserRes) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

struct Chat_QueryUserVersion: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_QueryUserVersion"}
  public var protoMessageName: String {return "QueryUserVersion"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "userID", swift: "userId"),
  ]


  var userId: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &userId)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if userId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: userId, protoFieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_QueryUserVersion) -> Bool {
    if userId != other.userId {return false}
    return true
  }
}

struct Chat_QueryUserVersionRes: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_QueryUserVersionRes"}
  public var protoMessageName: String {return "QueryUserVersionRes"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "userID", swift: "userId"),
    2: .same(proto: "version", swift: "version"),
  ]


  var userId: String = ""

  var version: Int32 = 0

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &userId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &version)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if userId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: userId, protoFieldNumber: 1)
    }
    if version != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: version, protoFieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_QueryUserVersionRes) -> Bool {
    if userId != other.userId {return false}
    if version != other.version {return false}
    return true
  }
}

struct Chat_QueryNode: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_QueryNode"}
  public var protoMessageName: String {return "QueryNode"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "toNodeID", swift: "toNodeId"),
  ]


  var toNodeId: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &toNodeId)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if toNodeId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: toNodeId, protoFieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_QueryNode) -> Bool {
    if toNodeId != other.toNodeId {return false}
    return true
  }
}

struct Chat_QueryNodeRes: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_QueryNodeRes"}
  public var protoMessageName: String {return "QueryNodeRes"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "toUserID_outer", json: "toUserIDOuter", swift: "toUserIdOuter"),
    2: .same(proto: "node", swift: "node"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Chat_QueryNodeRes
    var _toUserIdOuter: String = ""
    var _node: Chat_MessageNode? = nil

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_toUserIdOuter)
      case 2: try setter.decodeSingularMessageField(fieldType: Chat_MessageNode.self, value: &_node)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if _toUserIdOuter != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _toUserIdOuter, protoFieldNumber: 1)
      }
      if let v = _node {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 2)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _toUserIdOuter != other._toUserIdOuter {return false}
      if _node != other._node {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._toUserIdOuter = _toUserIdOuter
      clone._node = _node
      return clone
    }
  }

  private var _storage = _StorageClass()


  var toUserIdOuter: String {
    get {return _storage._toUserIdOuter}
    set {_uniqueStorage()._toUserIdOuter = newValue}
  }

  var node: Chat_MessageNode {
    get {return _storage._node ?? Chat_MessageNode()}
    set {_uniqueStorage()._node = newValue}
  }
  public var hasNode: Bool {
    return _storage._node != nil
  }
  public mutating func clearNode() {
    return _storage._node = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Chat_QueryNodeRes) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

struct Chat_QueryNodeVersion: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_QueryNodeVersion"}
  public var protoMessageName: String {return "QueryNodeVersion"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "toNodeID", swift: "toNodeId"),
  ]


  var toNodeId: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &toNodeId)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if toNodeId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: toNodeId, protoFieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_QueryNodeVersion) -> Bool {
    if toNodeId != other.toNodeId {return false}
    return true
  }
}

struct Chat_QueryNodeVersionRes: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_QueryNodeVersionRes"}
  public var protoMessageName: String {return "QueryNodeVersionRes"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "toNodeID", swift: "toNodeId"),
    2: .same(proto: "version", swift: "version"),
  ]


  var toNodeId: String = ""

  var version: Int32 = 0

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &toNodeId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &version)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if toNodeId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: toNodeId, protoFieldNumber: 1)
    }
    if version != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: version, protoFieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_QueryNodeVersionRes) -> Bool {
    if toNodeId != other.toNodeId {return false}
    if version != other.version {return false}
    return true
  }
}

struct Chat_Register: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_Register"}
  public var protoMessageName: String {return "Register"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "phoneNo", swift: "phoneNo"),
    2: .same(proto: "countryCode", swift: "countryCode"),
    3: .same(proto: "password", swift: "password"),
    4: .same(proto: "nickname", swift: "nickname"),
    5: .same(proto: "verifycode", swift: "verifycode"),
  ]


  var phoneNo: String = ""

  ///   default is 86
  var countryCode: String = ""

  ///   sha1 double
  var password: String = ""

  var nickname: String = ""

  var verifycode: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &phoneNo)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &countryCode)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &password)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &nickname)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &verifycode)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if phoneNo != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: phoneNo, protoFieldNumber: 1)
    }
    if countryCode != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: countryCode, protoFieldNumber: 2)
    }
    if password != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: password, protoFieldNumber: 3)
    }
    if nickname != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: nickname, protoFieldNumber: 4)
    }
    if verifycode != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: verifycode, protoFieldNumber: 5)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_Register) -> Bool {
    if phoneNo != other.phoneNo {return false}
    if countryCode != other.countryCode {return false}
    if password != other.password {return false}
    if nickname != other.nickname {return false}
    if verifycode != other.verifycode {return false}
    return true
  }
}

struct Chat_RegisterRes: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_RegisterRes"}
  public var protoMessageName: String {return "RegisterRes"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "userID", swift: "userId"),
    2: .same(proto: "isSuccess", swift: "isSuccess"),
    3: .unique(proto: "e_msg", json: "eMsg", swift: "eMsg"),
    4: .unique(proto: "e_no", json: "eNo", swift: "eNo"),
  ]


  var userId: String = ""

  var isSuccess: Bool = false

  var eMsg: String = ""

  var eNo: Int32 = 0

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &userId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &isSuccess)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &eMsg)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &eNo)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if userId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: userId, protoFieldNumber: 1)
    }
    if isSuccess != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: isSuccess, protoFieldNumber: 2)
    }
    if eMsg != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: eMsg, protoFieldNumber: 3)
    }
    if eNo != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: eNo, protoFieldNumber: 4)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_RegisterRes) -> Bool {
    if userId != other.userId {return false}
    if isSuccess != other.isSuccess {return false}
    if eMsg != other.eMsg {return false}
    if eNo != other.eNo {return false}
    return true
  }
}

///  
///  
///  db.userLogin
///  {
///  userID:
///  ips:
///  isPass:
///  }
///  db.userConnect
///  {
///  userID:
///  ips:
///  UUID:
///  }
struct Chat_Login: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_Login"}
  public var protoMessageName: String {return "Login"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "phoneNo", swift: "phoneNo"),
    2: .same(proto: "countryCode", swift: "countryCode"),
    3: .same(proto: "password", swift: "password"),
    4: .same(proto: "device", swift: "device"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Chat_Login
    var _phoneNo: String = ""
    var _countryCode: String = ""
    var _password: String = ""
    var _device: Chat_Device? = nil

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_phoneNo)
      case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_countryCode)
      case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &_password)
      case 4: try setter.decodeSingularMessageField(fieldType: Chat_Device.self, value: &_device)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if _phoneNo != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _phoneNo, protoFieldNumber: 1)
      }
      if _countryCode != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _countryCode, protoFieldNumber: 2)
      }
      if _password != "" {
        try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: _password, protoFieldNumber: 3)
      }
      if let v = _device {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 4)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _phoneNo != other._phoneNo {return false}
      if _countryCode != other._countryCode {return false}
      if _password != other._password {return false}
      if _device != other._device {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._phoneNo = _phoneNo
      clone._countryCode = _countryCode
      clone._password = _password
      clone._device = _device
      return clone
    }
  }

  private var _storage = _StorageClass()


  var phoneNo: String {
    get {return _storage._phoneNo}
    set {_uniqueStorage()._phoneNo = newValue}
  }

  ///   default is 86
  var countryCode: String {
    get {return _storage._countryCode}
    set {_uniqueStorage()._countryCode = newValue}
  }

  ///   sha1 double
  var password: String {
    get {return _storage._password}
    set {_uniqueStorage()._password = newValue}
  }

  ///  repeated string ips = 5;
  var device: Chat_Device {
    get {return _storage._device ?? Chat_Device()}
    set {_uniqueStorage()._device = newValue}
  }
  public var hasDevice: Bool {
    return _storage._device != nil
  }
  public mutating func clearDevice() {
    return _storage._device = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Chat_Login) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

struct Chat_LoginRes: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_LoginRes"}
  public var protoMessageName: String {return "LoginRes"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "isSuccess", swift: "isSuccess"),
    2: .same(proto: "userID", swift: "userId"),
    3: .same(proto: "uuid", swift: "uuid"),
    4: .unique(proto: "e_no", json: "eNo", swift: "eNo"),
    5: .unique(proto: "e_msg", json: "eMsg", swift: "eMsg"),
  ]


  var isSuccess: Bool = false

  var userId: String = ""

  var uuid: String = ""

  var eNo: Int32 = 0

  var eMsg: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &isSuccess)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &userId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &uuid)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &eNo)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &eMsg)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if isSuccess != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: isSuccess, protoFieldNumber: 1)
    }
    if userId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: userId, protoFieldNumber: 2)
    }
    if uuid != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: uuid, protoFieldNumber: 3)
    }
    if eNo != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: eNo, protoFieldNumber: 4)
    }
    if eMsg != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: eMsg, protoFieldNumber: 5)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_LoginRes) -> Bool {
    if isSuccess != other.isSuccess {return false}
    if userId != other.userId {return false}
    if uuid != other.uuid {return false}
    if eNo != other.eNo {return false}
    if eMsg != other.eMsg {return false}
    return true
  }
}

struct Chat_LoginNoti: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_LoginNoti"}
  public var protoMessageName: String {return "LoginNoti"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "toUserID_outer", json: "toUserIDOuter", swift: "toUserIdOuter"),
    2: .same(proto: "UUID", swift: "uuid"),
  ]


  var toUserIdOuter: String = ""

  var uuid: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &toUserIdOuter)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &uuid)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if toUserIdOuter != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: toUserIdOuter, protoFieldNumber: 1)
    }
    if uuid != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: uuid, protoFieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_LoginNoti) -> Bool {
    if toUserIdOuter != other.toUserIdOuter {return false}
    if uuid != other.uuid {return false}
    return true
  }
}

struct Chat_ClientConnect: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_ClientConnect"}
  public var protoMessageName: String {return "ClientConnect"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "userID", swift: "userId"),
    2: .same(proto: "UUID", swift: "uuid"),
    3: .same(proto: "isReciveNoti", swift: "isReciveNoti"),
    4: .same(proto: "OSVersion", swift: "osversion"),
    5: .same(proto: "appVersion", swift: "appVersion"),
    6: .same(proto: "clientVersion", swift: "clientVersion"),
  ]


  var userId: String = ""

  var uuid: String = ""

  var isReciveNoti: Bool = false

  var osversion: String = ""

  ///   Dot-decimal notaiton
  var appVersion: String = ""

  ///   Dot-decimal notation
  var clientVersion: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &userId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &uuid)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &isReciveNoti)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &osversion)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &appVersion)
    case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &clientVersion)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if userId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: userId, protoFieldNumber: 1)
    }
    if uuid != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: uuid, protoFieldNumber: 2)
    }
    if isReciveNoti != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: isReciveNoti, protoFieldNumber: 3)
    }
    if osversion != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: osversion, protoFieldNumber: 4)
    }
    if appVersion != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: appVersion, protoFieldNumber: 5)
    }
    if clientVersion != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: clientVersion, protoFieldNumber: 6)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_ClientConnect) -> Bool {
    if userId != other.userId {return false}
    if uuid != other.uuid {return false}
    if isReciveNoti != other.isReciveNoti {return false}
    if osversion != other.osversion {return false}
    if appVersion != other.appVersion {return false}
    if clientVersion != other.clientVersion {return false}
    return true
  }
}

struct Chat_ClientConnectRes: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_ClientConnectRes"}
  public var protoMessageName: String {return "ClientConnectRes"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "UUID", swift: "uuid"),
    2: .same(proto: "userID", swift: "userId"),
    3: .same(proto: "sessionid", swift: "sessionid"),
    4: .same(proto: "isSuccess", swift: "isSuccess"),
    5: .unique(proto: "e_msg", json: "eMsg", swift: "eMsg"),
    6: .unique(proto: "e_no", json: "eNo", swift: "eNo"),
  ]


  var uuid: String = ""

  var userId: String = ""

  var sessionid: Int32 = 0

  var isSuccess: Bool = false

  var eMsg: String = ""

  var eNo: Int32 = 0

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &uuid)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &userId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &sessionid)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &isSuccess)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &eMsg)
    case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &eNo)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if uuid != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: uuid, protoFieldNumber: 1)
    }
    if userId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: userId, protoFieldNumber: 2)
    }
    if sessionid != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: sessionid, protoFieldNumber: 3)
    }
    if isSuccess != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: isSuccess, protoFieldNumber: 4)
    }
    if eMsg != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: eMsg, protoFieldNumber: 5)
    }
    if eNo != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: eNo, protoFieldNumber: 6)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_ClientConnectRes) -> Bool {
    if uuid != other.uuid {return false}
    if userId != other.userId {return false}
    if sessionid != other.sessionid {return false}
    if isSuccess != other.isSuccess {return false}
    if eMsg != other.eMsg {return false}
    if eNo != other.eNo {return false}
    return true
  }
}

struct Chat_ClientDisConnect: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_ClientDisConnect"}
  public var protoMessageName: String {return "ClientDisConnect"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "userID", swift: "userId"),
    2: .same(proto: "UUID", swift: "uuid"),
  ]


  var userId: String = ""

  var uuid: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &userId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &uuid)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if userId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: userId, protoFieldNumber: 1)
    }
    if uuid != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: uuid, protoFieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_ClientDisConnect) -> Bool {
    if userId != other.userId {return false}
    if uuid != other.uuid {return false}
    return true
  }
}

struct Chat_ClientDisConnectRes: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_ClientDisConnectRes"}
  public var protoMessageName: String {return "ClientDisConnectRes"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "UUID", swift: "uuid"),
    2: .same(proto: "userID", swift: "userId"),
  ]


  var uuid: String = ""

  var userId: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &uuid)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &userId)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if uuid != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: uuid, protoFieldNumber: 1)
    }
    if userId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: userId, protoFieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_ClientDisConnectRes) -> Bool {
    if uuid != other.uuid {return false}
    if userId != other.userId {return false}
    return true
  }
}

struct Chat_Logout: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_Logout"}
  public var protoMessageName: String {return "Logout"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "userID", swift: "userId"),
    2: .same(proto: "UUID", swift: "uuid"),
  ]


  var userId: String = ""

  var uuid: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &userId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &uuid)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if userId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: userId, protoFieldNumber: 1)
    }
    if uuid != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: uuid, protoFieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_Logout) -> Bool {
    if userId != other.userId {return false}
    if uuid != other.uuid {return false}
    return true
  }
}

struct Chat_LogoutRes: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_LogoutRes"}
  public var protoMessageName: String {return "LogoutRes"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "UUID", swift: "uuid"),
    2: .same(proto: "userID", swift: "userId"),
  ]


  var uuid: String = ""

  var userId: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &uuid)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &userId)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if uuid != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: uuid, protoFieldNumber: 1)
    }
    if userId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: userId, protoFieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_LogoutRes) -> Bool {
    if uuid != other.uuid {return false}
    if userId != other.userId {return false}
    return true
  }
}

// 
// db.addFriend
// {
// littleIDBigID:
// inviter:
// invitee:
// toNodeID:
// status: request createNode createNodeCount agree(refuse) 
// addInviter userUnreadInviter addInvitee finish(userUnreadInvitee)
// }

struct Chat_AddFriendInfo: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_AddFriendInfo"}
  public var protoMessageName: String {return "AddFriendInfo"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "inviter", swift: "inviter"),
    2: .same(proto: "invitee", swift: "invitee"),
    3: .same(proto: "toNodeID", swift: "toNodeId"),
  ]


  var inviter: String = ""

  var invitee: String = ""

  var toNodeId: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &inviter)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &invitee)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &toNodeId)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if inviter != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: inviter, protoFieldNumber: 1)
    }
    if invitee != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: invitee, protoFieldNumber: 2)
    }
    if toNodeId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: toNodeId, protoFieldNumber: 3)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_AddFriendInfo) -> Bool {
    if inviter != other.inviter {return false}
    if invitee != other.invitee {return false}
    if toNodeId != other.toNodeId {return false}
    return true
  }
}

struct Chat_AddFriend: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_AddFriend"}
  public var protoMessageName: String {return "AddFriend"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "inviteeID", swift: "inviteeId"),
    2: .same(proto: "inviterID", swift: "inviterId"),
    3: .same(proto: "msg", swift: "msg"),
  ]


  var inviteeId: String = ""

  var inviterId: String = ""

  var msg: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &inviteeId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &inviterId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &msg)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if inviteeId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: inviteeId, protoFieldNumber: 1)
    }
    if inviterId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: inviterId, protoFieldNumber: 2)
    }
    if msg != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: msg, protoFieldNumber: 3)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_AddFriend) -> Bool {
    if inviteeId != other.inviteeId {return false}
    if inviterId != other.inviterId {return false}
    if msg != other.msg {return false}
    return true
  }
}

struct Chat_AddFriendRes: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_AddFriendRes"}
  public var protoMessageName: String {return "AddFriendRes"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "inviterID", swift: "inviterId"),
    2: .same(proto: "inviteeID", swift: "inviteeId"),
    3: .same(proto: "toNodeID", swift: "toNodeId"),
  ]


  var inviterId: String = ""

  var inviteeId: String = ""

  var toNodeId: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &inviterId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &inviteeId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &toNodeId)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if inviterId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: inviterId, protoFieldNumber: 1)
    }
    if inviteeId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: inviteeId, protoFieldNumber: 2)
    }
    if toNodeId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: toNodeId, protoFieldNumber: 3)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_AddFriendRes) -> Bool {
    if inviterId != other.inviterId {return false}
    if inviteeId != other.inviteeId {return false}
    if toNodeId != other.toNodeId {return false}
    return true
  }
}

struct Chat_AddFriendNoti: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_AddFriendNoti"}
  public var protoMessageName: String {return "AddFriendNoti"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "response", swift: "response"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Chat_AddFriendNoti
    var _response: Chat_AddFriendRes? = nil

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Chat_AddFriendRes.self, value: &_response)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _response {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _response != other._response {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._response = _response
      return clone
    }
  }

  private var _storage = _StorageClass()


  var response: Chat_AddFriendRes {
    get {return _storage._response ?? Chat_AddFriendRes()}
    set {_uniqueStorage()._response = newValue}
  }
  public var hasResponse: Bool {
    return _storage._response != nil
  }
  public mutating func clearResponse() {
    return _storage._response = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Chat_AddFriendNoti) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

struct Chat_AddFriendAuthorize: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_AddFriendAuthorize"}
  public var protoMessageName: String {return "AddFriendAuthorize"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "inviterID", swift: "inviterId"),
    2: .same(proto: "inviteeID", swift: "inviteeId"),
    3: .same(proto: "isAgree", swift: "isAgree"),
  ]


  var inviterId: String = ""

  var inviteeId: String = ""

  var isAgree: Chat_IsAgree = Chat_IsAgree.unknow

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &inviterId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &inviteeId)
    case 3: try setter.decodeSingularField(fieldType: Chat_IsAgree.self, value: &isAgree)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if inviterId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: inviterId, protoFieldNumber: 1)
    }
    if inviteeId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: inviteeId, protoFieldNumber: 2)
    }
    if isAgree != Chat_IsAgree.unknow {
      try visitor.visitSingularField(fieldType: Chat_IsAgree.self, value: isAgree, protoFieldNumber: 3)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_AddFriendAuthorize) -> Bool {
    if inviterId != other.inviterId {return false}
    if inviteeId != other.inviteeId {return false}
    if isAgree != other.isAgree {return false}
    return true
  }
}

struct Chat_AddFriendAuthorizeRes: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_AddFriendAuthorizeRes"}
  public var protoMessageName: String {return "AddFriendAuthorizeRes"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "inviterID", swift: "inviterId"),
    2: .same(proto: "inviteeID", swift: "inviteeId"),
    3: .same(proto: "isAgree", swift: "isAgree"),
  ]


  var inviterId: String = ""

  var inviteeId: String = ""

  var isAgree: Chat_IsAgree = Chat_IsAgree.unknow

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &inviterId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &inviteeId)
    case 3: try setter.decodeSingularField(fieldType: Chat_IsAgree.self, value: &isAgree)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if inviterId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: inviterId, protoFieldNumber: 1)
    }
    if inviteeId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: inviteeId, protoFieldNumber: 2)
    }
    if isAgree != Chat_IsAgree.unknow {
      try visitor.visitSingularField(fieldType: Chat_IsAgree.self, value: isAgree, protoFieldNumber: 3)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_AddFriendAuthorizeRes) -> Bool {
    if inviterId != other.inviterId {return false}
    if inviteeId != other.inviteeId {return false}
    if isAgree != other.isAgree {return false}
    return true
  }
}

struct Chat_AddFriendAuthorizeNoti: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_AddFriendAuthorizeNoti"}
  public var protoMessageName: String {return "AddFriendAuthorizeNoti"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "response", swift: "response"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Chat_AddFriendAuthorizeNoti
    var _response: Chat_AddFriendAuthorizeRes? = nil

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Chat_AddFriendAuthorizeRes.self, value: &_response)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _response {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _response != other._response {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._response = _response
      return clone
    }
  }

  private var _storage = _StorageClass()


  var response: Chat_AddFriendAuthorizeRes {
    get {return _storage._response ?? Chat_AddFriendAuthorizeRes()}
    set {_uniqueStorage()._response = newValue}
  }
  public var hasResponse: Bool {
    return _storage._response != nil
  }
  public mutating func clearResponse() {
    return _storage._response = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Chat_AddFriendAuthorizeNoti) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}

struct Chat_QueryAddfriendInfo: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_QueryAddfriendInfo"}
  public var protoMessageName: String {return "QueryAddfriendInfo"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "count", swift: "count"),
  ]


  var count: Int32 = 0

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &count)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if count != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: count, protoFieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_QueryAddfriendInfo) -> Bool {
    if count != other.count {return false}
    return true
  }
}

struct Chat_QueryAddfriendInfoRes: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_QueryAddfriendInfoRes"}
  public var protoMessageName: String {return "QueryAddfriendInfoRes"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "info", swift: "info"),
  ]


  var info: [Chat_AddFriendInfo] = []

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedMessageField(fieldType: Chat_AddFriendInfo.self, value: &info)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if !info.isEmpty {
      try visitor.visitRepeatedMessageField(value: info, protoFieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_QueryAddfriendInfoRes) -> Bool {
    if info != other.info {return false}
    return true
  }
}

struct Chat_CreateGroup: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_CreateGroup"}
  public var protoMessageName: String {return "CreateGroup"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "userID", swift: "userId"),
    2: .same(proto: "nickname", swift: "nickname"),
    3: .same(proto: "membersID", swift: "membersId"),
  ]


  var userId: String = ""

  var nickname: String = ""

  ///   at last 2
  var membersId: [String] = []

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &userId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &nickname)
    case 3: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &membersId)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if userId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: userId, protoFieldNumber: 1)
    }
    if nickname != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: nickname, protoFieldNumber: 2)
    }
    if !membersId.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: membersId, protoFieldNumber: 3)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_CreateGroup) -> Bool {
    if userId != other.userId {return false}
    if nickname != other.nickname {return false}
    if membersId != other.membersId {return false}
    return true
  }
}

struct Chat_CreateGroupRes: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_CreateGroupRes"}
  public var protoMessageName: String {return "CreateGroupRes"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "toUserID_outer", json: "toUserIDOuter", swift: "toUserIdOuter"),
    2: .same(proto: "nickname", swift: "nickname"),
    3: .same(proto: "toNodeID", swift: "toNodeId"),
  ]


  var toUserIdOuter: String = ""

  var nickname: String = ""

  var toNodeId: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &toUserIdOuter)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &nickname)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &toNodeId)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if toUserIdOuter != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: toUserIdOuter, protoFieldNumber: 1)
    }
    if nickname != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: nickname, protoFieldNumber: 2)
    }
    if toNodeId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: toNodeId, protoFieldNumber: 3)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_CreateGroupRes) -> Bool {
    if toUserIdOuter != other.toUserIdOuter {return false}
    if nickname != other.nickname {return false}
    if toNodeId != other.toNodeId {return false}
    return true
  }
}

struct Chat_GroupAddMember: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_GroupAddMember"}
  public var protoMessageName: String {return "GroupAddMember"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "toNodeID", swift: "toNodeId"),
    2: .same(proto: "membersID", swift: "membersId"),
  ]


  var toNodeId: String = ""

  var membersId: [String] = []

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &toNodeId)
    case 2: try setter.decodeRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: &membersId)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if toNodeId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: toNodeId, protoFieldNumber: 1)
    }
    if !membersId.isEmpty {
      try visitor.visitRepeatedField(fieldType: SwiftProtobuf.ProtobufString.self, value: membersId, protoFieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_GroupAddMember) -> Bool {
    if toNodeId != other.toNodeId {return false}
    if membersId != other.membersId {return false}
    return true
  }
}

struct Chat_GroupAddMemberRes: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_GroupAddMemberRes"}
  public var protoMessageName: String {return "GroupAddMemberRes"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .unique(proto: "toUserID_outer", json: "toUserIDOuter", swift: "toUserIdOuter"),
    2: .same(proto: "toNodeID", swift: "toNodeId"),
  ]


  var toUserIdOuter: String = ""

  var toNodeId: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &toUserIdOuter)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &toNodeId)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if toUserIdOuter != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: toUserIdOuter, protoFieldNumber: 1)
    }
    if toNodeId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: toNodeId, protoFieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_GroupAddMemberRes) -> Bool {
    if toUserIdOuter != other.toUserIdOuter {return false}
    if toNodeId != other.toNodeId {return false}
    return true
  }
}

struct Chat_NodeMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_NodeMessage"}
  public var protoMessageName: String {return "NodeMessage"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "id", swift: "id"),
    2: .same(proto: "fromUserID", swift: "fromUserId"),
    3: .same(proto: "toNodeID", swift: "toNodeId"),
    4: .same(proto: "incrementID", swift: "incrementId"),
    5: .same(proto: "type", swift: "type"),
    6: .same(proto: "content", swift: "content"),
    7: .unique(proto: "toUserID_outer", json: "toUserIDOuter", swift: "toUserIdOuter"),
    8: .same(proto: "timestamp", swift: "timestamp"),
  ]


  var id: String = ""

  ///   client responsibility
  var fromUserId: String = ""

  var toNodeId: String = ""

  var incrementId: Int32 = 0

  var type: Chat_MediaType = Chat_MediaType.unknow

  ///   nontext base64
  var content: String = ""

  ///   server used to quick search device
  var toUserIdOuter: String = ""

  ///   get from id (second)
  var timestamp: Int32 = 0

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &id)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &fromUserId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &toNodeId)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &incrementId)
    case 5: try setter.decodeSingularField(fieldType: Chat_MediaType.self, value: &type)
    case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &content)
    case 7: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &toUserIdOuter)
    case 8: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &timestamp)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if id != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: id, protoFieldNumber: 1)
    }
    if fromUserId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: fromUserId, protoFieldNumber: 2)
    }
    if toNodeId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: toNodeId, protoFieldNumber: 3)
    }
    if incrementId != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: incrementId, protoFieldNumber: 4)
    }
    if type != Chat_MediaType.unknow {
      try visitor.visitSingularField(fieldType: Chat_MediaType.self, value: type, protoFieldNumber: 5)
    }
    if content != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: content, protoFieldNumber: 6)
    }
    if toUserIdOuter != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: toUserIdOuter, protoFieldNumber: 7)
    }
    if timestamp != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: timestamp, protoFieldNumber: 8)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_NodeMessage) -> Bool {
    if id != other.id {return false}
    if fromUserId != other.fromUserId {return false}
    if toNodeId != other.toNodeId {return false}
    if incrementId != other.incrementId {return false}
    if type != other.type {return false}
    if content != other.content {return false}
    if toUserIdOuter != other.toUserIdOuter {return false}
    if timestamp != other.timestamp {return false}
    return true
  }
}

struct Chat_NodeMessageRes: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_NodeMessageRes"}
  public var protoMessageName: String {return "NodeMessageRes"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "id", swift: "id"),
    2: .same(proto: "incrementID", swift: "incrementId"),
    3: .same(proto: "fromUserID", swift: "fromUserId"),
    4: .unique(proto: "toUserID_outer", json: "toUserIDOuter", swift: "toUserIdOuter"),
    5: .same(proto: "toNodeID", swift: "toNodeId"),
    6: .same(proto: "timestamp", swift: "timestamp"),
  ]


  var id: String = ""

  var incrementId: Int32 = 0

  var fromUserId: String = ""

  var toUserIdOuter: String = ""

  var toNodeId: String = ""

  ///   get from id (second)
  var timestamp: Int32 = 0

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &id)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &incrementId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &fromUserId)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &toUserIdOuter)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &toNodeId)
    case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &timestamp)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if id != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: id, protoFieldNumber: 1)
    }
    if incrementId != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: incrementId, protoFieldNumber: 2)
    }
    if fromUserId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: fromUserId, protoFieldNumber: 3)
    }
    if toUserIdOuter != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: toUserIdOuter, protoFieldNumber: 4)
    }
    if toNodeId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: toNodeId, protoFieldNumber: 5)
    }
    if timestamp != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: timestamp, protoFieldNumber: 6)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_NodeMessageRes) -> Bool {
    if id != other.id {return false}
    if incrementId != other.incrementId {return false}
    if fromUserId != other.fromUserId {return false}
    if toUserIdOuter != other.toUserIdOuter {return false}
    if toNodeId != other.toNodeId {return false}
    if timestamp != other.timestamp {return false}
    return true
  }
}

///  
///  db.userUnread
///  {
///  userID:
///  toNodeID:
///  readedIncrement:
///  unreadIncrement:
///  }
struct Chat_NodeMessageNoti: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_NodeMessageNoti"}
  public var protoMessageName: String {return "NodeMessageNoti"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "fromUserID", swift: "fromUserId"),
    2: .unique(proto: "toUserID_outer", json: "toUserIDOuter", swift: "toUserIdOuter"),
    3: .same(proto: "toNodeID", swift: "toNodeId"),
    4: .same(proto: "readedIncrement", swift: "readedIncrement"),
    5: .same(proto: "unreadIncrement", swift: "unreadIncrement"),
  ]


  ///   node unreaded
  var fromUserId: String = ""

  var toUserIdOuter: String = ""

  var toNodeId: String = ""

  var readedIncrement: Int32 = 0

  var unreadIncrement: Int32 = 0

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &fromUserId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &toUserIdOuter)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &toNodeId)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &readedIncrement)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &unreadIncrement)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if fromUserId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: fromUserId, protoFieldNumber: 1)
    }
    if toUserIdOuter != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: toUserIdOuter, protoFieldNumber: 2)
    }
    if toNodeId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: toNodeId, protoFieldNumber: 3)
    }
    if readedIncrement != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: readedIncrement, protoFieldNumber: 4)
    }
    if unreadIncrement != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: unreadIncrement, protoFieldNumber: 5)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_NodeMessageNoti) -> Bool {
    if fromUserId != other.fromUserId {return false}
    if toUserIdOuter != other.toUserIdOuter {return false}
    if toNodeId != other.toNodeId {return false}
    if readedIncrement != other.readedIncrement {return false}
    if unreadIncrement != other.unreadIncrement {return false}
    return true
  }
}

struct Chat_QueryMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_QueryMessage"}
  public var protoMessageName: String {return "QueryMessage"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "toNodeID", swift: "toNodeId"),
    2: .same(proto: "fromIncrementID", swift: "fromIncrementId"),
    3: .same(proto: "toIncrementID", swift: "toIncrementId"),
  ]


  var toNodeId: String = ""

  var fromIncrementId: Int32 = 0

  var toIncrementId: Int32 = 0

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &toNodeId)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &fromIncrementId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: &toIncrementId)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if toNodeId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: toNodeId, protoFieldNumber: 1)
    }
    if fromIncrementId != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: fromIncrementId, protoFieldNumber: 2)
    }
    if toIncrementId != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt32.self, value: toIncrementId, protoFieldNumber: 3)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_QueryMessage) -> Bool {
    if toNodeId != other.toNodeId {return false}
    if fromIncrementId != other.fromIncrementId {return false}
    if toIncrementId != other.toIncrementId {return false}
    return true
  }
}

// 
// message QueryOneMessage {
// string toNodeID = 1;
// int32  incrementID = 2;
// }

struct Chat_QueryMessageRes: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_QueryMessageRes"}
  public var protoMessageName: String {return "QueryMessageRes"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "messages", swift: "messages"),
  ]


  var messages: [Chat_NodeMessage] = []

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeRepeatedMessageField(fieldType: Chat_NodeMessage.self, value: &messages)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if !messages.isEmpty {
      try visitor.visitRepeatedMessageField(value: messages, protoFieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_QueryMessageRes) -> Bool {
    if messages != other.messages {return false}
    return true
  }
}

struct Chat_ServerConnect: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_ServerConnect"}
  public var protoMessageName: String {return "ServerConnect"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "serverName", swift: "serverName"),
    2: .same(proto: "serverIP", swift: "serverIp"),
  ]


  var serverName: String = ""

  var serverIp: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &serverName)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &serverIp)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if serverName != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: serverName, protoFieldNumber: 1)
    }
    if serverIp != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: serverIp, protoFieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_ServerConnect) -> Bool {
    if serverName != other.serverName {return false}
    if serverIp != other.serverIp {return false}
    return true
  }
}

struct Chat_ServerDisconnect: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_ServerDisconnect"}
  public var protoMessageName: String {return "ServerDisconnect"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "serverName", swift: "serverName"),
    2: .same(proto: "serverIP", swift: "serverIp"),
  ]


  var serverName: String = ""

  var serverIp: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &serverName)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &serverIp)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if serverName != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: serverName, protoFieldNumber: 1)
    }
    if serverIp != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: serverIp, protoFieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_ServerDisconnect) -> Bool {
    if serverName != other.serverName {return false}
    if serverIp != other.serverIp {return false}
    return true
  }
}

//  in memory mongodb 
//  user login connect pushMessage info.
//  index chatMessageNode 
//  toNodeID 1 serverName 1, 
//  userID 1 serverName 1 toNodeID 1,
//  UUID 1
//   { 
//     "UUID": "0",
//     "toNodeIDs": [
//       "1",
//       "2",
//       "3"
//     ],
//     "userID": "objectid",
//     "isLogin": true,
//     "isConnected": true,
//     "isReciveNoti": true,
//     "serverName": "process id",
//     "nodepointor": "memory address"
//   }

struct Chat_ConnectInfo: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_ConnectInfo"}
  public var protoMessageName: String {return "ConnectInfo"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "UUID", swift: "uuid"),
    2: .same(proto: "userID", swift: "userId"),
    3: .same(proto: "isLogin", swift: "isLogin"),
    4: .same(proto: "isConnected", swift: "isConnected"),
    5: .same(proto: "isReciveNoti", swift: "isReciveNoti"),
    6: .same(proto: "serverName", swift: "serverName"),
    8: .same(proto: "users", swift: "users"),
    9: .same(proto: "clientVersion", swift: "clientVersion"),
    10: .same(proto: "OSVersion", swift: "osversion"),
    11: .same(proto: "appVersion", swift: "appVersion"),
    12: .same(proto: "timestamp", swift: "timestamp"),
  ]


  var uuid: String = ""

  var userId: String = ""

  var isLogin: Bool = false

  var isConnected: Bool = false

  var isReciveNoti: Bool = false

  var serverName: String = ""

  ///   userID sessionID
  var users: Dictionary<String,Int32> = [:]

  var clientVersion: String = ""

  var osversion: String = ""

  ///   Dot-decimal notaiton
  var appVersion: String = ""

  var timestamp: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &uuid)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &userId)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &isLogin)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &isConnected)
    case 5: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &isReciveNoti)
    case 6: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &serverName)
    case 8: try setter.decodeMapField(fieldType: SwiftProtobuf.ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt32>.self, value: &users)
    case 9: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &clientVersion)
    case 10: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &osversion)
    case 11: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &appVersion)
    case 12: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &timestamp)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if uuid != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: uuid, protoFieldNumber: 1)
    }
    if userId != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: userId, protoFieldNumber: 2)
    }
    if isLogin != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: isLogin, protoFieldNumber: 3)
    }
    if isConnected != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: isConnected, protoFieldNumber: 4)
    }
    if isReciveNoti != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: isReciveNoti, protoFieldNumber: 5)
    }
    if serverName != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: serverName, protoFieldNumber: 6)
    }
    if !users.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf.ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufInt32>.self, value: users, protoFieldNumber: 8)
    }
    if clientVersion != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: clientVersion, protoFieldNumber: 9)
    }
    if osversion != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: osversion, protoFieldNumber: 10)
    }
    if appVersion != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: appVersion, protoFieldNumber: 11)
    }
    if timestamp != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: timestamp, protoFieldNumber: 12)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_ConnectInfo) -> Bool {
    if uuid != other.uuid {return false}
    if userId != other.userId {return false}
    if isLogin != other.isLogin {return false}
    if isConnected != other.isConnected {return false}
    if isReciveNoti != other.isReciveNoti {return false}
    if serverName != other.serverName {return false}
    if users != other.users {return false}
    if clientVersion != other.clientVersion {return false}
    if osversion != other.osversion {return false}
    if appVersion != other.appVersion {return false}
    if timestamp != other.timestamp {return false}
    return true
  }
}

struct Chat_ConnectInfoLittle: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_ConnectInfoLittle"}
  public var protoMessageName: String {return "ConnectInfoLittle"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "UUID", swift: "uuid"),
    2: .same(proto: "isConnected", swift: "isConnected"),
    3: .same(proto: "isReciveNoti", swift: "isReciveNoti"),
    4: .same(proto: "nodepointor", swift: "nodepointor"),
  ]


  var uuid: String = ""

  var isConnected: Bool = false

  var isReciveNoti: Bool = false

  var nodepointor: Int64 = 0

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &uuid)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &isConnected)
    case 3: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &isReciveNoti)
    case 4: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: &nodepointor)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if uuid != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: uuid, protoFieldNumber: 1)
    }
    if isConnected != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: isConnected, protoFieldNumber: 2)
    }
    if isReciveNoti != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: isReciveNoti, protoFieldNumber: 3)
    }
    if nodepointor != 0 {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufInt64.self, value: nodepointor, protoFieldNumber: 4)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_ConnectInfoLittle) -> Bool {
    if uuid != other.uuid {return false}
    if isConnected != other.isConnected {return false}
    if isReciveNoti != other.isReciveNoti {return false}
    if nodepointor != other.nodepointor {return false}
    return true
  }
}

///   media collection
///   {
///      sha1: 123,
///      type: mp3,
///      content: 123,
///   }
struct Chat_Media: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_Media"}
  public var protoMessageName: String {return "Media"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "md5", swift: "md5"),
    2: .same(proto: "path", swift: "path"),
    3: .same(proto: "type", swift: "type"),
  ]


  var md5: String = ""

  var path: String = ""

  var type: Chat_MediaType = Chat_MediaType.unknow

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &md5)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &path)
    case 3: try setter.decodeSingularField(fieldType: Chat_MediaType.self, value: &type)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if md5 != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: md5, protoFieldNumber: 1)
    }
    if path != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: path, protoFieldNumber: 2)
    }
    if type != Chat_MediaType.unknow {
      try visitor.visitSingularField(fieldType: Chat_MediaType.self, value: type, protoFieldNumber: 3)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_Media) -> Bool {
    if md5 != other.md5 {return false}
    if path != other.path {return false}
    if type != other.type {return false}
    return true
  }
}

struct Chat_MediaRes: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_MediaRes"}
  public var protoMessageName: String {return "MediaRes"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "isSuccess", swift: "isSuccess"),
  ]


  var isSuccess: Bool = false

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: &isSuccess)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if isSuccess != false {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufBool.self, value: isSuccess, protoFieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_MediaRes) -> Bool {
    if isSuccess != other.isSuccess {return false}
    return true
  }
}

struct Chat_QueryMedia: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_QueryMedia"}
  public var protoMessageName: String {return "QueryMedia"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "md5", swift: "md5"),
  ]


  var md5: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &md5)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    if md5 != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: md5, protoFieldNumber: 1)
    }
  }

  public func _protoc_generated_isEqualTo(other: Chat_QueryMedia) -> Bool {
    if md5 != other.md5 {return false}
    return true
  }
}

struct Chat_QueryMediaRes: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "Chat_QueryMediaRes"}
  public var protoMessageName: String {return "QueryMediaRes"}
  public var protoPackageName: String {return "chat"}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "media", swift: "media"),
  ]

  private class _StorageClass {
    typealias ExtendedMessage = Chat_QueryMediaRes
    var _media: Chat_Media? = nil

    init() {}

    func decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
      switch protoFieldNumber {
      case 1: try setter.decodeSingularMessageField(fieldType: Chat_Media.self, value: &_media)
      default: break
      }
    }

    func traverse(visitor: inout SwiftProtobuf.Visitor) throws {
      if let v = _media {
        try visitor.visitSingularMessageField(value: v, protoFieldNumber: 1)
      }
    }

    func isEqualTo(other: _StorageClass) -> Bool {
      if _media != other._media {return false}
      return true
    }

    func copy() -> _StorageClass {
      let clone = _StorageClass()
      clone._media = _media
      return clone
    }
  }

  private var _storage = _StorageClass()


  var media: Chat_Media {
    get {return _storage._media ?? Chat_Media()}
    set {_uniqueStorage()._media = newValue}
  }
  public var hasMedia: Bool {
    return _storage._media != nil
  }
  public mutating func clearMedia() {
    return _storage._media = nil
  }

  init() {}

  public mutating func _protoc_generated_decodeField(setter: inout SwiftProtobuf.FieldDecoder, protoFieldNumber: Int) throws {
    try _uniqueStorage().decodeField(setter: &setter, protoFieldNumber: protoFieldNumber)
  }

  public func _protoc_generated_traverse(visitor: inout SwiftProtobuf.Visitor) throws {
    try _storage.traverse(visitor: &visitor)
  }

  public func _protoc_generated_isEqualTo(other: Chat_QueryMediaRes) -> Bool {
    return _storage === other._storage || _storage.isEqualTo(other: other._storage)
  }

  private mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _storage.copy()
    }
    return _storage
  }
}
