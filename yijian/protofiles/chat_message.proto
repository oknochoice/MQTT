// protoc --proto_path=./ --cpp_out=./ ./
syntax = "proto3";

package chat;

option cc_enable_arenas = false;
// client

message ErrorNth {
  int32 maxnth = 1;
}

message NodeInfo {
  int32 updatetime = 1;
  int32 readedIncrementid = 2;
  int32 unreadIncrementid = 3;
}

message TalkList {
  map<string, NodeInfo> nodemap  = 1;
}

// server & client
message NodeSelfDevice {
}

message NodePeerServer {
}

message NodeSpecifiy {
  string toNodeID = 1;
}

message NodeUser {
  string toUserID = 1;
}

message Error {
  int32 errnum = 1;
  string errmsg = 2;
}

message Device {

  enum    OperatingSystem {iOS = 0; Android = 1;}
  OperatingSystem OS = 1;
  string          deviceModel = 2;
  string          deviceNickname = 3;
  string          UUID = 4;
}

// mongo scheme
message MessageNode {
  enum      Authorize {creator = 0; manager = 1; member = 2; peer = 3;}
  string    id = 1;// to node 
  Authorize authorize = 2;
  string    creatorID = 3;
  string    nickname = 4;
  int32     version = 5;
  repeated  string managerIDs = 6;
  repeated  string members = 7;
}

// mongo scheme
// index code_phone 1

message UserInfo {

  string toNodeID = 1;
  string userID = 2;
}

enum IsAgree {
  agree = 0;
  refuse = 1;
  ignore = 2;
}

message User {
  string    id = 1;
  string    realname = 2;
  string    nickname = 3; 
  string    icon = 4;
  string    description = 5;
  bool      isMale = 6;
  string    phoneNo = 7;// code_phone 86_18514029918 
  string    countryCode = 8;// default is 86 
  string    password = 9; // sha1 double 
  int32     birthday = 10;
  int32     version = 11;
  repeated  UserInfo friends = 12;
  repeated  string blacklist = 13;
  repeated  string groupNodeIDs = 14;
  repeated  Device devices = 15;
}

message QueryUser {
  string userID = 1;
}

message QueryUserRes {
  string toUserID_outer = 1;
  User   user = 2;
}

message QueryUserVersion {
  string userID = 1;
}

message QueryUserVersionRes {
  string userID = 1;
  int32  version = 2;
}

message QueryNode {
  string toNodeID = 1;
}

message QueryNodeRes {
  string      toUserID_outer = 1;
  MessageNode node = 2;
}

message QueryNodeVersion {
  string toNodeID = 1;
}

message QueryNodeVersionRes {
  string toNodeID = 1;
  int32  version = 2;
}




message Register {

  string phoneNo = 1;
  string countryCode = 2;// default is 86
  string password = 3; // sha1 double
  string nickname = 4;
  string verifycode = 5;

}

message RegisterRes {
  string  userID = 1;
  bool    isSuccess = 2;
  string  e_msg = 3;
  int32   e_no = 4;
}

/*

db.userLogin
{
  userID:
  ips:
  isPass:
}
db.userConnect
{
  userID:
  ips:
  UUID:
}


*/
message Login {

  string phoneNo = 1;
  string countryCode = 2;// default is 86
  string password = 3; // sha1 double
  Device device = 4;
  repeated string ips = 5;

}

message LoginRes {

  bool    isSuccess = 1;
  string  userID = 2;
  int32   e_no = 3;
  string  e_msg = 4;

}

message LoginNoti {
  string toUserID_outer = 1;
  string UUID = 2;
}

message ClientConnect {
  string userID = 1;
  string UUID = 2;
  bool   isReciveNoti = 3;
  string clientVersion = 4;// Dot-decimal notation
  string OSVersion = 5;
  string appVersion = 6; // Dot-decimal notaiton
  repeated string ips = 7;
}

message ClientConnectRes {
  string  UUID = 1;
  string  userID = 2;
  int32   sessionid = 3;
  bool    isSuccess = 4;
  string  e_msg = 5;
  int32   e_no = 6;
}

message ClientDisConnect {
  string userID = 1;
  string UUID = 2;
}

message ClientDisConnectRes {
  string UUID = 1;
  string userID = 2;
}

message Logout {

  string userID = 1;
  string UUID = 2;

}

message LogoutRes {
  string UUID = 1;
  string userID = 2;
}

/*
db.addFriend
{
  littleIDBigID:
  inviter:
  invitee:
  toNodeID:
  status: request createNode createNodeCount (agree refuse) 
  addInviter userUnreadInviter addInvitee userUnreadInvitee
}

*/

message AddFriend {
  string inviteeID = 1;
  string inviterID = 2;
  string msg = 3;
}

message AddFriendRes {
  string inviterID = 1;
  string inviteeID = 2; 
  string toNodeID = 3;
}

message AddFriendNoti {
  string toUserID_outer = 1;
  AddFriendRes response = 2;
}

message AddFriendAuthorize {
  string inviteeID = 1;
  string inviterID = 2;
  IsAgree isAgree = 3;
}

message AddFriendAuthorizeRes {
  IsAgree isAgree = 1;
  string  toUserID_outer = 2;
}

message AddFriendAuthorizeNoti {
  string toUserID_outer = 1;
  AddFriendAuthorize response = 2;
}

message CreateGroup {
  string userID = 1;
  string nickname = 2;
  repeated string membersID = 3; // at last 2
}

message CreateGroupRes {
  string toUserID_outer = 1;
  string nickname = 2;
  string toNodeID = 3;
}

message GroupAddMember {
  string toNodeID = 1;
  repeated string membersID = 2;
}

message GroupAddMemberRes {
  string toUserID_outer = 1;
  string toNodeID = 2;
}

// mongo scheme 
// index toNodeID 1, incrementID 1
enum   MediaType { 
  UNKNOW = 0; 
  TEXT = 1; 
  JPG = 2; 
  MP3 = 3;
}
              
message NodeMessage {
  
  string id = 1; 
  // client responsibility
  string fromUserID = 2;
  string toNodeID = 3;
  int32  incrementID = 4;// 
  MediaType   type = 5;
  string content = 6;// nontext base64

  string toUserID_outer = 7; // server used to quick search device
  
}
message NodeMessageRes {

  string toNodeID = 2;
  int32  incrementID = 3;

}
/*
db.userUnread
{
  userID:
  toNodeID:
  readedIncrement:
  unreadIncrement:
}

*/
message NodeMessageNoti {
  string toNodeID = 1;
  int32  unreadIncrement = 2;
  string toUserID_outer = 3;
}

message QueryMessage {
  string toNodeID = 1;
  int32  fromIncrementID = 2;
  int32  toIncrementID = 3;
}

message QueryOneMessage {
  string toNodeID = 1;
  int32  incrementID = 2;
}


message ServerConnect {
  string serverName = 1;
  string serverIP = 2;
}

message ServerDisconnect {
  string serverName = 1;
  string serverIP = 2;
}

// in memory mongodb 
// user login connect pushMessage info.
// index chatMessageNode 
// toNodeID 1 serverName 1, 
// userID 1 serverName 1 toNodeID 1,
// UUID 1
//  { 
//    "UUID": "0",
//    "toNodeIDs": [
//      "1",
//      "2",
//      "3"
//    ],
//    "userID": "objectid",
//    "isLogin": true,
//    "isConnected": true,
//    "isReciveNoti": true,
//    "serverName": "process id",
//    "nodepointor": "memory address"
//  }

message ConnectInfo {

  string UUID = 1;
  string userID = 2;
  bool   isLogin = 3;
  bool   isConnected = 4;
  bool   isReciveNoti = 5;
  string serverName = 6;
  int64  nodepointor = 7;
  // userID sessionID
  map<string, int32> users = 8;
  //
  string clientVersion = 9;// Dot-decimal notation
  string OSVersion = 10;
  string appVersion = 11; // Dot-decimal notaiton
  string timestamp = 12;

}

message ConnectInfoLittle {
  string UUID = 1;
  bool   isConnected = 2;
  bool   isReciveNoti = 3;
  int64  nodepointor = 4;
}

// media collection
// {
//    sha1: 123,
//    type: mp3,
//    content: 123,
// }
message Media {

  string sha1 = 1;
  int32  nth = 2;
  MediaType type = 3;
  int32  length = 4;
  bytes  content = 5;

}

message MediaRes {
  string sha1 = 1;
  int32  nth  = 2;
  MediaType type = 3;
}

message QueryMedia {
  string sha1 = 1;
}

message MediaIsExist {
  string sha1 = 1;
}

message MediaIsExistRes {
  bool isExist = 1;
}

message MediaCheck {
  string sha1 = 1;
}

message MediaCheckRes {

  string sha1 = 1;
  bool   isIntact = 2;

}



