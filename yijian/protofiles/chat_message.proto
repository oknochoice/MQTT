// protoc --proto_path=./ --cpp_out=./
syntax = "proto3";

package chat;

option cc_enable_arenas = false;

message NodeSelfDevice {
}

message NodePeerServer {
}

message NodeSpecifiy {
  string toNodeID = 1;
}

message NodeUser {
  string toUserID = 1;
}

message Error {
  int32 errnum = 1;
  string errmsg = 2;
}

message Device {

  enum    OperatingSystem {iOS = 0; Android = 1;}
  OperatingSystem OS = 1;
  string          OSVersion = 2;
  string          clientVersion = 3;// Dot-decimal notation
  string          appVersion = 4; // Dot-decimal notaiton
  string          deviceModel = 5;
  string          deviceNickname = 6;
  string          UUID = 7;
}

message UserInfo {
  string toNodeID = 1;
  string nickname = 2;
  string userID = 3;
}

// mongo scheme
message MessageNode {
  enum      Authorize {creator = 0; manager = 1; member = 2; peer = 3;}
  string    id = 1;// to node 
  Authorize authorize = 2;
  string    creatorID = 3;
  string    nickname = 4;
  repeated  string managerIDs = 5;
  repeated  string members = 6;
}

// mongo scheme
// index code_phone 1
message User {
  string    id = 1;
  string    realname = 2;
  string    nickname = 3; 
  string    icon = 4;
  string    description = 5;
  bool      isMale = 6;
  string    phoneNo = 7;// code_phone 86_18514029918 
  string    countryCode = 8;// default is 86 
  string    password = 9; // sha1 double 
  int32     birthday = 10;
  int32     version = 11;// exclude password blacklist devices groupIDs
  repeated  UserInfo friends = 12;
  repeated  string blacklist = 13;
  repeated  string groupNodeIDs = 14;
  repeated  Device devices = 15;
}

message QueryUser {
  string userID = 1;
}

message QueryUserRes {
  string toUserID_outer = 1;
  User   user = 2;
/*
  string    id = 1;
  string    realname = 2;
  string    nickname = 3;
  bytes     icon = 4;
  string    description = 5;
  bool      isMale = 6;
  string    phoneNo = 7;// code_phone 86_18514029918
  string    countryCode = 8;// default is 86
  int32     birthday = 9;
  string    toUserID_outer = 10;
  // self
  int32     version = 11;
  repeated  UserInfo friends = 12;
  repeated  string blacklist = 13;
  repeated  string groupNodeIDs = 14;
  repeated  Device devices = 15;
  */
}

message QueryUserVersion {
}

message QueryUserVersionRes {
  int32  version = 1;
}

message QueryNode {
  string toNodeID = 1;
}

message QueryNodeRes {
  string      toUserID_outer = 1;
  MessageNode node = 2;
}


//  mongo scheme
// index useID;
message Unread {
  
  map<string, int32>  unreadNodes = 1;

}


message Register {

  string phoneNo = 1;
  string countryCode = 2;// default is 86
  string password = 3; // sha1 double
  string nickname = 4;

}

message RegisterRes {
  bool    isSuccess = 1;
  string  userID = 2;
}

message Login {

  string phoneNo = 1;
  string countryCode = 2;// default is 86
  string password = 3; // sha1 double
  Device device = 4;

}

message LoginRes {

  string UUID = 1;
  string userID = 2;

}

message ClientConnect {
  string userID = 1;
  string UUID = 2;
  bool   isReciveNoti = 3;
}

message ClientConnectRes {
  string  UUID = 1;
  string  userID = 2;
  int32  sessionid = 3;
}

message ClientDisConnect {
  string userID = 1;
  string UUID = 2;
}

message ClientDisConnectRes {
  string UUID = 1;
  string userID = 2;
}

message Logout {

  string userID = 1;
  string UUID = 2;

}

message LogoutRes {
  string UUID = 1;
  string userID = 2;
}

message AddFriend {
  string inviteeID = 1;
  string nickname = 2;
  string msg = 3;
}

message AddFriendRes {
  string inviterID = 1;
  string inviteeID = 2; 
  string nickname = 3;
  string msg = 4;
}

message AddFriendAuthorize {
  string inviteeID = 1;
  string inviterID = 2;
  string inviterNickname = 3;
  string inviteeNickname = 4;
  bool   isAgree = 5;
}

message AddFriendAuthorizeInfo {
  string   toNodeID = 1;
  int32    inviterUserVersion = 2;
  int32    inviteeUserVersion = 3;
}

message AddFriendAuthorizeRes {
  bool     isAgree = 1;
  UserInfo friend = 2;
  int32    userVersion = 3;
}

message CreateGroup {
  string userID = 1;
  string nickname = 2;
  repeated string membersID = 3; // at last 2
}

message CreateGroupRes {
  string toUserID_outer = 1;
  string nickname = 2;
  string toNodeID = 3;
}

message GroupAddMember {
  string groupNodeID = 1;
  repeated string membersID = 2;
}

message GroupAddMemberRes {
  string toUserID_outer = 1;
  string groupNodeID = 2;
}

// mongo scheme 
// index toNodeID 1, incrementID 1
message NodeMessage {
  
  enum   Type { TEXT = 0; JPG = 1; MP3 = 2;}
  string id = 1; 
  // client responsibility
  string fromUserID = 2;
  string toNodeID = 3;
  int32  incrementID = 4;// 
  Type   type = 5;
  string content = 6;// nontext base64

  string toUserID_outer = 7; // server use to search device
  
}
message NodeMessageRes {

  string toNodeID = 2;
  int32  incrementID = 3;

  string toUserID_outer = 1;
}

message QueryMessage {
  string toNodeID = 1;
  int32  fromIncrementID = 2;//[fromIncrementID, toIncrementID)
  int32  toIncrementID = 3;
}


message ServerConnect {
  string serverName = 1;
  string serverIP = 2;
}

message ServerDisconnect {
  string serverName = 1;
  string serverIP = 2;
}

// in memory mongodb 
// user login connect pushMessage info.
// index chatMessageNode 
// toNodeID 1 serverName 1, 
// userID 1 serverName 1 toNodeID 1,
// UUID 1
//  { 
//    "UUID": "0",
//    "toNodeIDs": [
//      "1",
//      "2",
//      "3"
//    ],
//    "userID": "objectid",
//    "isLogin": true,
//    "isConnected": true,
//    "isReciveNoti": true,
//    "serverName": "process id",
//    "nodepointor": "memory address"
//  }
message ConnectInfo {

  string UUID = 1;
  repeated string toNodeIDs = 2;
  string userID = 3;
  bool   isLogin = 4;
  bool   isConnected = 5;
  bool   isReciveNoti = 6;
  string serverName = 7;
  int64  nodepointor = 8;
  map<string, int32> users = 9;

}

message ConnectInfoLittle {
  string UUID = 1;
  bool   isConnected = 2;
  bool   isReciveNoti = 3;
  int64  nodepointor = 4;
}



