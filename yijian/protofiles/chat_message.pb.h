// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat_message.proto

#ifndef PROTOBUF_chat_5fmessage_2eproto__INCLUDED
#define PROTOBUF_chat_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace chat {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_chat_5fmessage_2eproto();
void protobuf_InitDefaults_chat_5fmessage_2eproto();
void protobuf_AssignDesc_chat_5fmessage_2eproto();
void protobuf_ShutdownFile_chat_5fmessage_2eproto();

class AddFriend;
class AddFriendAuthorize;
class AddFriendAuthorizeNoti;
class AddFriendAuthorizeRes;
class AddFriendInfo;
class AddFriendNoti;
class AddFriendRes;
class ClientConnect;
class ClientConnectRes;
class ClientDisConnect;
class ClientDisConnectRes;
class ConnectInfo;
class ConnectInfoLittle;
class CreateGroup;
class CreateGroupRes;
class Device;
class Error;
class ErrorNth;
class GroupAddMember;
class GroupAddMemberRes;
class Login;
class LoginNoti;
class LoginRes;
class Logout;
class LogoutRes;
class Media;
class MediaCheck;
class MediaCheckRes;
class MediaIsExist;
class MediaIsExistRes;
class MediaRes;
class MessageNode;
class NodeInfo;
class NodeMessage;
class NodeMessageNoti;
class NodeMessageRes;
class NodePeerServer;
class NodeSelfDevice;
class NodeSpecifiy;
class NodeUser;
class Ping;
class Pong;
class QueryAddfriendInfo;
class QueryAddfriendInfoRes;
class QueryMedia;
class QueryMessage;
class QueryNode;
class QueryNodeRes;
class QueryNodeVersion;
class QueryNodeVersionRes;
class QueryOneMessage;
class QueryUser;
class QueryUserRes;
class QueryUserVersion;
class QueryUserVersionRes;
class Register;
class RegisterRes;
class ServerConnect;
class ServerDisconnect;
class TalkList;
class User;
class UserInfo;
class setReadMessage;

enum Device_OperatingSystem {
  Device_OperatingSystem_iOS = 0,
  Device_OperatingSystem_Android = 1,
  Device_OperatingSystem_Device_OperatingSystem_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Device_OperatingSystem_Device_OperatingSystem_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Device_OperatingSystem_IsValid(int value);
const Device_OperatingSystem Device_OperatingSystem_OperatingSystem_MIN = Device_OperatingSystem_iOS;
const Device_OperatingSystem Device_OperatingSystem_OperatingSystem_MAX = Device_OperatingSystem_Android;
const int Device_OperatingSystem_OperatingSystem_ARRAYSIZE = Device_OperatingSystem_OperatingSystem_MAX + 1;

const ::google::protobuf::EnumDescriptor* Device_OperatingSystem_descriptor();
inline const ::std::string& Device_OperatingSystem_Name(Device_OperatingSystem value) {
  return ::google::protobuf::internal::NameOfEnum(
    Device_OperatingSystem_descriptor(), value);
}
inline bool Device_OperatingSystem_Parse(
    const ::std::string& name, Device_OperatingSystem* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Device_OperatingSystem>(
    Device_OperatingSystem_descriptor(), name, value);
}
enum MessageNode_Authorize {
  MessageNode_Authorize_creator = 0,
  MessageNode_Authorize_manager = 1,
  MessageNode_Authorize_member = 2,
  MessageNode_Authorize_peer = 3,
  MessageNode_Authorize_MessageNode_Authorize_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MessageNode_Authorize_MessageNode_Authorize_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MessageNode_Authorize_IsValid(int value);
const MessageNode_Authorize MessageNode_Authorize_Authorize_MIN = MessageNode_Authorize_creator;
const MessageNode_Authorize MessageNode_Authorize_Authorize_MAX = MessageNode_Authorize_peer;
const int MessageNode_Authorize_Authorize_ARRAYSIZE = MessageNode_Authorize_Authorize_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageNode_Authorize_descriptor();
inline const ::std::string& MessageNode_Authorize_Name(MessageNode_Authorize value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageNode_Authorize_descriptor(), value);
}
inline bool MessageNode_Authorize_Parse(
    const ::std::string& name, MessageNode_Authorize* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageNode_Authorize>(
    MessageNode_Authorize_descriptor(), name, value);
}
enum IsAgree {
  unknow = 0,
  agree = 1,
  refuse = 2,
  ignore = 3,
  IsAgree_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  IsAgree_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool IsAgree_IsValid(int value);
const IsAgree IsAgree_MIN = unknow;
const IsAgree IsAgree_MAX = ignore;
const int IsAgree_ARRAYSIZE = IsAgree_MAX + 1;

const ::google::protobuf::EnumDescriptor* IsAgree_descriptor();
inline const ::std::string& IsAgree_Name(IsAgree value) {
  return ::google::protobuf::internal::NameOfEnum(
    IsAgree_descriptor(), value);
}
inline bool IsAgree_Parse(
    const ::std::string& name, IsAgree* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IsAgree>(
    IsAgree_descriptor(), name, value);
}
enum MediaType {
  UNKNOW = 0,
  TEXT = 1,
  JPG = 2,
  MP3 = 3,
  MediaType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MediaType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MediaType_IsValid(int value);
const MediaType MediaType_MIN = UNKNOW;
const MediaType MediaType_MAX = MP3;
const int MediaType_ARRAYSIZE = MediaType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MediaType_descriptor();
inline const ::std::string& MediaType_Name(MediaType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MediaType_descriptor(), value);
}
inline bool MediaType_Parse(
    const ::std::string& name, MediaType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MediaType>(
    MediaType_descriptor(), name, value);
}
// ===================================================================

class ErrorNth : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.ErrorNth) */ {
 public:
  ErrorNth();
  virtual ~ErrorNth();

  ErrorNth(const ErrorNth& from);

  inline ErrorNth& operator=(const ErrorNth& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ErrorNth& default_instance();

  static const ErrorNth* internal_default_instance();

  void Swap(ErrorNth* other);

  // implements Message ----------------------------------------------

  inline ErrorNth* New() const { return New(NULL); }

  ErrorNth* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ErrorNth& from);
  void MergeFrom(const ErrorNth& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ErrorNth* other);
  void UnsafeMergeFrom(const ErrorNth& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 maxnth = 1;
  void clear_maxnth();
  static const int kMaxnthFieldNumber = 1;
  ::google::protobuf::int32 maxnth() const;
  void set_maxnth(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chat.ErrorNth)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 maxnth_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ErrorNth> ErrorNth_default_instance_;

// -------------------------------------------------------------------

class NodeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.NodeInfo) */ {
 public:
  NodeInfo();
  virtual ~NodeInfo();

  NodeInfo(const NodeInfo& from);

  inline NodeInfo& operator=(const NodeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeInfo& default_instance();

  static const NodeInfo* internal_default_instance();

  void Swap(NodeInfo* other);

  // implements Message ----------------------------------------------

  inline NodeInfo* New() const { return New(NULL); }

  NodeInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeInfo& from);
  void MergeFrom(const NodeInfo& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NodeInfo* other);
  void UnsafeMergeFrom(const NodeInfo& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 updatetime = 1;
  void clear_updatetime();
  static const int kUpdatetimeFieldNumber = 1;
  ::google::protobuf::int32 updatetime() const;
  void set_updatetime(::google::protobuf::int32 value);

  // optional int32 readedIncrementid = 2;
  void clear_readedincrementid();
  static const int kReadedIncrementidFieldNumber = 2;
  ::google::protobuf::int32 readedincrementid() const;
  void set_readedincrementid(::google::protobuf::int32 value);

  // optional int32 unreadIncrementid = 3;
  void clear_unreadincrementid();
  static const int kUnreadIncrementidFieldNumber = 3;
  ::google::protobuf::int32 unreadincrementid() const;
  void set_unreadincrementid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chat.NodeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 updatetime_;
  ::google::protobuf::int32 readedincrementid_;
  ::google::protobuf::int32 unreadincrementid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<NodeInfo> NodeInfo_default_instance_;

// -------------------------------------------------------------------

class TalkList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.TalkList) */ {
 public:
  TalkList();
  virtual ~TalkList();

  TalkList(const TalkList& from);

  inline TalkList& operator=(const TalkList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TalkList& default_instance();

  static const TalkList* internal_default_instance();

  void Swap(TalkList* other);

  // implements Message ----------------------------------------------

  inline TalkList* New() const { return New(NULL); }

  TalkList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TalkList& from);
  void MergeFrom(const TalkList& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TalkList* other);
  void UnsafeMergeFrom(const TalkList& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .chat.NodeInfo> nodemap = 1;
  int nodemap_size() const;
  void clear_nodemap();
  static const int kNodemapFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::chat::NodeInfo >&
      nodemap() const;
  ::google::protobuf::Map< ::std::string, ::chat::NodeInfo >*
      mutable_nodemap();

  // @@protoc_insertion_point(class_scope:chat.TalkList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::chat::NodeInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      TalkList_NodemapEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::chat::NodeInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > nodemap_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TalkList> TalkList_default_instance_;

// -------------------------------------------------------------------

class AddFriendInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.AddFriendInfo) */ {
 public:
  AddFriendInfo();
  virtual ~AddFriendInfo();

  AddFriendInfo(const AddFriendInfo& from);

  inline AddFriendInfo& operator=(const AddFriendInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddFriendInfo& default_instance();

  static const AddFriendInfo* internal_default_instance();

  void Swap(AddFriendInfo* other);

  // implements Message ----------------------------------------------

  inline AddFriendInfo* New() const { return New(NULL); }

  AddFriendInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddFriendInfo& from);
  void MergeFrom(const AddFriendInfo& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddFriendInfo* other);
  void UnsafeMergeFrom(const AddFriendInfo& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chat.QueryAddfriendInfoRes info = 1;
  int info_size() const;
  void clear_info();
  static const int kInfoFieldNumber = 1;
  const ::chat::QueryAddfriendInfoRes& info(int index) const;
  ::chat::QueryAddfriendInfoRes* mutable_info(int index);
  ::chat::QueryAddfriendInfoRes* add_info();
  ::google::protobuf::RepeatedPtrField< ::chat::QueryAddfriendInfoRes >*
      mutable_info();
  const ::google::protobuf::RepeatedPtrField< ::chat::QueryAddfriendInfoRes >&
      info() const;

  // @@protoc_insertion_point(class_scope:chat.AddFriendInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::chat::QueryAddfriendInfoRes > info_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AddFriendInfo> AddFriendInfo_default_instance_;

// -------------------------------------------------------------------

class Ping : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.Ping) */ {
 public:
  Ping();
  virtual ~Ping();

  Ping(const Ping& from);

  inline Ping& operator=(const Ping& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ping& default_instance();

  static const Ping* internal_default_instance();

  void Swap(Ping* other);

  // implements Message ----------------------------------------------

  inline Ping* New() const { return New(NULL); }

  Ping* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ping& from);
  void MergeFrom(const Ping& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ping* other);
  void UnsafeMergeFrom(const Ping& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 1;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:chat.Ping)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Ping> Ping_default_instance_;

// -------------------------------------------------------------------

class Pong : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.Pong) */ {
 public:
  Pong();
  virtual ~Pong();

  Pong(const Pong& from);

  inline Pong& operator=(const Pong& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pong& default_instance();

  static const Pong* internal_default_instance();

  void Swap(Pong* other);

  // implements Message ----------------------------------------------

  inline Pong* New() const { return New(NULL); }

  Pong* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pong& from);
  void MergeFrom(const Pong& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Pong* other);
  void UnsafeMergeFrom(const Pong& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 1;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:chat.Pong)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Pong> Pong_default_instance_;

// -------------------------------------------------------------------

class NodeSelfDevice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.NodeSelfDevice) */ {
 public:
  NodeSelfDevice();
  virtual ~NodeSelfDevice();

  NodeSelfDevice(const NodeSelfDevice& from);

  inline NodeSelfDevice& operator=(const NodeSelfDevice& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeSelfDevice& default_instance();

  static const NodeSelfDevice* internal_default_instance();

  void Swap(NodeSelfDevice* other);

  // implements Message ----------------------------------------------

  inline NodeSelfDevice* New() const { return New(NULL); }

  NodeSelfDevice* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeSelfDevice& from);
  void MergeFrom(const NodeSelfDevice& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NodeSelfDevice* other);
  void UnsafeMergeFrom(const NodeSelfDevice& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:chat.NodeSelfDevice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<NodeSelfDevice> NodeSelfDevice_default_instance_;

// -------------------------------------------------------------------

class NodePeerServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.NodePeerServer) */ {
 public:
  NodePeerServer();
  virtual ~NodePeerServer();

  NodePeerServer(const NodePeerServer& from);

  inline NodePeerServer& operator=(const NodePeerServer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodePeerServer& default_instance();

  static const NodePeerServer* internal_default_instance();

  void Swap(NodePeerServer* other);

  // implements Message ----------------------------------------------

  inline NodePeerServer* New() const { return New(NULL); }

  NodePeerServer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodePeerServer& from);
  void MergeFrom(const NodePeerServer& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NodePeerServer* other);
  void UnsafeMergeFrom(const NodePeerServer& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:chat.NodePeerServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<NodePeerServer> NodePeerServer_default_instance_;

// -------------------------------------------------------------------

class NodeSpecifiy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.NodeSpecifiy) */ {
 public:
  NodeSpecifiy();
  virtual ~NodeSpecifiy();

  NodeSpecifiy(const NodeSpecifiy& from);

  inline NodeSpecifiy& operator=(const NodeSpecifiy& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeSpecifiy& default_instance();

  static const NodeSpecifiy* internal_default_instance();

  void Swap(NodeSpecifiy* other);

  // implements Message ----------------------------------------------

  inline NodeSpecifiy* New() const { return New(NULL); }

  NodeSpecifiy* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeSpecifiy& from);
  void MergeFrom(const NodeSpecifiy& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NodeSpecifiy* other);
  void UnsafeMergeFrom(const NodeSpecifiy& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string toNodeID = 1;
  void clear_tonodeid();
  static const int kToNodeIDFieldNumber = 1;
  const ::std::string& tonodeid() const;
  void set_tonodeid(const ::std::string& value);
  void set_tonodeid(const char* value);
  void set_tonodeid(const char* value, size_t size);
  ::std::string* mutable_tonodeid();
  ::std::string* release_tonodeid();
  void set_allocated_tonodeid(::std::string* tonodeid);

  // @@protoc_insertion_point(class_scope:chat.NodeSpecifiy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tonodeid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<NodeSpecifiy> NodeSpecifiy_default_instance_;

// -------------------------------------------------------------------

class NodeUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.NodeUser) */ {
 public:
  NodeUser();
  virtual ~NodeUser();

  NodeUser(const NodeUser& from);

  inline NodeUser& operator=(const NodeUser& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeUser& default_instance();

  static const NodeUser* internal_default_instance();

  void Swap(NodeUser* other);

  // implements Message ----------------------------------------------

  inline NodeUser* New() const { return New(NULL); }

  NodeUser* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeUser& from);
  void MergeFrom(const NodeUser& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NodeUser* other);
  void UnsafeMergeFrom(const NodeUser& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string toUserID = 1;
  void clear_touserid();
  static const int kToUserIDFieldNumber = 1;
  const ::std::string& touserid() const;
  void set_touserid(const ::std::string& value);
  void set_touserid(const char* value);
  void set_touserid(const char* value, size_t size);
  ::std::string* mutable_touserid();
  ::std::string* release_touserid();
  void set_allocated_touserid(::std::string* touserid);

  // @@protoc_insertion_point(class_scope:chat.NodeUser)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr touserid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<NodeUser> NodeUser_default_instance_;

// -------------------------------------------------------------------

class Error : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.Error) */ {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  static const Error* internal_default_instance();

  void Swap(Error* other);

  // implements Message ----------------------------------------------

  inline Error* New() const { return New(NULL); }

  Error* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Error* other);
  void UnsafeMergeFrom(const Error& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 errnum = 1;
  void clear_errnum();
  static const int kErrnumFieldNumber = 1;
  ::google::protobuf::int32 errnum() const;
  void set_errnum(::google::protobuf::int32 value);

  // optional string errmsg = 2;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 2;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // @@protoc_insertion_point(class_scope:chat.Error)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::google::protobuf::int32 errnum_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Error> Error_default_instance_;

// -------------------------------------------------------------------

class Device : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.Device) */ {
 public:
  Device();
  virtual ~Device();

  Device(const Device& from);

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Device& default_instance();

  static const Device* internal_default_instance();

  void Swap(Device* other);

  // implements Message ----------------------------------------------

  inline Device* New() const { return New(NULL); }

  Device* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Device* other);
  void UnsafeMergeFrom(const Device& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Device_OperatingSystem OperatingSystem;
  static const OperatingSystem iOS =
    Device_OperatingSystem_iOS;
  static const OperatingSystem Android =
    Device_OperatingSystem_Android;
  static inline bool OperatingSystem_IsValid(int value) {
    return Device_OperatingSystem_IsValid(value);
  }
  static const OperatingSystem OperatingSystem_MIN =
    Device_OperatingSystem_OperatingSystem_MIN;
  static const OperatingSystem OperatingSystem_MAX =
    Device_OperatingSystem_OperatingSystem_MAX;
  static const int OperatingSystem_ARRAYSIZE =
    Device_OperatingSystem_OperatingSystem_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OperatingSystem_descriptor() {
    return Device_OperatingSystem_descriptor();
  }
  static inline const ::std::string& OperatingSystem_Name(OperatingSystem value) {
    return Device_OperatingSystem_Name(value);
  }
  static inline bool OperatingSystem_Parse(const ::std::string& name,
      OperatingSystem* value) {
    return Device_OperatingSystem_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .chat.Device.OperatingSystem OS = 1;
  void clear_os();
  static const int kOSFieldNumber = 1;
  ::chat::Device_OperatingSystem os() const;
  void set_os(::chat::Device_OperatingSystem value);

  // optional string deviceModel = 2;
  void clear_devicemodel();
  static const int kDeviceModelFieldNumber = 2;
  const ::std::string& devicemodel() const;
  void set_devicemodel(const ::std::string& value);
  void set_devicemodel(const char* value);
  void set_devicemodel(const char* value, size_t size);
  ::std::string* mutable_devicemodel();
  ::std::string* release_devicemodel();
  void set_allocated_devicemodel(::std::string* devicemodel);

  // optional string deviceNickname = 3;
  void clear_devicenickname();
  static const int kDeviceNicknameFieldNumber = 3;
  const ::std::string& devicenickname() const;
  void set_devicenickname(const ::std::string& value);
  void set_devicenickname(const char* value);
  void set_devicenickname(const char* value, size_t size);
  ::std::string* mutable_devicenickname();
  ::std::string* release_devicenickname();
  void set_allocated_devicenickname(::std::string* devicenickname);

  // optional string UUID = 4;
  void clear_uuid();
  static const int kUUIDFieldNumber = 4;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:chat.Device)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr devicemodel_;
  ::google::protobuf::internal::ArenaStringPtr devicenickname_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  int os_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Device> Device_default_instance_;

// -------------------------------------------------------------------

class MessageNode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.MessageNode) */ {
 public:
  MessageNode();
  virtual ~MessageNode();

  MessageNode(const MessageNode& from);

  inline MessageNode& operator=(const MessageNode& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageNode& default_instance();

  static const MessageNode* internal_default_instance();

  void Swap(MessageNode* other);

  // implements Message ----------------------------------------------

  inline MessageNode* New() const { return New(NULL); }

  MessageNode* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageNode& from);
  void MergeFrom(const MessageNode& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageNode* other);
  void UnsafeMergeFrom(const MessageNode& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MessageNode_Authorize Authorize;
  static const Authorize creator =
    MessageNode_Authorize_creator;
  static const Authorize manager =
    MessageNode_Authorize_manager;
  static const Authorize member =
    MessageNode_Authorize_member;
  static const Authorize peer =
    MessageNode_Authorize_peer;
  static inline bool Authorize_IsValid(int value) {
    return MessageNode_Authorize_IsValid(value);
  }
  static const Authorize Authorize_MIN =
    MessageNode_Authorize_Authorize_MIN;
  static const Authorize Authorize_MAX =
    MessageNode_Authorize_Authorize_MAX;
  static const int Authorize_ARRAYSIZE =
    MessageNode_Authorize_Authorize_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Authorize_descriptor() {
    return MessageNode_Authorize_descriptor();
  }
  static inline const ::std::string& Authorize_Name(Authorize value) {
    return MessageNode_Authorize_Name(value);
  }
  static inline bool Authorize_Parse(const ::std::string& name,
      Authorize* value) {
    return MessageNode_Authorize_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional .chat.MessageNode.Authorize authorize = 2;
  void clear_authorize();
  static const int kAuthorizeFieldNumber = 2;
  ::chat::MessageNode_Authorize authorize() const;
  void set_authorize(::chat::MessageNode_Authorize value);

  // optional string creatorID = 3;
  void clear_creatorid();
  static const int kCreatorIDFieldNumber = 3;
  const ::std::string& creatorid() const;
  void set_creatorid(const ::std::string& value);
  void set_creatorid(const char* value);
  void set_creatorid(const char* value, size_t size);
  ::std::string* mutable_creatorid();
  ::std::string* release_creatorid();
  void set_allocated_creatorid(::std::string* creatorid);

  // optional string nickname = 4;
  void clear_nickname();
  static const int kNicknameFieldNumber = 4;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional int32 version = 5;
  void clear_version();
  static const int kVersionFieldNumber = 5;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // repeated string managerIDs = 6;
  int managerids_size() const;
  void clear_managerids();
  static const int kManagerIDsFieldNumber = 6;
  const ::std::string& managerids(int index) const;
  ::std::string* mutable_managerids(int index);
  void set_managerids(int index, const ::std::string& value);
  void set_managerids(int index, const char* value);
  void set_managerids(int index, const char* value, size_t size);
  ::std::string* add_managerids();
  void add_managerids(const ::std::string& value);
  void add_managerids(const char* value);
  void add_managerids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& managerids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_managerids();

  // repeated string members = 7;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 7;
  const ::std::string& members(int index) const;
  ::std::string* mutable_members(int index);
  void set_members(int index, const ::std::string& value);
  void set_members(int index, const char* value);
  void set_members(int index, const char* value, size_t size);
  ::std::string* add_members();
  void add_members(const ::std::string& value);
  void add_members(const char* value);
  void add_members(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& members() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_members();

  // @@protoc_insertion_point(class_scope:chat.MessageNode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> managerids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> members_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr creatorid_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  int authorize_;
  ::google::protobuf::int32 version_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MessageNode> MessageNode_default_instance_;

// -------------------------------------------------------------------

class UserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();

  static const UserInfo* internal_default_instance();

  void Swap(UserInfo* other);

  // implements Message ----------------------------------------------

  inline UserInfo* New() const { return New(NULL); }

  UserInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserInfo* other);
  void UnsafeMergeFrom(const UserInfo& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string toNodeID = 1;
  void clear_tonodeid();
  static const int kToNodeIDFieldNumber = 1;
  const ::std::string& tonodeid() const;
  void set_tonodeid(const ::std::string& value);
  void set_tonodeid(const char* value);
  void set_tonodeid(const char* value, size_t size);
  ::std::string* mutable_tonodeid();
  ::std::string* release_tonodeid();
  void set_allocated_tonodeid(::std::string* tonodeid);

  // optional string userID = 2;
  void clear_userid();
  static const int kUserIDFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:chat.UserInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tonodeid_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<UserInfo> UserInfo_default_instance_;

// -------------------------------------------------------------------

class User : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  static const User* internal_default_instance();

  void Swap(User* other);

  // implements Message ----------------------------------------------

  inline User* New() const { return New(NULL); }

  User* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(User* other);
  void UnsafeMergeFrom(const User& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string realname = 2;
  void clear_realname();
  static const int kRealnameFieldNumber = 2;
  const ::std::string& realname() const;
  void set_realname(const ::std::string& value);
  void set_realname(const char* value);
  void set_realname(const char* value, size_t size);
  ::std::string* mutable_realname();
  ::std::string* release_realname();
  void set_allocated_realname(::std::string* realname);

  // optional string nickname = 3;
  void clear_nickname();
  static const int kNicknameFieldNumber = 3;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional string icon = 4;
  void clear_icon();
  static const int kIconFieldNumber = 4;
  const ::std::string& icon() const;
  void set_icon(const ::std::string& value);
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  ::std::string* mutable_icon();
  ::std::string* release_icon();
  void set_allocated_icon(::std::string* icon);

  // optional string description = 5;
  void clear_description();
  static const int kDescriptionFieldNumber = 5;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional bool isMale = 6;
  void clear_ismale();
  static const int kIsMaleFieldNumber = 6;
  bool ismale() const;
  void set_ismale(bool value);

  // optional string phoneNo = 7;
  void clear_phoneno();
  static const int kPhoneNoFieldNumber = 7;
  const ::std::string& phoneno() const;
  void set_phoneno(const ::std::string& value);
  void set_phoneno(const char* value);
  void set_phoneno(const char* value, size_t size);
  ::std::string* mutable_phoneno();
  ::std::string* release_phoneno();
  void set_allocated_phoneno(::std::string* phoneno);

  // optional string countryCode = 8;
  void clear_countrycode();
  static const int kCountryCodeFieldNumber = 8;
  const ::std::string& countrycode() const;
  void set_countrycode(const ::std::string& value);
  void set_countrycode(const char* value);
  void set_countrycode(const char* value, size_t size);
  ::std::string* mutable_countrycode();
  ::std::string* release_countrycode();
  void set_allocated_countrycode(::std::string* countrycode);

  // optional string password = 9;
  void clear_password();
  static const int kPasswordFieldNumber = 9;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional int32 birthday = 10;
  void clear_birthday();
  static const int kBirthdayFieldNumber = 10;
  ::google::protobuf::int32 birthday() const;
  void set_birthday(::google::protobuf::int32 value);

  // optional int32 version = 11;
  void clear_version();
  static const int kVersionFieldNumber = 11;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // repeated .chat.UserInfo friends = 12;
  int friends_size() const;
  void clear_friends();
  static const int kFriendsFieldNumber = 12;
  const ::chat::UserInfo& friends(int index) const;
  ::chat::UserInfo* mutable_friends(int index);
  ::chat::UserInfo* add_friends();
  ::google::protobuf::RepeatedPtrField< ::chat::UserInfo >*
      mutable_friends();
  const ::google::protobuf::RepeatedPtrField< ::chat::UserInfo >&
      friends() const;

  // repeated string blacklist = 13;
  int blacklist_size() const;
  void clear_blacklist();
  static const int kBlacklistFieldNumber = 13;
  const ::std::string& blacklist(int index) const;
  ::std::string* mutable_blacklist(int index);
  void set_blacklist(int index, const ::std::string& value);
  void set_blacklist(int index, const char* value);
  void set_blacklist(int index, const char* value, size_t size);
  ::std::string* add_blacklist();
  void add_blacklist(const ::std::string& value);
  void add_blacklist(const char* value);
  void add_blacklist(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& blacklist() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_blacklist();

  // repeated string groupNodeIDs = 14;
  int groupnodeids_size() const;
  void clear_groupnodeids();
  static const int kGroupNodeIDsFieldNumber = 14;
  const ::std::string& groupnodeids(int index) const;
  ::std::string* mutable_groupnodeids(int index);
  void set_groupnodeids(int index, const ::std::string& value);
  void set_groupnodeids(int index, const char* value);
  void set_groupnodeids(int index, const char* value, size_t size);
  ::std::string* add_groupnodeids();
  void add_groupnodeids(const ::std::string& value);
  void add_groupnodeids(const char* value);
  void add_groupnodeids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& groupnodeids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_groupnodeids();

  // repeated .chat.Device devices = 15;
  int devices_size() const;
  void clear_devices();
  static const int kDevicesFieldNumber = 15;
  const ::chat::Device& devices(int index) const;
  ::chat::Device* mutable_devices(int index);
  ::chat::Device* add_devices();
  ::google::protobuf::RepeatedPtrField< ::chat::Device >*
      mutable_devices();
  const ::google::protobuf::RepeatedPtrField< ::chat::Device >&
      devices() const;

  // @@protoc_insertion_point(class_scope:chat.User)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::chat::UserInfo > friends_;
  ::google::protobuf::RepeatedPtrField< ::std::string> blacklist_;
  ::google::protobuf::RepeatedPtrField< ::std::string> groupnodeids_;
  ::google::protobuf::RepeatedPtrField< ::chat::Device > devices_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr realname_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr icon_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr phoneno_;
  ::google::protobuf::internal::ArenaStringPtr countrycode_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  bool ismale_;
  ::google::protobuf::int32 birthday_;
  ::google::protobuf::int32 version_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<User> User_default_instance_;

// -------------------------------------------------------------------

class QueryUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.QueryUser) */ {
 public:
  QueryUser();
  virtual ~QueryUser();

  QueryUser(const QueryUser& from);

  inline QueryUser& operator=(const QueryUser& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryUser& default_instance();

  static const QueryUser* internal_default_instance();

  void Swap(QueryUser* other);

  // implements Message ----------------------------------------------

  inline QueryUser* New() const { return New(NULL); }

  QueryUser* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryUser& from);
  void MergeFrom(const QueryUser& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryUser* other);
  void UnsafeMergeFrom(const QueryUser& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string userID = 1;
  void clear_userid();
  static const int kUserIDFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional string countryCode = 2;
  void clear_countrycode();
  static const int kCountryCodeFieldNumber = 2;
  const ::std::string& countrycode() const;
  void set_countrycode(const ::std::string& value);
  void set_countrycode(const char* value);
  void set_countrycode(const char* value, size_t size);
  ::std::string* mutable_countrycode();
  ::std::string* release_countrycode();
  void set_allocated_countrycode(::std::string* countrycode);

  // optional string phoneNo = 3;
  void clear_phoneno();
  static const int kPhoneNoFieldNumber = 3;
  const ::std::string& phoneno() const;
  void set_phoneno(const ::std::string& value);
  void set_phoneno(const char* value);
  void set_phoneno(const char* value, size_t size);
  ::std::string* mutable_phoneno();
  ::std::string* release_phoneno();
  void set_allocated_phoneno(::std::string* phoneno);

  // @@protoc_insertion_point(class_scope:chat.QueryUser)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr countrycode_;
  ::google::protobuf::internal::ArenaStringPtr phoneno_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<QueryUser> QueryUser_default_instance_;

// -------------------------------------------------------------------

class QueryUserRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.QueryUserRes) */ {
 public:
  QueryUserRes();
  virtual ~QueryUserRes();

  QueryUserRes(const QueryUserRes& from);

  inline QueryUserRes& operator=(const QueryUserRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryUserRes& default_instance();

  static const QueryUserRes* internal_default_instance();

  void Swap(QueryUserRes* other);

  // implements Message ----------------------------------------------

  inline QueryUserRes* New() const { return New(NULL); }

  QueryUserRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryUserRes& from);
  void MergeFrom(const QueryUserRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryUserRes* other);
  void UnsafeMergeFrom(const QueryUserRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string toUserID_outer = 1;
  void clear_touserid_outer();
  static const int kToUserIDOuterFieldNumber = 1;
  const ::std::string& touserid_outer() const;
  void set_touserid_outer(const ::std::string& value);
  void set_touserid_outer(const char* value);
  void set_touserid_outer(const char* value, size_t size);
  ::std::string* mutable_touserid_outer();
  ::std::string* release_touserid_outer();
  void set_allocated_touserid_outer(::std::string* touserid_outer);

  // optional .chat.User user = 2;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 2;
  const ::chat::User& user() const;
  ::chat::User* mutable_user();
  ::chat::User* release_user();
  void set_allocated_user(::chat::User* user);

  // @@protoc_insertion_point(class_scope:chat.QueryUserRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr touserid_outer_;
  ::chat::User* user_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<QueryUserRes> QueryUserRes_default_instance_;

// -------------------------------------------------------------------

class QueryUserVersion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.QueryUserVersion) */ {
 public:
  QueryUserVersion();
  virtual ~QueryUserVersion();

  QueryUserVersion(const QueryUserVersion& from);

  inline QueryUserVersion& operator=(const QueryUserVersion& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryUserVersion& default_instance();

  static const QueryUserVersion* internal_default_instance();

  void Swap(QueryUserVersion* other);

  // implements Message ----------------------------------------------

  inline QueryUserVersion* New() const { return New(NULL); }

  QueryUserVersion* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryUserVersion& from);
  void MergeFrom(const QueryUserVersion& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryUserVersion* other);
  void UnsafeMergeFrom(const QueryUserVersion& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string userID = 1;
  void clear_userid();
  static const int kUserIDFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:chat.QueryUserVersion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<QueryUserVersion> QueryUserVersion_default_instance_;

// -------------------------------------------------------------------

class QueryUserVersionRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.QueryUserVersionRes) */ {
 public:
  QueryUserVersionRes();
  virtual ~QueryUserVersionRes();

  QueryUserVersionRes(const QueryUserVersionRes& from);

  inline QueryUserVersionRes& operator=(const QueryUserVersionRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryUserVersionRes& default_instance();

  static const QueryUserVersionRes* internal_default_instance();

  void Swap(QueryUserVersionRes* other);

  // implements Message ----------------------------------------------

  inline QueryUserVersionRes* New() const { return New(NULL); }

  QueryUserVersionRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryUserVersionRes& from);
  void MergeFrom(const QueryUserVersionRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryUserVersionRes* other);
  void UnsafeMergeFrom(const QueryUserVersionRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string userID = 1;
  void clear_userid();
  static const int kUserIDFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional int32 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chat.QueryUserVersionRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int32 version_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<QueryUserVersionRes> QueryUserVersionRes_default_instance_;

// -------------------------------------------------------------------

class QueryNode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.QueryNode) */ {
 public:
  QueryNode();
  virtual ~QueryNode();

  QueryNode(const QueryNode& from);

  inline QueryNode& operator=(const QueryNode& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryNode& default_instance();

  static const QueryNode* internal_default_instance();

  void Swap(QueryNode* other);

  // implements Message ----------------------------------------------

  inline QueryNode* New() const { return New(NULL); }

  QueryNode* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryNode& from);
  void MergeFrom(const QueryNode& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryNode* other);
  void UnsafeMergeFrom(const QueryNode& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string toNodeID = 1;
  void clear_tonodeid();
  static const int kToNodeIDFieldNumber = 1;
  const ::std::string& tonodeid() const;
  void set_tonodeid(const ::std::string& value);
  void set_tonodeid(const char* value);
  void set_tonodeid(const char* value, size_t size);
  ::std::string* mutable_tonodeid();
  ::std::string* release_tonodeid();
  void set_allocated_tonodeid(::std::string* tonodeid);

  // @@protoc_insertion_point(class_scope:chat.QueryNode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tonodeid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<QueryNode> QueryNode_default_instance_;

// -------------------------------------------------------------------

class QueryNodeRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.QueryNodeRes) */ {
 public:
  QueryNodeRes();
  virtual ~QueryNodeRes();

  QueryNodeRes(const QueryNodeRes& from);

  inline QueryNodeRes& operator=(const QueryNodeRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryNodeRes& default_instance();

  static const QueryNodeRes* internal_default_instance();

  void Swap(QueryNodeRes* other);

  // implements Message ----------------------------------------------

  inline QueryNodeRes* New() const { return New(NULL); }

  QueryNodeRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryNodeRes& from);
  void MergeFrom(const QueryNodeRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryNodeRes* other);
  void UnsafeMergeFrom(const QueryNodeRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string toUserID_outer = 1;
  void clear_touserid_outer();
  static const int kToUserIDOuterFieldNumber = 1;
  const ::std::string& touserid_outer() const;
  void set_touserid_outer(const ::std::string& value);
  void set_touserid_outer(const char* value);
  void set_touserid_outer(const char* value, size_t size);
  ::std::string* mutable_touserid_outer();
  ::std::string* release_touserid_outer();
  void set_allocated_touserid_outer(::std::string* touserid_outer);

  // optional .chat.MessageNode node = 2;
  bool has_node() const;
  void clear_node();
  static const int kNodeFieldNumber = 2;
  const ::chat::MessageNode& node() const;
  ::chat::MessageNode* mutable_node();
  ::chat::MessageNode* release_node();
  void set_allocated_node(::chat::MessageNode* node);

  // @@protoc_insertion_point(class_scope:chat.QueryNodeRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr touserid_outer_;
  ::chat::MessageNode* node_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<QueryNodeRes> QueryNodeRes_default_instance_;

// -------------------------------------------------------------------

class QueryNodeVersion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.QueryNodeVersion) */ {
 public:
  QueryNodeVersion();
  virtual ~QueryNodeVersion();

  QueryNodeVersion(const QueryNodeVersion& from);

  inline QueryNodeVersion& operator=(const QueryNodeVersion& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryNodeVersion& default_instance();

  static const QueryNodeVersion* internal_default_instance();

  void Swap(QueryNodeVersion* other);

  // implements Message ----------------------------------------------

  inline QueryNodeVersion* New() const { return New(NULL); }

  QueryNodeVersion* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryNodeVersion& from);
  void MergeFrom(const QueryNodeVersion& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryNodeVersion* other);
  void UnsafeMergeFrom(const QueryNodeVersion& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string toNodeID = 1;
  void clear_tonodeid();
  static const int kToNodeIDFieldNumber = 1;
  const ::std::string& tonodeid() const;
  void set_tonodeid(const ::std::string& value);
  void set_tonodeid(const char* value);
  void set_tonodeid(const char* value, size_t size);
  ::std::string* mutable_tonodeid();
  ::std::string* release_tonodeid();
  void set_allocated_tonodeid(::std::string* tonodeid);

  // @@protoc_insertion_point(class_scope:chat.QueryNodeVersion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tonodeid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<QueryNodeVersion> QueryNodeVersion_default_instance_;

// -------------------------------------------------------------------

class QueryNodeVersionRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.QueryNodeVersionRes) */ {
 public:
  QueryNodeVersionRes();
  virtual ~QueryNodeVersionRes();

  QueryNodeVersionRes(const QueryNodeVersionRes& from);

  inline QueryNodeVersionRes& operator=(const QueryNodeVersionRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryNodeVersionRes& default_instance();

  static const QueryNodeVersionRes* internal_default_instance();

  void Swap(QueryNodeVersionRes* other);

  // implements Message ----------------------------------------------

  inline QueryNodeVersionRes* New() const { return New(NULL); }

  QueryNodeVersionRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryNodeVersionRes& from);
  void MergeFrom(const QueryNodeVersionRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryNodeVersionRes* other);
  void UnsafeMergeFrom(const QueryNodeVersionRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string toNodeID = 1;
  void clear_tonodeid();
  static const int kToNodeIDFieldNumber = 1;
  const ::std::string& tonodeid() const;
  void set_tonodeid(const ::std::string& value);
  void set_tonodeid(const char* value);
  void set_tonodeid(const char* value, size_t size);
  ::std::string* mutable_tonodeid();
  ::std::string* release_tonodeid();
  void set_allocated_tonodeid(::std::string* tonodeid);

  // optional int32 version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chat.QueryNodeVersionRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tonodeid_;
  ::google::protobuf::int32 version_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<QueryNodeVersionRes> QueryNodeVersionRes_default_instance_;

// -------------------------------------------------------------------

class Register : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.Register) */ {
 public:
  Register();
  virtual ~Register();

  Register(const Register& from);

  inline Register& operator=(const Register& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Register& default_instance();

  static const Register* internal_default_instance();

  void Swap(Register* other);

  // implements Message ----------------------------------------------

  inline Register* New() const { return New(NULL); }

  Register* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Register& from);
  void MergeFrom(const Register& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Register* other);
  void UnsafeMergeFrom(const Register& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string phoneNo = 1;
  void clear_phoneno();
  static const int kPhoneNoFieldNumber = 1;
  const ::std::string& phoneno() const;
  void set_phoneno(const ::std::string& value);
  void set_phoneno(const char* value);
  void set_phoneno(const char* value, size_t size);
  ::std::string* mutable_phoneno();
  ::std::string* release_phoneno();
  void set_allocated_phoneno(::std::string* phoneno);

  // optional string countryCode = 2;
  void clear_countrycode();
  static const int kCountryCodeFieldNumber = 2;
  const ::std::string& countrycode() const;
  void set_countrycode(const ::std::string& value);
  void set_countrycode(const char* value);
  void set_countrycode(const char* value, size_t size);
  ::std::string* mutable_countrycode();
  ::std::string* release_countrycode();
  void set_allocated_countrycode(::std::string* countrycode);

  // optional string password = 3;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional string nickname = 4;
  void clear_nickname();
  static const int kNicknameFieldNumber = 4;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional string verifycode = 5;
  void clear_verifycode();
  static const int kVerifycodeFieldNumber = 5;
  const ::std::string& verifycode() const;
  void set_verifycode(const ::std::string& value);
  void set_verifycode(const char* value);
  void set_verifycode(const char* value, size_t size);
  ::std::string* mutable_verifycode();
  ::std::string* release_verifycode();
  void set_allocated_verifycode(::std::string* verifycode);

  // @@protoc_insertion_point(class_scope:chat.Register)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr phoneno_;
  ::google::protobuf::internal::ArenaStringPtr countrycode_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr verifycode_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Register> Register_default_instance_;

// -------------------------------------------------------------------

class RegisterRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.RegisterRes) */ {
 public:
  RegisterRes();
  virtual ~RegisterRes();

  RegisterRes(const RegisterRes& from);

  inline RegisterRes& operator=(const RegisterRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterRes& default_instance();

  static const RegisterRes* internal_default_instance();

  void Swap(RegisterRes* other);

  // implements Message ----------------------------------------------

  inline RegisterRes* New() const { return New(NULL); }

  RegisterRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegisterRes& from);
  void MergeFrom(const RegisterRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RegisterRes* other);
  void UnsafeMergeFrom(const RegisterRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string userID = 1;
  void clear_userid();
  static const int kUserIDFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional bool isSuccess = 2;
  void clear_issuccess();
  static const int kIsSuccessFieldNumber = 2;
  bool issuccess() const;
  void set_issuccess(bool value);

  // optional string e_msg = 3;
  void clear_e_msg();
  static const int kEMsgFieldNumber = 3;
  const ::std::string& e_msg() const;
  void set_e_msg(const ::std::string& value);
  void set_e_msg(const char* value);
  void set_e_msg(const char* value, size_t size);
  ::std::string* mutable_e_msg();
  ::std::string* release_e_msg();
  void set_allocated_e_msg(::std::string* e_msg);

  // optional int32 e_no = 4;
  void clear_e_no();
  static const int kENoFieldNumber = 4;
  ::google::protobuf::int32 e_no() const;
  void set_e_no(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chat.RegisterRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr e_msg_;
  bool issuccess_;
  ::google::protobuf::int32 e_no_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RegisterRes> RegisterRes_default_instance_;

// -------------------------------------------------------------------

class Login : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.Login) */ {
 public:
  Login();
  virtual ~Login();

  Login(const Login& from);

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Login& default_instance();

  static const Login* internal_default_instance();

  void Swap(Login* other);

  // implements Message ----------------------------------------------

  inline Login* New() const { return New(NULL); }

  Login* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Login* other);
  void UnsafeMergeFrom(const Login& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string phoneNo = 1;
  void clear_phoneno();
  static const int kPhoneNoFieldNumber = 1;
  const ::std::string& phoneno() const;
  void set_phoneno(const ::std::string& value);
  void set_phoneno(const char* value);
  void set_phoneno(const char* value, size_t size);
  ::std::string* mutable_phoneno();
  ::std::string* release_phoneno();
  void set_allocated_phoneno(::std::string* phoneno);

  // optional string countryCode = 2;
  void clear_countrycode();
  static const int kCountryCodeFieldNumber = 2;
  const ::std::string& countrycode() const;
  void set_countrycode(const ::std::string& value);
  void set_countrycode(const char* value);
  void set_countrycode(const char* value, size_t size);
  ::std::string* mutable_countrycode();
  ::std::string* release_countrycode();
  void set_allocated_countrycode(::std::string* countrycode);

  // optional string password = 3;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // optional .chat.Device device = 4;
  bool has_device() const;
  void clear_device();
  static const int kDeviceFieldNumber = 4;
  const ::chat::Device& device() const;
  ::chat::Device* mutable_device();
  ::chat::Device* release_device();
  void set_allocated_device(::chat::Device* device);

  // repeated string ips = 5;
  int ips_size() const;
  void clear_ips();
  static const int kIpsFieldNumber = 5;
  const ::std::string& ips(int index) const;
  ::std::string* mutable_ips(int index);
  void set_ips(int index, const ::std::string& value);
  void set_ips(int index, const char* value);
  void set_ips(int index, const char* value, size_t size);
  ::std::string* add_ips();
  void add_ips(const ::std::string& value);
  void add_ips(const char* value);
  void add_ips(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ips() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ips();

  // @@protoc_insertion_point(class_scope:chat.Login)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ips_;
  ::google::protobuf::internal::ArenaStringPtr phoneno_;
  ::google::protobuf::internal::ArenaStringPtr countrycode_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::chat::Device* device_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Login> Login_default_instance_;

// -------------------------------------------------------------------

class LoginRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.LoginRes) */ {
 public:
  LoginRes();
  virtual ~LoginRes();

  LoginRes(const LoginRes& from);

  inline LoginRes& operator=(const LoginRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRes& default_instance();

  static const LoginRes* internal_default_instance();

  void Swap(LoginRes* other);

  // implements Message ----------------------------------------------

  inline LoginRes* New() const { return New(NULL); }

  LoginRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRes& from);
  void MergeFrom(const LoginRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginRes* other);
  void UnsafeMergeFrom(const LoginRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool isSuccess = 1;
  void clear_issuccess();
  static const int kIsSuccessFieldNumber = 1;
  bool issuccess() const;
  void set_issuccess(bool value);

  // optional string userID = 2;
  void clear_userid();
  static const int kUserIDFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional int32 e_no = 3;
  void clear_e_no();
  static const int kENoFieldNumber = 3;
  ::google::protobuf::int32 e_no() const;
  void set_e_no(::google::protobuf::int32 value);

  // optional string e_msg = 4;
  void clear_e_msg();
  static const int kEMsgFieldNumber = 4;
  const ::std::string& e_msg() const;
  void set_e_msg(const ::std::string& value);
  void set_e_msg(const char* value);
  void set_e_msg(const char* value, size_t size);
  ::std::string* mutable_e_msg();
  ::std::string* release_e_msg();
  void set_allocated_e_msg(::std::string* e_msg);

  // @@protoc_insertion_point(class_scope:chat.LoginRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr e_msg_;
  bool issuccess_;
  ::google::protobuf::int32 e_no_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LoginRes> LoginRes_default_instance_;

// -------------------------------------------------------------------

class LoginNoti : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.LoginNoti) */ {
 public:
  LoginNoti();
  virtual ~LoginNoti();

  LoginNoti(const LoginNoti& from);

  inline LoginNoti& operator=(const LoginNoti& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginNoti& default_instance();

  static const LoginNoti* internal_default_instance();

  void Swap(LoginNoti* other);

  // implements Message ----------------------------------------------

  inline LoginNoti* New() const { return New(NULL); }

  LoginNoti* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginNoti& from);
  void MergeFrom(const LoginNoti& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginNoti* other);
  void UnsafeMergeFrom(const LoginNoti& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string toUserID_outer = 1;
  void clear_touserid_outer();
  static const int kToUserIDOuterFieldNumber = 1;
  const ::std::string& touserid_outer() const;
  void set_touserid_outer(const ::std::string& value);
  void set_touserid_outer(const char* value);
  void set_touserid_outer(const char* value, size_t size);
  ::std::string* mutable_touserid_outer();
  ::std::string* release_touserid_outer();
  void set_allocated_touserid_outer(::std::string* touserid_outer);

  // optional string UUID = 2;
  void clear_uuid();
  static const int kUUIDFieldNumber = 2;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:chat.LoginNoti)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr touserid_outer_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LoginNoti> LoginNoti_default_instance_;

// -------------------------------------------------------------------

class ClientConnect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.ClientConnect) */ {
 public:
  ClientConnect();
  virtual ~ClientConnect();

  ClientConnect(const ClientConnect& from);

  inline ClientConnect& operator=(const ClientConnect& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientConnect& default_instance();

  static const ClientConnect* internal_default_instance();

  void Swap(ClientConnect* other);

  // implements Message ----------------------------------------------

  inline ClientConnect* New() const { return New(NULL); }

  ClientConnect* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientConnect& from);
  void MergeFrom(const ClientConnect& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientConnect* other);
  void UnsafeMergeFrom(const ClientConnect& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string userID = 1;
  void clear_userid();
  static const int kUserIDFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional string UUID = 2;
  void clear_uuid();
  static const int kUUIDFieldNumber = 2;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // optional bool isReciveNoti = 3;
  void clear_isrecivenoti();
  static const int kIsReciveNotiFieldNumber = 3;
  bool isrecivenoti() const;
  void set_isrecivenoti(bool value);

  // optional string clientVersion = 4;
  void clear_clientversion();
  static const int kClientVersionFieldNumber = 4;
  const ::std::string& clientversion() const;
  void set_clientversion(const ::std::string& value);
  void set_clientversion(const char* value);
  void set_clientversion(const char* value, size_t size);
  ::std::string* mutable_clientversion();
  ::std::string* release_clientversion();
  void set_allocated_clientversion(::std::string* clientversion);

  // optional string OSVersion = 5;
  void clear_osversion();
  static const int kOSVersionFieldNumber = 5;
  const ::std::string& osversion() const;
  void set_osversion(const ::std::string& value);
  void set_osversion(const char* value);
  void set_osversion(const char* value, size_t size);
  ::std::string* mutable_osversion();
  ::std::string* release_osversion();
  void set_allocated_osversion(::std::string* osversion);

  // optional string appVersion = 6;
  void clear_appversion();
  static const int kAppVersionFieldNumber = 6;
  const ::std::string& appversion() const;
  void set_appversion(const ::std::string& value);
  void set_appversion(const char* value);
  void set_appversion(const char* value, size_t size);
  ::std::string* mutable_appversion();
  ::std::string* release_appversion();
  void set_allocated_appversion(::std::string* appversion);

  // repeated string ips = 7;
  int ips_size() const;
  void clear_ips();
  static const int kIpsFieldNumber = 7;
  const ::std::string& ips(int index) const;
  ::std::string* mutable_ips(int index);
  void set_ips(int index, const ::std::string& value);
  void set_ips(int index, const char* value);
  void set_ips(int index, const char* value, size_t size);
  ::std::string* add_ips();
  void add_ips(const ::std::string& value);
  void add_ips(const char* value);
  void add_ips(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ips() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ips();

  // @@protoc_insertion_point(class_scope:chat.ClientConnect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ips_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr clientversion_;
  ::google::protobuf::internal::ArenaStringPtr osversion_;
  ::google::protobuf::internal::ArenaStringPtr appversion_;
  bool isrecivenoti_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ClientConnect> ClientConnect_default_instance_;

// -------------------------------------------------------------------

class ClientConnectRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.ClientConnectRes) */ {
 public:
  ClientConnectRes();
  virtual ~ClientConnectRes();

  ClientConnectRes(const ClientConnectRes& from);

  inline ClientConnectRes& operator=(const ClientConnectRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientConnectRes& default_instance();

  static const ClientConnectRes* internal_default_instance();

  void Swap(ClientConnectRes* other);

  // implements Message ----------------------------------------------

  inline ClientConnectRes* New() const { return New(NULL); }

  ClientConnectRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientConnectRes& from);
  void MergeFrom(const ClientConnectRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientConnectRes* other);
  void UnsafeMergeFrom(const ClientConnectRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UUID = 1;
  void clear_uuid();
  static const int kUUIDFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // optional string userID = 2;
  void clear_userid();
  static const int kUserIDFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional int32 sessionid = 3;
  void clear_sessionid();
  static const int kSessionidFieldNumber = 3;
  ::google::protobuf::int32 sessionid() const;
  void set_sessionid(::google::protobuf::int32 value);

  // optional bool isSuccess = 4;
  void clear_issuccess();
  static const int kIsSuccessFieldNumber = 4;
  bool issuccess() const;
  void set_issuccess(bool value);

  // optional string e_msg = 5;
  void clear_e_msg();
  static const int kEMsgFieldNumber = 5;
  const ::std::string& e_msg() const;
  void set_e_msg(const ::std::string& value);
  void set_e_msg(const char* value);
  void set_e_msg(const char* value, size_t size);
  ::std::string* mutable_e_msg();
  ::std::string* release_e_msg();
  void set_allocated_e_msg(::std::string* e_msg);

  // optional int32 e_no = 6;
  void clear_e_no();
  static const int kENoFieldNumber = 6;
  ::google::protobuf::int32 e_no() const;
  void set_e_no(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chat.ClientConnectRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr e_msg_;
  ::google::protobuf::int32 sessionid_;
  bool issuccess_;
  ::google::protobuf::int32 e_no_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ClientConnectRes> ClientConnectRes_default_instance_;

// -------------------------------------------------------------------

class ClientDisConnect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.ClientDisConnect) */ {
 public:
  ClientDisConnect();
  virtual ~ClientDisConnect();

  ClientDisConnect(const ClientDisConnect& from);

  inline ClientDisConnect& operator=(const ClientDisConnect& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientDisConnect& default_instance();

  static const ClientDisConnect* internal_default_instance();

  void Swap(ClientDisConnect* other);

  // implements Message ----------------------------------------------

  inline ClientDisConnect* New() const { return New(NULL); }

  ClientDisConnect* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientDisConnect& from);
  void MergeFrom(const ClientDisConnect& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientDisConnect* other);
  void UnsafeMergeFrom(const ClientDisConnect& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string userID = 1;
  void clear_userid();
  static const int kUserIDFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional string UUID = 2;
  void clear_uuid();
  static const int kUUIDFieldNumber = 2;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:chat.ClientDisConnect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ClientDisConnect> ClientDisConnect_default_instance_;

// -------------------------------------------------------------------

class ClientDisConnectRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.ClientDisConnectRes) */ {
 public:
  ClientDisConnectRes();
  virtual ~ClientDisConnectRes();

  ClientDisConnectRes(const ClientDisConnectRes& from);

  inline ClientDisConnectRes& operator=(const ClientDisConnectRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientDisConnectRes& default_instance();

  static const ClientDisConnectRes* internal_default_instance();

  void Swap(ClientDisConnectRes* other);

  // implements Message ----------------------------------------------

  inline ClientDisConnectRes* New() const { return New(NULL); }

  ClientDisConnectRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientDisConnectRes& from);
  void MergeFrom(const ClientDisConnectRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientDisConnectRes* other);
  void UnsafeMergeFrom(const ClientDisConnectRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UUID = 1;
  void clear_uuid();
  static const int kUUIDFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // optional string userID = 2;
  void clear_userid();
  static const int kUserIDFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:chat.ClientDisConnectRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ClientDisConnectRes> ClientDisConnectRes_default_instance_;

// -------------------------------------------------------------------

class Logout : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.Logout) */ {
 public:
  Logout();
  virtual ~Logout();

  Logout(const Logout& from);

  inline Logout& operator=(const Logout& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Logout& default_instance();

  static const Logout* internal_default_instance();

  void Swap(Logout* other);

  // implements Message ----------------------------------------------

  inline Logout* New() const { return New(NULL); }

  Logout* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Logout& from);
  void MergeFrom(const Logout& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Logout* other);
  void UnsafeMergeFrom(const Logout& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string userID = 1;
  void clear_userid();
  static const int kUserIDFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional string UUID = 2;
  void clear_uuid();
  static const int kUUIDFieldNumber = 2;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:chat.Logout)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Logout> Logout_default_instance_;

// -------------------------------------------------------------------

class LogoutRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.LogoutRes) */ {
 public:
  LogoutRes();
  virtual ~LogoutRes();

  LogoutRes(const LogoutRes& from);

  inline LogoutRes& operator=(const LogoutRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutRes& default_instance();

  static const LogoutRes* internal_default_instance();

  void Swap(LogoutRes* other);

  // implements Message ----------------------------------------------

  inline LogoutRes* New() const { return New(NULL); }

  LogoutRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogoutRes& from);
  void MergeFrom(const LogoutRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogoutRes* other);
  void UnsafeMergeFrom(const LogoutRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UUID = 1;
  void clear_uuid();
  static const int kUUIDFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // optional string userID = 2;
  void clear_userid();
  static const int kUserIDFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:chat.LogoutRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<LogoutRes> LogoutRes_default_instance_;

// -------------------------------------------------------------------

class AddFriend : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.AddFriend) */ {
 public:
  AddFriend();
  virtual ~AddFriend();

  AddFriend(const AddFriend& from);

  inline AddFriend& operator=(const AddFriend& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddFriend& default_instance();

  static const AddFriend* internal_default_instance();

  void Swap(AddFriend* other);

  // implements Message ----------------------------------------------

  inline AddFriend* New() const { return New(NULL); }

  AddFriend* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddFriend& from);
  void MergeFrom(const AddFriend& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddFriend* other);
  void UnsafeMergeFrom(const AddFriend& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string inviteeID = 1;
  void clear_inviteeid();
  static const int kInviteeIDFieldNumber = 1;
  const ::std::string& inviteeid() const;
  void set_inviteeid(const ::std::string& value);
  void set_inviteeid(const char* value);
  void set_inviteeid(const char* value, size_t size);
  ::std::string* mutable_inviteeid();
  ::std::string* release_inviteeid();
  void set_allocated_inviteeid(::std::string* inviteeid);

  // optional string inviterID = 2;
  void clear_inviterid();
  static const int kInviterIDFieldNumber = 2;
  const ::std::string& inviterid() const;
  void set_inviterid(const ::std::string& value);
  void set_inviterid(const char* value);
  void set_inviterid(const char* value, size_t size);
  ::std::string* mutable_inviterid();
  ::std::string* release_inviterid();
  void set_allocated_inviterid(::std::string* inviterid);

  // optional string msg = 3;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:chat.AddFriend)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr inviteeid_;
  ::google::protobuf::internal::ArenaStringPtr inviterid_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AddFriend> AddFriend_default_instance_;

// -------------------------------------------------------------------

class AddFriendRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.AddFriendRes) */ {
 public:
  AddFriendRes();
  virtual ~AddFriendRes();

  AddFriendRes(const AddFriendRes& from);

  inline AddFriendRes& operator=(const AddFriendRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddFriendRes& default_instance();

  static const AddFriendRes* internal_default_instance();

  void Swap(AddFriendRes* other);

  // implements Message ----------------------------------------------

  inline AddFriendRes* New() const { return New(NULL); }

  AddFriendRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddFriendRes& from);
  void MergeFrom(const AddFriendRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddFriendRes* other);
  void UnsafeMergeFrom(const AddFriendRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string inviterID = 1;
  void clear_inviterid();
  static const int kInviterIDFieldNumber = 1;
  const ::std::string& inviterid() const;
  void set_inviterid(const ::std::string& value);
  void set_inviterid(const char* value);
  void set_inviterid(const char* value, size_t size);
  ::std::string* mutable_inviterid();
  ::std::string* release_inviterid();
  void set_allocated_inviterid(::std::string* inviterid);

  // optional string inviteeID = 2;
  void clear_inviteeid();
  static const int kInviteeIDFieldNumber = 2;
  const ::std::string& inviteeid() const;
  void set_inviteeid(const ::std::string& value);
  void set_inviteeid(const char* value);
  void set_inviteeid(const char* value, size_t size);
  ::std::string* mutable_inviteeid();
  ::std::string* release_inviteeid();
  void set_allocated_inviteeid(::std::string* inviteeid);

  // optional string toNodeID = 3;
  void clear_tonodeid();
  static const int kToNodeIDFieldNumber = 3;
  const ::std::string& tonodeid() const;
  void set_tonodeid(const ::std::string& value);
  void set_tonodeid(const char* value);
  void set_tonodeid(const char* value, size_t size);
  ::std::string* mutable_tonodeid();
  ::std::string* release_tonodeid();
  void set_allocated_tonodeid(::std::string* tonodeid);

  // @@protoc_insertion_point(class_scope:chat.AddFriendRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr inviterid_;
  ::google::protobuf::internal::ArenaStringPtr inviteeid_;
  ::google::protobuf::internal::ArenaStringPtr tonodeid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AddFriendRes> AddFriendRes_default_instance_;

// -------------------------------------------------------------------

class AddFriendNoti : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.AddFriendNoti) */ {
 public:
  AddFriendNoti();
  virtual ~AddFriendNoti();

  AddFriendNoti(const AddFriendNoti& from);

  inline AddFriendNoti& operator=(const AddFriendNoti& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddFriendNoti& default_instance();

  static const AddFriendNoti* internal_default_instance();

  void Swap(AddFriendNoti* other);

  // implements Message ----------------------------------------------

  inline AddFriendNoti* New() const { return New(NULL); }

  AddFriendNoti* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddFriendNoti& from);
  void MergeFrom(const AddFriendNoti& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddFriendNoti* other);
  void UnsafeMergeFrom(const AddFriendNoti& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string toUserID_outer = 1;
  void clear_touserid_outer();
  static const int kToUserIDOuterFieldNumber = 1;
  const ::std::string& touserid_outer() const;
  void set_touserid_outer(const ::std::string& value);
  void set_touserid_outer(const char* value);
  void set_touserid_outer(const char* value, size_t size);
  ::std::string* mutable_touserid_outer();
  ::std::string* release_touserid_outer();
  void set_allocated_touserid_outer(::std::string* touserid_outer);

  // optional .chat.AddFriendRes response = 2;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 2;
  const ::chat::AddFriendRes& response() const;
  ::chat::AddFriendRes* mutable_response();
  ::chat::AddFriendRes* release_response();
  void set_allocated_response(::chat::AddFriendRes* response);

  // @@protoc_insertion_point(class_scope:chat.AddFriendNoti)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr touserid_outer_;
  ::chat::AddFriendRes* response_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AddFriendNoti> AddFriendNoti_default_instance_;

// -------------------------------------------------------------------

class AddFriendAuthorize : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.AddFriendAuthorize) */ {
 public:
  AddFriendAuthorize();
  virtual ~AddFriendAuthorize();

  AddFriendAuthorize(const AddFriendAuthorize& from);

  inline AddFriendAuthorize& operator=(const AddFriendAuthorize& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddFriendAuthorize& default_instance();

  static const AddFriendAuthorize* internal_default_instance();

  void Swap(AddFriendAuthorize* other);

  // implements Message ----------------------------------------------

  inline AddFriendAuthorize* New() const { return New(NULL); }

  AddFriendAuthorize* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddFriendAuthorize& from);
  void MergeFrom(const AddFriendAuthorize& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddFriendAuthorize* other);
  void UnsafeMergeFrom(const AddFriendAuthorize& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string inviterID = 1;
  void clear_inviterid();
  static const int kInviterIDFieldNumber = 1;
  const ::std::string& inviterid() const;
  void set_inviterid(const ::std::string& value);
  void set_inviterid(const char* value);
  void set_inviterid(const char* value, size_t size);
  ::std::string* mutable_inviterid();
  ::std::string* release_inviterid();
  void set_allocated_inviterid(::std::string* inviterid);

  // optional string inviteeID = 2;
  void clear_inviteeid();
  static const int kInviteeIDFieldNumber = 2;
  const ::std::string& inviteeid() const;
  void set_inviteeid(const ::std::string& value);
  void set_inviteeid(const char* value);
  void set_inviteeid(const char* value, size_t size);
  ::std::string* mutable_inviteeid();
  ::std::string* release_inviteeid();
  void set_allocated_inviteeid(::std::string* inviteeid);

  // optional .chat.IsAgree isAgree = 3;
  void clear_isagree();
  static const int kIsAgreeFieldNumber = 3;
  ::chat::IsAgree isagree() const;
  void set_isagree(::chat::IsAgree value);

  // @@protoc_insertion_point(class_scope:chat.AddFriendAuthorize)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr inviterid_;
  ::google::protobuf::internal::ArenaStringPtr inviteeid_;
  int isagree_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AddFriendAuthorize> AddFriendAuthorize_default_instance_;

// -------------------------------------------------------------------

class AddFriendAuthorizeRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.AddFriendAuthorizeRes) */ {
 public:
  AddFriendAuthorizeRes();
  virtual ~AddFriendAuthorizeRes();

  AddFriendAuthorizeRes(const AddFriendAuthorizeRes& from);

  inline AddFriendAuthorizeRes& operator=(const AddFriendAuthorizeRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddFriendAuthorizeRes& default_instance();

  static const AddFriendAuthorizeRes* internal_default_instance();

  void Swap(AddFriendAuthorizeRes* other);

  // implements Message ----------------------------------------------

  inline AddFriendAuthorizeRes* New() const { return New(NULL); }

  AddFriendAuthorizeRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddFriendAuthorizeRes& from);
  void MergeFrom(const AddFriendAuthorizeRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddFriendAuthorizeRes* other);
  void UnsafeMergeFrom(const AddFriendAuthorizeRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .chat.IsAgree isAgree = 1;
  void clear_isagree();
  static const int kIsAgreeFieldNumber = 1;
  ::chat::IsAgree isagree() const;
  void set_isagree(::chat::IsAgree value);

  // optional string toUserID_outer = 2;
  void clear_touserid_outer();
  static const int kToUserIDOuterFieldNumber = 2;
  const ::std::string& touserid_outer() const;
  void set_touserid_outer(const ::std::string& value);
  void set_touserid_outer(const char* value);
  void set_touserid_outer(const char* value, size_t size);
  ::std::string* mutable_touserid_outer();
  ::std::string* release_touserid_outer();
  void set_allocated_touserid_outer(::std::string* touserid_outer);

  // @@protoc_insertion_point(class_scope:chat.AddFriendAuthorizeRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr touserid_outer_;
  int isagree_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AddFriendAuthorizeRes> AddFriendAuthorizeRes_default_instance_;

// -------------------------------------------------------------------

class AddFriendAuthorizeNoti : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.AddFriendAuthorizeNoti) */ {
 public:
  AddFriendAuthorizeNoti();
  virtual ~AddFriendAuthorizeNoti();

  AddFriendAuthorizeNoti(const AddFriendAuthorizeNoti& from);

  inline AddFriendAuthorizeNoti& operator=(const AddFriendAuthorizeNoti& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddFriendAuthorizeNoti& default_instance();

  static const AddFriendAuthorizeNoti* internal_default_instance();

  void Swap(AddFriendAuthorizeNoti* other);

  // implements Message ----------------------------------------------

  inline AddFriendAuthorizeNoti* New() const { return New(NULL); }

  AddFriendAuthorizeNoti* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddFriendAuthorizeNoti& from);
  void MergeFrom(const AddFriendAuthorizeNoti& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddFriendAuthorizeNoti* other);
  void UnsafeMergeFrom(const AddFriendAuthorizeNoti& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string toUserID_outer = 1;
  void clear_touserid_outer();
  static const int kToUserIDOuterFieldNumber = 1;
  const ::std::string& touserid_outer() const;
  void set_touserid_outer(const ::std::string& value);
  void set_touserid_outer(const char* value);
  void set_touserid_outer(const char* value, size_t size);
  ::std::string* mutable_touserid_outer();
  ::std::string* release_touserid_outer();
  void set_allocated_touserid_outer(::std::string* touserid_outer);

  // optional .chat.AddFriendAuthorize response = 2;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 2;
  const ::chat::AddFriendAuthorize& response() const;
  ::chat::AddFriendAuthorize* mutable_response();
  ::chat::AddFriendAuthorize* release_response();
  void set_allocated_response(::chat::AddFriendAuthorize* response);

  // @@protoc_insertion_point(class_scope:chat.AddFriendAuthorizeNoti)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr touserid_outer_;
  ::chat::AddFriendAuthorize* response_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AddFriendAuthorizeNoti> AddFriendAuthorizeNoti_default_instance_;

// -------------------------------------------------------------------

class QueryAddfriendInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.QueryAddfriendInfo) */ {
 public:
  QueryAddfriendInfo();
  virtual ~QueryAddfriendInfo();

  QueryAddfriendInfo(const QueryAddfriendInfo& from);

  inline QueryAddfriendInfo& operator=(const QueryAddfriendInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryAddfriendInfo& default_instance();

  static const QueryAddfriendInfo* internal_default_instance();

  void Swap(QueryAddfriendInfo* other);

  // implements Message ----------------------------------------------

  inline QueryAddfriendInfo* New() const { return New(NULL); }

  QueryAddfriendInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryAddfriendInfo& from);
  void MergeFrom(const QueryAddfriendInfo& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryAddfriendInfo* other);
  void UnsafeMergeFrom(const QueryAddfriendInfo& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 count = 1;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chat.QueryAddfriendInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 count_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<QueryAddfriendInfo> QueryAddfriendInfo_default_instance_;

// -------------------------------------------------------------------

class QueryAddfriendInfoRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.QueryAddfriendInfoRes) */ {
 public:
  QueryAddfriendInfoRes();
  virtual ~QueryAddfriendInfoRes();

  QueryAddfriendInfoRes(const QueryAddfriendInfoRes& from);

  inline QueryAddfriendInfoRes& operator=(const QueryAddfriendInfoRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryAddfriendInfoRes& default_instance();

  static const QueryAddfriendInfoRes* internal_default_instance();

  void Swap(QueryAddfriendInfoRes* other);

  // implements Message ----------------------------------------------

  inline QueryAddfriendInfoRes* New() const { return New(NULL); }

  QueryAddfriendInfoRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryAddfriendInfoRes& from);
  void MergeFrom(const QueryAddfriendInfoRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryAddfriendInfoRes* other);
  void UnsafeMergeFrom(const QueryAddfriendInfoRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string inviter = 1;
  void clear_inviter();
  static const int kInviterFieldNumber = 1;
  const ::std::string& inviter() const;
  void set_inviter(const ::std::string& value);
  void set_inviter(const char* value);
  void set_inviter(const char* value, size_t size);
  ::std::string* mutable_inviter();
  ::std::string* release_inviter();
  void set_allocated_inviter(::std::string* inviter);

  // optional string invitee = 2;
  void clear_invitee();
  static const int kInviteeFieldNumber = 2;
  const ::std::string& invitee() const;
  void set_invitee(const ::std::string& value);
  void set_invitee(const char* value);
  void set_invitee(const char* value, size_t size);
  ::std::string* mutable_invitee();
  ::std::string* release_invitee();
  void set_allocated_invitee(::std::string* invitee);

  // optional string toNodeID = 3;
  void clear_tonodeid();
  static const int kToNodeIDFieldNumber = 3;
  const ::std::string& tonodeid() const;
  void set_tonodeid(const ::std::string& value);
  void set_tonodeid(const char* value);
  void set_tonodeid(const char* value, size_t size);
  ::std::string* mutable_tonodeid();
  ::std::string* release_tonodeid();
  void set_allocated_tonodeid(::std::string* tonodeid);

  // optional bool isEnd = 4;
  void clear_isend();
  static const int kIsEndFieldNumber = 4;
  bool isend() const;
  void set_isend(bool value);

  // @@protoc_insertion_point(class_scope:chat.QueryAddfriendInfoRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr inviter_;
  ::google::protobuf::internal::ArenaStringPtr invitee_;
  ::google::protobuf::internal::ArenaStringPtr tonodeid_;
  bool isend_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<QueryAddfriendInfoRes> QueryAddfriendInfoRes_default_instance_;

// -------------------------------------------------------------------

class CreateGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.CreateGroup) */ {
 public:
  CreateGroup();
  virtual ~CreateGroup();

  CreateGroup(const CreateGroup& from);

  inline CreateGroup& operator=(const CreateGroup& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateGroup& default_instance();

  static const CreateGroup* internal_default_instance();

  void Swap(CreateGroup* other);

  // implements Message ----------------------------------------------

  inline CreateGroup* New() const { return New(NULL); }

  CreateGroup* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateGroup& from);
  void MergeFrom(const CreateGroup& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateGroup* other);
  void UnsafeMergeFrom(const CreateGroup& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string userID = 1;
  void clear_userid();
  static const int kUserIDFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional string nickname = 2;
  void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // repeated string membersID = 3;
  int membersid_size() const;
  void clear_membersid();
  static const int kMembersIDFieldNumber = 3;
  const ::std::string& membersid(int index) const;
  ::std::string* mutable_membersid(int index);
  void set_membersid(int index, const ::std::string& value);
  void set_membersid(int index, const char* value);
  void set_membersid(int index, const char* value, size_t size);
  ::std::string* add_membersid();
  void add_membersid(const ::std::string& value);
  void add_membersid(const char* value);
  void add_membersid(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& membersid() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_membersid();

  // @@protoc_insertion_point(class_scope:chat.CreateGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> membersid_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CreateGroup> CreateGroup_default_instance_;

// -------------------------------------------------------------------

class CreateGroupRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.CreateGroupRes) */ {
 public:
  CreateGroupRes();
  virtual ~CreateGroupRes();

  CreateGroupRes(const CreateGroupRes& from);

  inline CreateGroupRes& operator=(const CreateGroupRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateGroupRes& default_instance();

  static const CreateGroupRes* internal_default_instance();

  void Swap(CreateGroupRes* other);

  // implements Message ----------------------------------------------

  inline CreateGroupRes* New() const { return New(NULL); }

  CreateGroupRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateGroupRes& from);
  void MergeFrom(const CreateGroupRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateGroupRes* other);
  void UnsafeMergeFrom(const CreateGroupRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string toUserID_outer = 1;
  void clear_touserid_outer();
  static const int kToUserIDOuterFieldNumber = 1;
  const ::std::string& touserid_outer() const;
  void set_touserid_outer(const ::std::string& value);
  void set_touserid_outer(const char* value);
  void set_touserid_outer(const char* value, size_t size);
  ::std::string* mutable_touserid_outer();
  ::std::string* release_touserid_outer();
  void set_allocated_touserid_outer(::std::string* touserid_outer);

  // optional string nickname = 2;
  void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // optional string toNodeID = 3;
  void clear_tonodeid();
  static const int kToNodeIDFieldNumber = 3;
  const ::std::string& tonodeid() const;
  void set_tonodeid(const ::std::string& value);
  void set_tonodeid(const char* value);
  void set_tonodeid(const char* value, size_t size);
  ::std::string* mutable_tonodeid();
  ::std::string* release_tonodeid();
  void set_allocated_tonodeid(::std::string* tonodeid);

  // @@protoc_insertion_point(class_scope:chat.CreateGroupRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr touserid_outer_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr tonodeid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<CreateGroupRes> CreateGroupRes_default_instance_;

// -------------------------------------------------------------------

class GroupAddMember : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.GroupAddMember) */ {
 public:
  GroupAddMember();
  virtual ~GroupAddMember();

  GroupAddMember(const GroupAddMember& from);

  inline GroupAddMember& operator=(const GroupAddMember& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupAddMember& default_instance();

  static const GroupAddMember* internal_default_instance();

  void Swap(GroupAddMember* other);

  // implements Message ----------------------------------------------

  inline GroupAddMember* New() const { return New(NULL); }

  GroupAddMember* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupAddMember& from);
  void MergeFrom(const GroupAddMember& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupAddMember* other);
  void UnsafeMergeFrom(const GroupAddMember& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string toNodeID = 1;
  void clear_tonodeid();
  static const int kToNodeIDFieldNumber = 1;
  const ::std::string& tonodeid() const;
  void set_tonodeid(const ::std::string& value);
  void set_tonodeid(const char* value);
  void set_tonodeid(const char* value, size_t size);
  ::std::string* mutable_tonodeid();
  ::std::string* release_tonodeid();
  void set_allocated_tonodeid(::std::string* tonodeid);

  // repeated string membersID = 2;
  int membersid_size() const;
  void clear_membersid();
  static const int kMembersIDFieldNumber = 2;
  const ::std::string& membersid(int index) const;
  ::std::string* mutable_membersid(int index);
  void set_membersid(int index, const ::std::string& value);
  void set_membersid(int index, const char* value);
  void set_membersid(int index, const char* value, size_t size);
  ::std::string* add_membersid();
  void add_membersid(const ::std::string& value);
  void add_membersid(const char* value);
  void add_membersid(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& membersid() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_membersid();

  // @@protoc_insertion_point(class_scope:chat.GroupAddMember)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> membersid_;
  ::google::protobuf::internal::ArenaStringPtr tonodeid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<GroupAddMember> GroupAddMember_default_instance_;

// -------------------------------------------------------------------

class GroupAddMemberRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.GroupAddMemberRes) */ {
 public:
  GroupAddMemberRes();
  virtual ~GroupAddMemberRes();

  GroupAddMemberRes(const GroupAddMemberRes& from);

  inline GroupAddMemberRes& operator=(const GroupAddMemberRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupAddMemberRes& default_instance();

  static const GroupAddMemberRes* internal_default_instance();

  void Swap(GroupAddMemberRes* other);

  // implements Message ----------------------------------------------

  inline GroupAddMemberRes* New() const { return New(NULL); }

  GroupAddMemberRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupAddMemberRes& from);
  void MergeFrom(const GroupAddMemberRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupAddMemberRes* other);
  void UnsafeMergeFrom(const GroupAddMemberRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string toUserID_outer = 1;
  void clear_touserid_outer();
  static const int kToUserIDOuterFieldNumber = 1;
  const ::std::string& touserid_outer() const;
  void set_touserid_outer(const ::std::string& value);
  void set_touserid_outer(const char* value);
  void set_touserid_outer(const char* value, size_t size);
  ::std::string* mutable_touserid_outer();
  ::std::string* release_touserid_outer();
  void set_allocated_touserid_outer(::std::string* touserid_outer);

  // optional string toNodeID = 2;
  void clear_tonodeid();
  static const int kToNodeIDFieldNumber = 2;
  const ::std::string& tonodeid() const;
  void set_tonodeid(const ::std::string& value);
  void set_tonodeid(const char* value);
  void set_tonodeid(const char* value, size_t size);
  ::std::string* mutable_tonodeid();
  ::std::string* release_tonodeid();
  void set_allocated_tonodeid(::std::string* tonodeid);

  // @@protoc_insertion_point(class_scope:chat.GroupAddMemberRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr touserid_outer_;
  ::google::protobuf::internal::ArenaStringPtr tonodeid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<GroupAddMemberRes> GroupAddMemberRes_default_instance_;

// -------------------------------------------------------------------

class NodeMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.NodeMessage) */ {
 public:
  NodeMessage();
  virtual ~NodeMessage();

  NodeMessage(const NodeMessage& from);

  inline NodeMessage& operator=(const NodeMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeMessage& default_instance();

  static const NodeMessage* internal_default_instance();

  void Swap(NodeMessage* other);

  // implements Message ----------------------------------------------

  inline NodeMessage* New() const { return New(NULL); }

  NodeMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeMessage& from);
  void MergeFrom(const NodeMessage& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NodeMessage* other);
  void UnsafeMergeFrom(const NodeMessage& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string fromUserID = 2;
  void clear_fromuserid();
  static const int kFromUserIDFieldNumber = 2;
  const ::std::string& fromuserid() const;
  void set_fromuserid(const ::std::string& value);
  void set_fromuserid(const char* value);
  void set_fromuserid(const char* value, size_t size);
  ::std::string* mutable_fromuserid();
  ::std::string* release_fromuserid();
  void set_allocated_fromuserid(::std::string* fromuserid);

  // optional string toNodeID = 3;
  void clear_tonodeid();
  static const int kToNodeIDFieldNumber = 3;
  const ::std::string& tonodeid() const;
  void set_tonodeid(const ::std::string& value);
  void set_tonodeid(const char* value);
  void set_tonodeid(const char* value, size_t size);
  ::std::string* mutable_tonodeid();
  ::std::string* release_tonodeid();
  void set_allocated_tonodeid(::std::string* tonodeid);

  // optional int32 incrementID = 4;
  void clear_incrementid();
  static const int kIncrementIDFieldNumber = 4;
  ::google::protobuf::int32 incrementid() const;
  void set_incrementid(::google::protobuf::int32 value);

  // optional .chat.MediaType type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::chat::MediaType type() const;
  void set_type(::chat::MediaType value);

  // optional string content = 6;
  void clear_content();
  static const int kContentFieldNumber = 6;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // optional string toUserID_outer = 7;
  void clear_touserid_outer();
  static const int kToUserIDOuterFieldNumber = 7;
  const ::std::string& touserid_outer() const;
  void set_touserid_outer(const ::std::string& value);
  void set_touserid_outer(const char* value);
  void set_touserid_outer(const char* value, size_t size);
  ::std::string* mutable_touserid_outer();
  ::std::string* release_touserid_outer();
  void set_allocated_touserid_outer(::std::string* touserid_outer);

  // @@protoc_insertion_point(class_scope:chat.NodeMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr fromuserid_;
  ::google::protobuf::internal::ArenaStringPtr tonodeid_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::internal::ArenaStringPtr touserid_outer_;
  ::google::protobuf::int32 incrementid_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<NodeMessage> NodeMessage_default_instance_;

// -------------------------------------------------------------------

class NodeMessageRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.NodeMessageRes) */ {
 public:
  NodeMessageRes();
  virtual ~NodeMessageRes();

  NodeMessageRes(const NodeMessageRes& from);

  inline NodeMessageRes& operator=(const NodeMessageRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeMessageRes& default_instance();

  static const NodeMessageRes* internal_default_instance();

  void Swap(NodeMessageRes* other);

  // implements Message ----------------------------------------------

  inline NodeMessageRes* New() const { return New(NULL); }

  NodeMessageRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeMessageRes& from);
  void MergeFrom(const NodeMessageRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NodeMessageRes* other);
  void UnsafeMergeFrom(const NodeMessageRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string toNodeID = 2;
  void clear_tonodeid();
  static const int kToNodeIDFieldNumber = 2;
  const ::std::string& tonodeid() const;
  void set_tonodeid(const ::std::string& value);
  void set_tonodeid(const char* value);
  void set_tonodeid(const char* value, size_t size);
  ::std::string* mutable_tonodeid();
  ::std::string* release_tonodeid();
  void set_allocated_tonodeid(::std::string* tonodeid);

  // optional int32 incrementID = 3;
  void clear_incrementid();
  static const int kIncrementIDFieldNumber = 3;
  ::google::protobuf::int32 incrementid() const;
  void set_incrementid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chat.NodeMessageRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tonodeid_;
  ::google::protobuf::int32 incrementid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<NodeMessageRes> NodeMessageRes_default_instance_;

// -------------------------------------------------------------------

class NodeMessageNoti : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.NodeMessageNoti) */ {
 public:
  NodeMessageNoti();
  virtual ~NodeMessageNoti();

  NodeMessageNoti(const NodeMessageNoti& from);

  inline NodeMessageNoti& operator=(const NodeMessageNoti& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeMessageNoti& default_instance();

  static const NodeMessageNoti* internal_default_instance();

  void Swap(NodeMessageNoti* other);

  // implements Message ----------------------------------------------

  inline NodeMessageNoti* New() const { return New(NULL); }

  NodeMessageNoti* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeMessageNoti& from);
  void MergeFrom(const NodeMessageNoti& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NodeMessageNoti* other);
  void UnsafeMergeFrom(const NodeMessageNoti& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string toNodeID = 1;
  void clear_tonodeid();
  static const int kToNodeIDFieldNumber = 1;
  const ::std::string& tonodeid() const;
  void set_tonodeid(const ::std::string& value);
  void set_tonodeid(const char* value);
  void set_tonodeid(const char* value, size_t size);
  ::std::string* mutable_tonodeid();
  ::std::string* release_tonodeid();
  void set_allocated_tonodeid(::std::string* tonodeid);

  // optional int32 unreadIncrement = 2;
  void clear_unreadincrement();
  static const int kUnreadIncrementFieldNumber = 2;
  ::google::protobuf::int32 unreadincrement() const;
  void set_unreadincrement(::google::protobuf::int32 value);

  // optional string toUserID_outer = 3;
  void clear_touserid_outer();
  static const int kToUserIDOuterFieldNumber = 3;
  const ::std::string& touserid_outer() const;
  void set_touserid_outer(const ::std::string& value);
  void set_touserid_outer(const char* value);
  void set_touserid_outer(const char* value, size_t size);
  ::std::string* mutable_touserid_outer();
  ::std::string* release_touserid_outer();
  void set_allocated_touserid_outer(::std::string* touserid_outer);

  // @@protoc_insertion_point(class_scope:chat.NodeMessageNoti)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tonodeid_;
  ::google::protobuf::internal::ArenaStringPtr touserid_outer_;
  ::google::protobuf::int32 unreadincrement_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<NodeMessageNoti> NodeMessageNoti_default_instance_;

// -------------------------------------------------------------------

class setReadMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.setReadMessage) */ {
 public:
  setReadMessage();
  virtual ~setReadMessage();

  setReadMessage(const setReadMessage& from);

  inline setReadMessage& operator=(const setReadMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const setReadMessage& default_instance();

  static const setReadMessage* internal_default_instance();

  void Swap(setReadMessage* other);

  // implements Message ----------------------------------------------

  inline setReadMessage* New() const { return New(NULL); }

  setReadMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const setReadMessage& from);
  void MergeFrom(const setReadMessage& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(setReadMessage* other);
  void UnsafeMergeFrom(const setReadMessage& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string toNodeID = 1;
  void clear_tonodeid();
  static const int kToNodeIDFieldNumber = 1;
  const ::std::string& tonodeid() const;
  void set_tonodeid(const ::std::string& value);
  void set_tonodeid(const char* value);
  void set_tonodeid(const char* value, size_t size);
  ::std::string* mutable_tonodeid();
  ::std::string* release_tonodeid();
  void set_allocated_tonodeid(::std::string* tonodeid);

  // optional int32 readedIncrement = 2;
  void clear_readedincrement();
  static const int kReadedIncrementFieldNumber = 2;
  ::google::protobuf::int32 readedincrement() const;
  void set_readedincrement(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chat.setReadMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tonodeid_;
  ::google::protobuf::int32 readedincrement_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<setReadMessage> setReadMessage_default_instance_;

// -------------------------------------------------------------------

class QueryMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.QueryMessage) */ {
 public:
  QueryMessage();
  virtual ~QueryMessage();

  QueryMessage(const QueryMessage& from);

  inline QueryMessage& operator=(const QueryMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryMessage& default_instance();

  static const QueryMessage* internal_default_instance();

  void Swap(QueryMessage* other);

  // implements Message ----------------------------------------------

  inline QueryMessage* New() const { return New(NULL); }

  QueryMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryMessage& from);
  void MergeFrom(const QueryMessage& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryMessage* other);
  void UnsafeMergeFrom(const QueryMessage& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string toNodeID = 1;
  void clear_tonodeid();
  static const int kToNodeIDFieldNumber = 1;
  const ::std::string& tonodeid() const;
  void set_tonodeid(const ::std::string& value);
  void set_tonodeid(const char* value);
  void set_tonodeid(const char* value, size_t size);
  ::std::string* mutable_tonodeid();
  ::std::string* release_tonodeid();
  void set_allocated_tonodeid(::std::string* tonodeid);

  // optional int32 fromIncrementID = 2;
  void clear_fromincrementid();
  static const int kFromIncrementIDFieldNumber = 2;
  ::google::protobuf::int32 fromincrementid() const;
  void set_fromincrementid(::google::protobuf::int32 value);

  // optional int32 toIncrementID = 3;
  void clear_toincrementid();
  static const int kToIncrementIDFieldNumber = 3;
  ::google::protobuf::int32 toincrementid() const;
  void set_toincrementid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chat.QueryMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tonodeid_;
  ::google::protobuf::int32 fromincrementid_;
  ::google::protobuf::int32 toincrementid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<QueryMessage> QueryMessage_default_instance_;

// -------------------------------------------------------------------

class QueryOneMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.QueryOneMessage) */ {
 public:
  QueryOneMessage();
  virtual ~QueryOneMessage();

  QueryOneMessage(const QueryOneMessage& from);

  inline QueryOneMessage& operator=(const QueryOneMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryOneMessage& default_instance();

  static const QueryOneMessage* internal_default_instance();

  void Swap(QueryOneMessage* other);

  // implements Message ----------------------------------------------

  inline QueryOneMessage* New() const { return New(NULL); }

  QueryOneMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryOneMessage& from);
  void MergeFrom(const QueryOneMessage& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryOneMessage* other);
  void UnsafeMergeFrom(const QueryOneMessage& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string toNodeID = 1;
  void clear_tonodeid();
  static const int kToNodeIDFieldNumber = 1;
  const ::std::string& tonodeid() const;
  void set_tonodeid(const ::std::string& value);
  void set_tonodeid(const char* value);
  void set_tonodeid(const char* value, size_t size);
  ::std::string* mutable_tonodeid();
  ::std::string* release_tonodeid();
  void set_allocated_tonodeid(::std::string* tonodeid);

  // optional int32 incrementID = 2;
  void clear_incrementid();
  static const int kIncrementIDFieldNumber = 2;
  ::google::protobuf::int32 incrementid() const;
  void set_incrementid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chat.QueryOneMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tonodeid_;
  ::google::protobuf::int32 incrementid_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<QueryOneMessage> QueryOneMessage_default_instance_;

// -------------------------------------------------------------------

class ServerConnect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.ServerConnect) */ {
 public:
  ServerConnect();
  virtual ~ServerConnect();

  ServerConnect(const ServerConnect& from);

  inline ServerConnect& operator=(const ServerConnect& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerConnect& default_instance();

  static const ServerConnect* internal_default_instance();

  void Swap(ServerConnect* other);

  // implements Message ----------------------------------------------

  inline ServerConnect* New() const { return New(NULL); }

  ServerConnect* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerConnect& from);
  void MergeFrom(const ServerConnect& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerConnect* other);
  void UnsafeMergeFrom(const ServerConnect& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string serverName = 1;
  void clear_servername();
  static const int kServerNameFieldNumber = 1;
  const ::std::string& servername() const;
  void set_servername(const ::std::string& value);
  void set_servername(const char* value);
  void set_servername(const char* value, size_t size);
  ::std::string* mutable_servername();
  ::std::string* release_servername();
  void set_allocated_servername(::std::string* servername);

  // optional string serverIP = 2;
  void clear_serverip();
  static const int kServerIPFieldNumber = 2;
  const ::std::string& serverip() const;
  void set_serverip(const ::std::string& value);
  void set_serverip(const char* value);
  void set_serverip(const char* value, size_t size);
  ::std::string* mutable_serverip();
  ::std::string* release_serverip();
  void set_allocated_serverip(::std::string* serverip);

  // @@protoc_insertion_point(class_scope:chat.ServerConnect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr servername_;
  ::google::protobuf::internal::ArenaStringPtr serverip_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ServerConnect> ServerConnect_default_instance_;

// -------------------------------------------------------------------

class ServerDisconnect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.ServerDisconnect) */ {
 public:
  ServerDisconnect();
  virtual ~ServerDisconnect();

  ServerDisconnect(const ServerDisconnect& from);

  inline ServerDisconnect& operator=(const ServerDisconnect& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerDisconnect& default_instance();

  static const ServerDisconnect* internal_default_instance();

  void Swap(ServerDisconnect* other);

  // implements Message ----------------------------------------------

  inline ServerDisconnect* New() const { return New(NULL); }

  ServerDisconnect* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerDisconnect& from);
  void MergeFrom(const ServerDisconnect& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerDisconnect* other);
  void UnsafeMergeFrom(const ServerDisconnect& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string serverName = 1;
  void clear_servername();
  static const int kServerNameFieldNumber = 1;
  const ::std::string& servername() const;
  void set_servername(const ::std::string& value);
  void set_servername(const char* value);
  void set_servername(const char* value, size_t size);
  ::std::string* mutable_servername();
  ::std::string* release_servername();
  void set_allocated_servername(::std::string* servername);

  // optional string serverIP = 2;
  void clear_serverip();
  static const int kServerIPFieldNumber = 2;
  const ::std::string& serverip() const;
  void set_serverip(const ::std::string& value);
  void set_serverip(const char* value);
  void set_serverip(const char* value, size_t size);
  ::std::string* mutable_serverip();
  ::std::string* release_serverip();
  void set_allocated_serverip(::std::string* serverip);

  // @@protoc_insertion_point(class_scope:chat.ServerDisconnect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr servername_;
  ::google::protobuf::internal::ArenaStringPtr serverip_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ServerDisconnect> ServerDisconnect_default_instance_;

// -------------------------------------------------------------------

class ConnectInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.ConnectInfo) */ {
 public:
  ConnectInfo();
  virtual ~ConnectInfo();

  ConnectInfo(const ConnectInfo& from);

  inline ConnectInfo& operator=(const ConnectInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectInfo& default_instance();

  static const ConnectInfo* internal_default_instance();

  void Swap(ConnectInfo* other);

  // implements Message ----------------------------------------------

  inline ConnectInfo* New() const { return New(NULL); }

  ConnectInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnectInfo& from);
  void MergeFrom(const ConnectInfo& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConnectInfo* other);
  void UnsafeMergeFrom(const ConnectInfo& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // optional string UUID = 1;
  void clear_uuid();
  static const int kUUIDFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // optional string userID = 2;
  void clear_userid();
  static const int kUserIDFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // optional bool isLogin = 3;
  void clear_islogin();
  static const int kIsLoginFieldNumber = 3;
  bool islogin() const;
  void set_islogin(bool value);

  // optional bool isConnected = 4;
  void clear_isconnected();
  static const int kIsConnectedFieldNumber = 4;
  bool isconnected() const;
  void set_isconnected(bool value);

  // optional bool isReciveNoti = 5;
  void clear_isrecivenoti();
  static const int kIsReciveNotiFieldNumber = 5;
  bool isrecivenoti() const;
  void set_isrecivenoti(bool value);

  // optional string serverName = 6;
  void clear_servername();
  static const int kServerNameFieldNumber = 6;
  const ::std::string& servername() const;
  void set_servername(const ::std::string& value);
  void set_servername(const char* value);
  void set_servername(const char* value, size_t size);
  ::std::string* mutable_servername();
  ::std::string* release_servername();
  void set_allocated_servername(::std::string* servername);

  // map<string, int32> users = 8;
  int users_size() const;
  void clear_users();
  static const int kUsersFieldNumber = 8;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
      users() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
      mutable_users();

  // optional string clientVersion = 9;
  void clear_clientversion();
  static const int kClientVersionFieldNumber = 9;
  const ::std::string& clientversion() const;
  void set_clientversion(const ::std::string& value);
  void set_clientversion(const char* value);
  void set_clientversion(const char* value, size_t size);
  ::std::string* mutable_clientversion();
  ::std::string* release_clientversion();
  void set_allocated_clientversion(::std::string* clientversion);

  // optional string OSVersion = 10;
  void clear_osversion();
  static const int kOSVersionFieldNumber = 10;
  const ::std::string& osversion() const;
  void set_osversion(const ::std::string& value);
  void set_osversion(const char* value);
  void set_osversion(const char* value, size_t size);
  ::std::string* mutable_osversion();
  ::std::string* release_osversion();
  void set_allocated_osversion(::std::string* osversion);

  // optional string appVersion = 11;
  void clear_appversion();
  static const int kAppVersionFieldNumber = 11;
  const ::std::string& appversion() const;
  void set_appversion(const ::std::string& value);
  void set_appversion(const char* value);
  void set_appversion(const char* value, size_t size);
  ::std::string* mutable_appversion();
  ::std::string* release_appversion();
  void set_allocated_appversion(::std::string* appversion);

  // optional string timestamp = 12;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 12;
  const ::std::string& timestamp() const;
  void set_timestamp(const ::std::string& value);
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  ::std::string* mutable_timestamp();
  ::std::string* release_timestamp();
  void set_allocated_timestamp(::std::string* timestamp);

  // @@protoc_insertion_point(class_scope:chat.ConnectInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::google::protobuf::int32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      0 >
      ConnectInfo_UsersEntry;
  ::google::protobuf::internal::MapField<
      ::std::string, ::google::protobuf::int32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      0 > users_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr servername_;
  ::google::protobuf::internal::ArenaStringPtr clientversion_;
  ::google::protobuf::internal::ArenaStringPtr osversion_;
  ::google::protobuf::internal::ArenaStringPtr appversion_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_;
  bool islogin_;
  bool isconnected_;
  bool isrecivenoti_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ConnectInfo> ConnectInfo_default_instance_;

// -------------------------------------------------------------------

class ConnectInfoLittle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.ConnectInfoLittle) */ {
 public:
  ConnectInfoLittle();
  virtual ~ConnectInfoLittle();

  ConnectInfoLittle(const ConnectInfoLittle& from);

  inline ConnectInfoLittle& operator=(const ConnectInfoLittle& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectInfoLittle& default_instance();

  static const ConnectInfoLittle* internal_default_instance();

  void Swap(ConnectInfoLittle* other);

  // implements Message ----------------------------------------------

  inline ConnectInfoLittle* New() const { return New(NULL); }

  ConnectInfoLittle* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnectInfoLittle& from);
  void MergeFrom(const ConnectInfoLittle& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConnectInfoLittle* other);
  void UnsafeMergeFrom(const ConnectInfoLittle& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string UUID = 1;
  void clear_uuid();
  static const int kUUIDFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // optional bool isConnected = 2;
  void clear_isconnected();
  static const int kIsConnectedFieldNumber = 2;
  bool isconnected() const;
  void set_isconnected(bool value);

  // optional bool isReciveNoti = 3;
  void clear_isrecivenoti();
  static const int kIsReciveNotiFieldNumber = 3;
  bool isrecivenoti() const;
  void set_isrecivenoti(bool value);

  // optional int64 nodepointor = 4;
  void clear_nodepointor();
  static const int kNodepointorFieldNumber = 4;
  ::google::protobuf::int64 nodepointor() const;
  void set_nodepointor(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:chat.ConnectInfoLittle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::int64 nodepointor_;
  bool isconnected_;
  bool isrecivenoti_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ConnectInfoLittle> ConnectInfoLittle_default_instance_;

// -------------------------------------------------------------------

class Media : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.Media) */ {
 public:
  Media();
  virtual ~Media();

  Media(const Media& from);

  inline Media& operator=(const Media& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Media& default_instance();

  static const Media* internal_default_instance();

  void Swap(Media* other);

  // implements Message ----------------------------------------------

  inline Media* New() const { return New(NULL); }

  Media* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Media& from);
  void MergeFrom(const Media& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Media* other);
  void UnsafeMergeFrom(const Media& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sha1 = 1;
  void clear_sha1();
  static const int kSha1FieldNumber = 1;
  const ::std::string& sha1() const;
  void set_sha1(const ::std::string& value);
  void set_sha1(const char* value);
  void set_sha1(const char* value, size_t size);
  ::std::string* mutable_sha1();
  ::std::string* release_sha1();
  void set_allocated_sha1(::std::string* sha1);

  // optional int32 nth = 2;
  void clear_nth();
  static const int kNthFieldNumber = 2;
  ::google::protobuf::int32 nth() const;
  void set_nth(::google::protobuf::int32 value);

  // optional .chat.MediaType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::chat::MediaType type() const;
  void set_type(::chat::MediaType value);

  // optional int32 length = 4;
  void clear_length();
  static const int kLengthFieldNumber = 4;
  ::google::protobuf::int32 length() const;
  void set_length(::google::protobuf::int32 value);

  // optional bytes content = 5;
  void clear_content();
  static const int kContentFieldNumber = 5;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:chat.Media)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sha1_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::google::protobuf::int32 nth_;
  int type_;
  ::google::protobuf::int32 length_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Media> Media_default_instance_;

// -------------------------------------------------------------------

class MediaRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.MediaRes) */ {
 public:
  MediaRes();
  virtual ~MediaRes();

  MediaRes(const MediaRes& from);

  inline MediaRes& operator=(const MediaRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaRes& default_instance();

  static const MediaRes* internal_default_instance();

  void Swap(MediaRes* other);

  // implements Message ----------------------------------------------

  inline MediaRes* New() const { return New(NULL); }

  MediaRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaRes& from);
  void MergeFrom(const MediaRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MediaRes* other);
  void UnsafeMergeFrom(const MediaRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sha1 = 1;
  void clear_sha1();
  static const int kSha1FieldNumber = 1;
  const ::std::string& sha1() const;
  void set_sha1(const ::std::string& value);
  void set_sha1(const char* value);
  void set_sha1(const char* value, size_t size);
  ::std::string* mutable_sha1();
  ::std::string* release_sha1();
  void set_allocated_sha1(::std::string* sha1);

  // optional int32 nth = 2;
  void clear_nth();
  static const int kNthFieldNumber = 2;
  ::google::protobuf::int32 nth() const;
  void set_nth(::google::protobuf::int32 value);

  // optional .chat.MediaType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::chat::MediaType type() const;
  void set_type(::chat::MediaType value);

  // @@protoc_insertion_point(class_scope:chat.MediaRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sha1_;
  ::google::protobuf::int32 nth_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MediaRes> MediaRes_default_instance_;

// -------------------------------------------------------------------

class QueryMedia : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.QueryMedia) */ {
 public:
  QueryMedia();
  virtual ~QueryMedia();

  QueryMedia(const QueryMedia& from);

  inline QueryMedia& operator=(const QueryMedia& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryMedia& default_instance();

  static const QueryMedia* internal_default_instance();

  void Swap(QueryMedia* other);

  // implements Message ----------------------------------------------

  inline QueryMedia* New() const { return New(NULL); }

  QueryMedia* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryMedia& from);
  void MergeFrom(const QueryMedia& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QueryMedia* other);
  void UnsafeMergeFrom(const QueryMedia& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sha1 = 1;
  void clear_sha1();
  static const int kSha1FieldNumber = 1;
  const ::std::string& sha1() const;
  void set_sha1(const ::std::string& value);
  void set_sha1(const char* value);
  void set_sha1(const char* value, size_t size);
  ::std::string* mutable_sha1();
  ::std::string* release_sha1();
  void set_allocated_sha1(::std::string* sha1);

  // @@protoc_insertion_point(class_scope:chat.QueryMedia)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sha1_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<QueryMedia> QueryMedia_default_instance_;

// -------------------------------------------------------------------

class MediaIsExist : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.MediaIsExist) */ {
 public:
  MediaIsExist();
  virtual ~MediaIsExist();

  MediaIsExist(const MediaIsExist& from);

  inline MediaIsExist& operator=(const MediaIsExist& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaIsExist& default_instance();

  static const MediaIsExist* internal_default_instance();

  void Swap(MediaIsExist* other);

  // implements Message ----------------------------------------------

  inline MediaIsExist* New() const { return New(NULL); }

  MediaIsExist* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaIsExist& from);
  void MergeFrom(const MediaIsExist& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MediaIsExist* other);
  void UnsafeMergeFrom(const MediaIsExist& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sha1 = 1;
  void clear_sha1();
  static const int kSha1FieldNumber = 1;
  const ::std::string& sha1() const;
  void set_sha1(const ::std::string& value);
  void set_sha1(const char* value);
  void set_sha1(const char* value, size_t size);
  ::std::string* mutable_sha1();
  ::std::string* release_sha1();
  void set_allocated_sha1(::std::string* sha1);

  // @@protoc_insertion_point(class_scope:chat.MediaIsExist)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sha1_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MediaIsExist> MediaIsExist_default_instance_;

// -------------------------------------------------------------------

class MediaIsExistRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.MediaIsExistRes) */ {
 public:
  MediaIsExistRes();
  virtual ~MediaIsExistRes();

  MediaIsExistRes(const MediaIsExistRes& from);

  inline MediaIsExistRes& operator=(const MediaIsExistRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaIsExistRes& default_instance();

  static const MediaIsExistRes* internal_default_instance();

  void Swap(MediaIsExistRes* other);

  // implements Message ----------------------------------------------

  inline MediaIsExistRes* New() const { return New(NULL); }

  MediaIsExistRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaIsExistRes& from);
  void MergeFrom(const MediaIsExistRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MediaIsExistRes* other);
  void UnsafeMergeFrom(const MediaIsExistRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool isExist = 1;
  void clear_isexist();
  static const int kIsExistFieldNumber = 1;
  bool isexist() const;
  void set_isexist(bool value);

  // @@protoc_insertion_point(class_scope:chat.MediaIsExistRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool isexist_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MediaIsExistRes> MediaIsExistRes_default_instance_;

// -------------------------------------------------------------------

class MediaCheck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.MediaCheck) */ {
 public:
  MediaCheck();
  virtual ~MediaCheck();

  MediaCheck(const MediaCheck& from);

  inline MediaCheck& operator=(const MediaCheck& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaCheck& default_instance();

  static const MediaCheck* internal_default_instance();

  void Swap(MediaCheck* other);

  // implements Message ----------------------------------------------

  inline MediaCheck* New() const { return New(NULL); }

  MediaCheck* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaCheck& from);
  void MergeFrom(const MediaCheck& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MediaCheck* other);
  void UnsafeMergeFrom(const MediaCheck& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sha1 = 1;
  void clear_sha1();
  static const int kSha1FieldNumber = 1;
  const ::std::string& sha1() const;
  void set_sha1(const ::std::string& value);
  void set_sha1(const char* value);
  void set_sha1(const char* value, size_t size);
  ::std::string* mutable_sha1();
  ::std::string* release_sha1();
  void set_allocated_sha1(::std::string* sha1);

  // @@protoc_insertion_point(class_scope:chat.MediaCheck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sha1_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MediaCheck> MediaCheck_default_instance_;

// -------------------------------------------------------------------

class MediaCheckRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chat.MediaCheckRes) */ {
 public:
  MediaCheckRes();
  virtual ~MediaCheckRes();

  MediaCheckRes(const MediaCheckRes& from);

  inline MediaCheckRes& operator=(const MediaCheckRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MediaCheckRes& default_instance();

  static const MediaCheckRes* internal_default_instance();

  void Swap(MediaCheckRes* other);

  // implements Message ----------------------------------------------

  inline MediaCheckRes* New() const { return New(NULL); }

  MediaCheckRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MediaCheckRes& from);
  void MergeFrom(const MediaCheckRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MediaCheckRes* other);
  void UnsafeMergeFrom(const MediaCheckRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string sha1 = 1;
  void clear_sha1();
  static const int kSha1FieldNumber = 1;
  const ::std::string& sha1() const;
  void set_sha1(const ::std::string& value);
  void set_sha1(const char* value);
  void set_sha1(const char* value, size_t size);
  ::std::string* mutable_sha1();
  ::std::string* release_sha1();
  void set_allocated_sha1(::std::string* sha1);

  // optional bool isIntact = 2;
  void clear_isintact();
  static const int kIsIntactFieldNumber = 2;
  bool isintact() const;
  void set_isintact(bool value);

  // @@protoc_insertion_point(class_scope:chat.MediaCheckRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sha1_;
  bool isintact_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_chat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_chat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_chat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_chat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MediaCheckRes> MediaCheckRes_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ErrorNth

// optional int32 maxnth = 1;
inline void ErrorNth::clear_maxnth() {
  maxnth_ = 0;
}
inline ::google::protobuf::int32 ErrorNth::maxnth() const {
  // @@protoc_insertion_point(field_get:chat.ErrorNth.maxnth)
  return maxnth_;
}
inline void ErrorNth::set_maxnth(::google::protobuf::int32 value) {
  
  maxnth_ = value;
  // @@protoc_insertion_point(field_set:chat.ErrorNth.maxnth)
}

inline const ErrorNth* ErrorNth::internal_default_instance() {
  return &ErrorNth_default_instance_.get();
}
// -------------------------------------------------------------------

// NodeInfo

// optional int32 updatetime = 1;
inline void NodeInfo::clear_updatetime() {
  updatetime_ = 0;
}
inline ::google::protobuf::int32 NodeInfo::updatetime() const {
  // @@protoc_insertion_point(field_get:chat.NodeInfo.updatetime)
  return updatetime_;
}
inline void NodeInfo::set_updatetime(::google::protobuf::int32 value) {
  
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:chat.NodeInfo.updatetime)
}

// optional int32 readedIncrementid = 2;
inline void NodeInfo::clear_readedincrementid() {
  readedincrementid_ = 0;
}
inline ::google::protobuf::int32 NodeInfo::readedincrementid() const {
  // @@protoc_insertion_point(field_get:chat.NodeInfo.readedIncrementid)
  return readedincrementid_;
}
inline void NodeInfo::set_readedincrementid(::google::protobuf::int32 value) {
  
  readedincrementid_ = value;
  // @@protoc_insertion_point(field_set:chat.NodeInfo.readedIncrementid)
}

// optional int32 unreadIncrementid = 3;
inline void NodeInfo::clear_unreadincrementid() {
  unreadincrementid_ = 0;
}
inline ::google::protobuf::int32 NodeInfo::unreadincrementid() const {
  // @@protoc_insertion_point(field_get:chat.NodeInfo.unreadIncrementid)
  return unreadincrementid_;
}
inline void NodeInfo::set_unreadincrementid(::google::protobuf::int32 value) {
  
  unreadincrementid_ = value;
  // @@protoc_insertion_point(field_set:chat.NodeInfo.unreadIncrementid)
}

inline const NodeInfo* NodeInfo::internal_default_instance() {
  return &NodeInfo_default_instance_.get();
}
// -------------------------------------------------------------------

// TalkList

// map<string, .chat.NodeInfo> nodemap = 1;
inline int TalkList::nodemap_size() const {
  return nodemap_.size();
}
inline void TalkList::clear_nodemap() {
  nodemap_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::chat::NodeInfo >&
TalkList::nodemap() const {
  // @@protoc_insertion_point(field_map:chat.TalkList.nodemap)
  return nodemap_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::chat::NodeInfo >*
TalkList::mutable_nodemap() {
  // @@protoc_insertion_point(field_mutable_map:chat.TalkList.nodemap)
  return nodemap_.MutableMap();
}

inline const TalkList* TalkList::internal_default_instance() {
  return &TalkList_default_instance_.get();
}
// -------------------------------------------------------------------

// AddFriendInfo

// repeated .chat.QueryAddfriendInfoRes info = 1;
inline int AddFriendInfo::info_size() const {
  return info_.size();
}
inline void AddFriendInfo::clear_info() {
  info_.Clear();
}
inline const ::chat::QueryAddfriendInfoRes& AddFriendInfo::info(int index) const {
  // @@protoc_insertion_point(field_get:chat.AddFriendInfo.info)
  return info_.Get(index);
}
inline ::chat::QueryAddfriendInfoRes* AddFriendInfo::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:chat.AddFriendInfo.info)
  return info_.Mutable(index);
}
inline ::chat::QueryAddfriendInfoRes* AddFriendInfo::add_info() {
  // @@protoc_insertion_point(field_add:chat.AddFriendInfo.info)
  return info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::chat::QueryAddfriendInfoRes >*
AddFriendInfo::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:chat.AddFriendInfo.info)
  return &info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::chat::QueryAddfriendInfoRes >&
AddFriendInfo::info() const {
  // @@protoc_insertion_point(field_list:chat.AddFriendInfo.info)
  return info_;
}

inline const AddFriendInfo* AddFriendInfo::internal_default_instance() {
  return &AddFriendInfo_default_instance_.get();
}
// -------------------------------------------------------------------

// Ping

// optional string msg = 1;
inline void Ping::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Ping::msg() const {
  // @@protoc_insertion_point(field_get:chat.Ping.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ping::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Ping.msg)
}
inline void Ping::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Ping.msg)
}
inline void Ping::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Ping.msg)
}
inline ::std::string* Ping::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:chat.Ping.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Ping::release_msg() {
  // @@protoc_insertion_point(field_release:chat.Ping.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Ping::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:chat.Ping.msg)
}

inline const Ping* Ping::internal_default_instance() {
  return &Ping_default_instance_.get();
}
// -------------------------------------------------------------------

// Pong

// optional string msg = 1;
inline void Pong::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pong::msg() const {
  // @@protoc_insertion_point(field_get:chat.Pong.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pong::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Pong.msg)
}
inline void Pong::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Pong.msg)
}
inline void Pong::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Pong.msg)
}
inline ::std::string* Pong::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:chat.Pong.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pong::release_msg() {
  // @@protoc_insertion_point(field_release:chat.Pong.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pong::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:chat.Pong.msg)
}

inline const Pong* Pong::internal_default_instance() {
  return &Pong_default_instance_.get();
}
// -------------------------------------------------------------------

// NodeSelfDevice

inline const NodeSelfDevice* NodeSelfDevice::internal_default_instance() {
  return &NodeSelfDevice_default_instance_.get();
}
// -------------------------------------------------------------------

// NodePeerServer

inline const NodePeerServer* NodePeerServer::internal_default_instance() {
  return &NodePeerServer_default_instance_.get();
}
// -------------------------------------------------------------------

// NodeSpecifiy

// optional string toNodeID = 1;
inline void NodeSpecifiy::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeSpecifiy::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.NodeSpecifiy.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeSpecifiy::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.NodeSpecifiy.toNodeID)
}
inline void NodeSpecifiy::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.NodeSpecifiy.toNodeID)
}
inline void NodeSpecifiy::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.NodeSpecifiy.toNodeID)
}
inline ::std::string* NodeSpecifiy::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.NodeSpecifiy.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeSpecifiy::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.NodeSpecifiy.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeSpecifiy::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.NodeSpecifiy.toNodeID)
}

inline const NodeSpecifiy* NodeSpecifiy::internal_default_instance() {
  return &NodeSpecifiy_default_instance_.get();
}
// -------------------------------------------------------------------

// NodeUser

// optional string toUserID = 1;
inline void NodeUser::clear_touserid() {
  touserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeUser::touserid() const {
  // @@protoc_insertion_point(field_get:chat.NodeUser.toUserID)
  return touserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeUser::set_touserid(const ::std::string& value) {
  
  touserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.NodeUser.toUserID)
}
inline void NodeUser::set_touserid(const char* value) {
  
  touserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.NodeUser.toUserID)
}
inline void NodeUser::set_touserid(const char* value, size_t size) {
  
  touserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.NodeUser.toUserID)
}
inline ::std::string* NodeUser::mutable_touserid() {
  
  // @@protoc_insertion_point(field_mutable:chat.NodeUser.toUserID)
  return touserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeUser::release_touserid() {
  // @@protoc_insertion_point(field_release:chat.NodeUser.toUserID)
  
  return touserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeUser::set_allocated_touserid(::std::string* touserid) {
  if (touserid != NULL) {
    
  } else {
    
  }
  touserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), touserid);
  // @@protoc_insertion_point(field_set_allocated:chat.NodeUser.toUserID)
}

inline const NodeUser* NodeUser::internal_default_instance() {
  return &NodeUser_default_instance_.get();
}
// -------------------------------------------------------------------

// Error

// optional int32 errnum = 1;
inline void Error::clear_errnum() {
  errnum_ = 0;
}
inline ::google::protobuf::int32 Error::errnum() const {
  // @@protoc_insertion_point(field_get:chat.Error.errnum)
  return errnum_;
}
inline void Error::set_errnum(::google::protobuf::int32 value) {
  
  errnum_ = value;
  // @@protoc_insertion_point(field_set:chat.Error.errnum)
}

// optional string errmsg = 2;
inline void Error::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Error::errmsg() const {
  // @@protoc_insertion_point(field_get:chat.Error.errmsg)
  return errmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Error.errmsg)
}
inline void Error::set_errmsg(const char* value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Error.errmsg)
}
inline void Error::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Error.errmsg)
}
inline ::std::string* Error::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:chat.Error.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Error::release_errmsg() {
  // @@protoc_insertion_point(field_release:chat.Error.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:chat.Error.errmsg)
}

inline const Error* Error::internal_default_instance() {
  return &Error_default_instance_.get();
}
// -------------------------------------------------------------------

// Device

// optional .chat.Device.OperatingSystem OS = 1;
inline void Device::clear_os() {
  os_ = 0;
}
inline ::chat::Device_OperatingSystem Device::os() const {
  // @@protoc_insertion_point(field_get:chat.Device.OS)
  return static_cast< ::chat::Device_OperatingSystem >(os_);
}
inline void Device::set_os(::chat::Device_OperatingSystem value) {
  
  os_ = value;
  // @@protoc_insertion_point(field_set:chat.Device.OS)
}

// optional string deviceModel = 2;
inline void Device::clear_devicemodel() {
  devicemodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::devicemodel() const {
  // @@protoc_insertion_point(field_get:chat.Device.deviceModel)
  return devicemodel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_devicemodel(const ::std::string& value) {
  
  devicemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Device.deviceModel)
}
inline void Device::set_devicemodel(const char* value) {
  
  devicemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Device.deviceModel)
}
inline void Device::set_devicemodel(const char* value, size_t size) {
  
  devicemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Device.deviceModel)
}
inline ::std::string* Device::mutable_devicemodel() {
  
  // @@protoc_insertion_point(field_mutable:chat.Device.deviceModel)
  return devicemodel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_devicemodel() {
  // @@protoc_insertion_point(field_release:chat.Device.deviceModel)
  
  return devicemodel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_devicemodel(::std::string* devicemodel) {
  if (devicemodel != NULL) {
    
  } else {
    
  }
  devicemodel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicemodel);
  // @@protoc_insertion_point(field_set_allocated:chat.Device.deviceModel)
}

// optional string deviceNickname = 3;
inline void Device::clear_devicenickname() {
  devicenickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::devicenickname() const {
  // @@protoc_insertion_point(field_get:chat.Device.deviceNickname)
  return devicenickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_devicenickname(const ::std::string& value) {
  
  devicenickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Device.deviceNickname)
}
inline void Device::set_devicenickname(const char* value) {
  
  devicenickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Device.deviceNickname)
}
inline void Device::set_devicenickname(const char* value, size_t size) {
  
  devicenickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Device.deviceNickname)
}
inline ::std::string* Device::mutable_devicenickname() {
  
  // @@protoc_insertion_point(field_mutable:chat.Device.deviceNickname)
  return devicenickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_devicenickname() {
  // @@protoc_insertion_point(field_release:chat.Device.deviceNickname)
  
  return devicenickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_devicenickname(::std::string* devicenickname) {
  if (devicenickname != NULL) {
    
  } else {
    
  }
  devicenickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicenickname);
  // @@protoc_insertion_point(field_set_allocated:chat.Device.deviceNickname)
}

// optional string UUID = 4;
inline void Device::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::uuid() const {
  // @@protoc_insertion_point(field_get:chat.Device.UUID)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Device.UUID)
}
inline void Device::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Device.UUID)
}
inline void Device::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Device.UUID)
}
inline ::std::string* Device::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:chat.Device.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_uuid() {
  // @@protoc_insertion_point(field_release:chat.Device.UUID)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:chat.Device.UUID)
}

inline const Device* Device::internal_default_instance() {
  return &Device_default_instance_.get();
}
// -------------------------------------------------------------------

// MessageNode

// optional string id = 1;
inline void MessageNode::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageNode::id() const {
  // @@protoc_insertion_point(field_get:chat.MessageNode.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageNode::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.MessageNode.id)
}
inline void MessageNode::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.MessageNode.id)
}
inline void MessageNode::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.MessageNode.id)
}
inline ::std::string* MessageNode::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:chat.MessageNode.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageNode::release_id() {
  // @@protoc_insertion_point(field_release:chat.MessageNode.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageNode::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:chat.MessageNode.id)
}

// optional .chat.MessageNode.Authorize authorize = 2;
inline void MessageNode::clear_authorize() {
  authorize_ = 0;
}
inline ::chat::MessageNode_Authorize MessageNode::authorize() const {
  // @@protoc_insertion_point(field_get:chat.MessageNode.authorize)
  return static_cast< ::chat::MessageNode_Authorize >(authorize_);
}
inline void MessageNode::set_authorize(::chat::MessageNode_Authorize value) {
  
  authorize_ = value;
  // @@protoc_insertion_point(field_set:chat.MessageNode.authorize)
}

// optional string creatorID = 3;
inline void MessageNode::clear_creatorid() {
  creatorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageNode::creatorid() const {
  // @@protoc_insertion_point(field_get:chat.MessageNode.creatorID)
  return creatorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageNode::set_creatorid(const ::std::string& value) {
  
  creatorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.MessageNode.creatorID)
}
inline void MessageNode::set_creatorid(const char* value) {
  
  creatorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.MessageNode.creatorID)
}
inline void MessageNode::set_creatorid(const char* value, size_t size) {
  
  creatorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.MessageNode.creatorID)
}
inline ::std::string* MessageNode::mutable_creatorid() {
  
  // @@protoc_insertion_point(field_mutable:chat.MessageNode.creatorID)
  return creatorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageNode::release_creatorid() {
  // @@protoc_insertion_point(field_release:chat.MessageNode.creatorID)
  
  return creatorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageNode::set_allocated_creatorid(::std::string* creatorid) {
  if (creatorid != NULL) {
    
  } else {
    
  }
  creatorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creatorid);
  // @@protoc_insertion_point(field_set_allocated:chat.MessageNode.creatorID)
}

// optional string nickname = 4;
inline void MessageNode::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageNode::nickname() const {
  // @@protoc_insertion_point(field_get:chat.MessageNode.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageNode::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.MessageNode.nickname)
}
inline void MessageNode::set_nickname(const char* value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.MessageNode.nickname)
}
inline void MessageNode::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.MessageNode.nickname)
}
inline ::std::string* MessageNode::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:chat.MessageNode.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageNode::release_nickname() {
  // @@protoc_insertion_point(field_release:chat.MessageNode.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageNode::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:chat.MessageNode.nickname)
}

// optional int32 version = 5;
inline void MessageNode::clear_version() {
  version_ = 0;
}
inline ::google::protobuf::int32 MessageNode::version() const {
  // @@protoc_insertion_point(field_get:chat.MessageNode.version)
  return version_;
}
inline void MessageNode::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:chat.MessageNode.version)
}

// repeated string managerIDs = 6;
inline int MessageNode::managerids_size() const {
  return managerids_.size();
}
inline void MessageNode::clear_managerids() {
  managerids_.Clear();
}
inline const ::std::string& MessageNode::managerids(int index) const {
  // @@protoc_insertion_point(field_get:chat.MessageNode.managerIDs)
  return managerids_.Get(index);
}
inline ::std::string* MessageNode::mutable_managerids(int index) {
  // @@protoc_insertion_point(field_mutable:chat.MessageNode.managerIDs)
  return managerids_.Mutable(index);
}
inline void MessageNode::set_managerids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chat.MessageNode.managerIDs)
  managerids_.Mutable(index)->assign(value);
}
inline void MessageNode::set_managerids(int index, const char* value) {
  managerids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.MessageNode.managerIDs)
}
inline void MessageNode::set_managerids(int index, const char* value, size_t size) {
  managerids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.MessageNode.managerIDs)
}
inline ::std::string* MessageNode::add_managerids() {
  // @@protoc_insertion_point(field_add_mutable:chat.MessageNode.managerIDs)
  return managerids_.Add();
}
inline void MessageNode::add_managerids(const ::std::string& value) {
  managerids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chat.MessageNode.managerIDs)
}
inline void MessageNode::add_managerids(const char* value) {
  managerids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chat.MessageNode.managerIDs)
}
inline void MessageNode::add_managerids(const char* value, size_t size) {
  managerids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chat.MessageNode.managerIDs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MessageNode::managerids() const {
  // @@protoc_insertion_point(field_list:chat.MessageNode.managerIDs)
  return managerids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MessageNode::mutable_managerids() {
  // @@protoc_insertion_point(field_mutable_list:chat.MessageNode.managerIDs)
  return &managerids_;
}

// repeated string members = 7;
inline int MessageNode::members_size() const {
  return members_.size();
}
inline void MessageNode::clear_members() {
  members_.Clear();
}
inline const ::std::string& MessageNode::members(int index) const {
  // @@protoc_insertion_point(field_get:chat.MessageNode.members)
  return members_.Get(index);
}
inline ::std::string* MessageNode::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:chat.MessageNode.members)
  return members_.Mutable(index);
}
inline void MessageNode::set_members(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chat.MessageNode.members)
  members_.Mutable(index)->assign(value);
}
inline void MessageNode::set_members(int index, const char* value) {
  members_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.MessageNode.members)
}
inline void MessageNode::set_members(int index, const char* value, size_t size) {
  members_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.MessageNode.members)
}
inline ::std::string* MessageNode::add_members() {
  // @@protoc_insertion_point(field_add_mutable:chat.MessageNode.members)
  return members_.Add();
}
inline void MessageNode::add_members(const ::std::string& value) {
  members_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chat.MessageNode.members)
}
inline void MessageNode::add_members(const char* value) {
  members_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chat.MessageNode.members)
}
inline void MessageNode::add_members(const char* value, size_t size) {
  members_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chat.MessageNode.members)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MessageNode::members() const {
  // @@protoc_insertion_point(field_list:chat.MessageNode.members)
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MessageNode::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:chat.MessageNode.members)
  return &members_;
}

inline const MessageNode* MessageNode::internal_default_instance() {
  return &MessageNode_default_instance_.get();
}
// -------------------------------------------------------------------

// UserInfo

// optional string toNodeID = 1;
inline void UserInfo::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.UserInfo.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.UserInfo.toNodeID)
}
inline void UserInfo::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.UserInfo.toNodeID)
}
inline void UserInfo::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.UserInfo.toNodeID)
}
inline ::std::string* UserInfo::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.UserInfo.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.UserInfo.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.UserInfo.toNodeID)
}

// optional string userID = 2;
inline void UserInfo::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::userid() const {
  // @@protoc_insertion_point(field_get:chat.UserInfo.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.UserInfo.userID)
}
inline void UserInfo::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.UserInfo.userID)
}
inline void UserInfo::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.UserInfo.userID)
}
inline ::std::string* UserInfo::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:chat.UserInfo.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_userid() {
  // @@protoc_insertion_point(field_release:chat.UserInfo.userID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:chat.UserInfo.userID)
}

inline const UserInfo* UserInfo::internal_default_instance() {
  return &UserInfo_default_instance_.get();
}
// -------------------------------------------------------------------

// User

// optional string id = 1;
inline void User::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::id() const {
  // @@protoc_insertion_point(field_get:chat.User.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.User.id)
}
inline void User::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.User.id)
}
inline void User::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.User.id)
}
inline ::std::string* User::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:chat.User.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_id() {
  // @@protoc_insertion_point(field_release:chat.User.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:chat.User.id)
}

// optional string realname = 2;
inline void User::clear_realname() {
  realname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::realname() const {
  // @@protoc_insertion_point(field_get:chat.User.realname)
  return realname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_realname(const ::std::string& value) {
  
  realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.User.realname)
}
inline void User::set_realname(const char* value) {
  
  realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.User.realname)
}
inline void User::set_realname(const char* value, size_t size) {
  
  realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.User.realname)
}
inline ::std::string* User::mutable_realname() {
  
  // @@protoc_insertion_point(field_mutable:chat.User.realname)
  return realname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_realname() {
  // @@protoc_insertion_point(field_release:chat.User.realname)
  
  return realname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_realname(::std::string* realname) {
  if (realname != NULL) {
    
  } else {
    
  }
  realname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), realname);
  // @@protoc_insertion_point(field_set_allocated:chat.User.realname)
}

// optional string nickname = 3;
inline void User::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::nickname() const {
  // @@protoc_insertion_point(field_get:chat.User.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.User.nickname)
}
inline void User::set_nickname(const char* value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.User.nickname)
}
inline void User::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.User.nickname)
}
inline ::std::string* User::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:chat.User.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_nickname() {
  // @@protoc_insertion_point(field_release:chat.User.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:chat.User.nickname)
}

// optional string icon = 4;
inline void User::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::icon() const {
  // @@protoc_insertion_point(field_get:chat.User.icon)
  return icon_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_icon(const ::std::string& value) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.User.icon)
}
inline void User::set_icon(const char* value) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.User.icon)
}
inline void User::set_icon(const char* value, size_t size) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.User.icon)
}
inline ::std::string* User::mutable_icon() {
  
  // @@protoc_insertion_point(field_mutable:chat.User.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_icon() {
  // @@protoc_insertion_point(field_release:chat.User.icon)
  
  return icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_icon(::std::string* icon) {
  if (icon != NULL) {
    
  } else {
    
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:chat.User.icon)
}

// optional string description = 5;
inline void User::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::description() const {
  // @@protoc_insertion_point(field_get:chat.User.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.User.description)
}
inline void User::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.User.description)
}
inline void User::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.User.description)
}
inline ::std::string* User::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:chat.User.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_description() {
  // @@protoc_insertion_point(field_release:chat.User.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:chat.User.description)
}

// optional bool isMale = 6;
inline void User::clear_ismale() {
  ismale_ = false;
}
inline bool User::ismale() const {
  // @@protoc_insertion_point(field_get:chat.User.isMale)
  return ismale_;
}
inline void User::set_ismale(bool value) {
  
  ismale_ = value;
  // @@protoc_insertion_point(field_set:chat.User.isMale)
}

// optional string phoneNo = 7;
inline void User::clear_phoneno() {
  phoneno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::phoneno() const {
  // @@protoc_insertion_point(field_get:chat.User.phoneNo)
  return phoneno_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_phoneno(const ::std::string& value) {
  
  phoneno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.User.phoneNo)
}
inline void User::set_phoneno(const char* value) {
  
  phoneno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.User.phoneNo)
}
inline void User::set_phoneno(const char* value, size_t size) {
  
  phoneno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.User.phoneNo)
}
inline ::std::string* User::mutable_phoneno() {
  
  // @@protoc_insertion_point(field_mutable:chat.User.phoneNo)
  return phoneno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_phoneno() {
  // @@protoc_insertion_point(field_release:chat.User.phoneNo)
  
  return phoneno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_phoneno(::std::string* phoneno) {
  if (phoneno != NULL) {
    
  } else {
    
  }
  phoneno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phoneno);
  // @@protoc_insertion_point(field_set_allocated:chat.User.phoneNo)
}

// optional string countryCode = 8;
inline void User::clear_countrycode() {
  countrycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::countrycode() const {
  // @@protoc_insertion_point(field_get:chat.User.countryCode)
  return countrycode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_countrycode(const ::std::string& value) {
  
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.User.countryCode)
}
inline void User::set_countrycode(const char* value) {
  
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.User.countryCode)
}
inline void User::set_countrycode(const char* value, size_t size) {
  
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.User.countryCode)
}
inline ::std::string* User::mutable_countrycode() {
  
  // @@protoc_insertion_point(field_mutable:chat.User.countryCode)
  return countrycode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_countrycode() {
  // @@protoc_insertion_point(field_release:chat.User.countryCode)
  
  return countrycode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_countrycode(::std::string* countrycode) {
  if (countrycode != NULL) {
    
  } else {
    
  }
  countrycode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), countrycode);
  // @@protoc_insertion_point(field_set_allocated:chat.User.countryCode)
}

// optional string password = 9;
inline void User::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::password() const {
  // @@protoc_insertion_point(field_get:chat.User.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.User.password)
}
inline void User::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.User.password)
}
inline void User::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.User.password)
}
inline ::std::string* User::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:chat.User.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_password() {
  // @@protoc_insertion_point(field_release:chat.User.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:chat.User.password)
}

// optional int32 birthday = 10;
inline void User::clear_birthday() {
  birthday_ = 0;
}
inline ::google::protobuf::int32 User::birthday() const {
  // @@protoc_insertion_point(field_get:chat.User.birthday)
  return birthday_;
}
inline void User::set_birthday(::google::protobuf::int32 value) {
  
  birthday_ = value;
  // @@protoc_insertion_point(field_set:chat.User.birthday)
}

// optional int32 version = 11;
inline void User::clear_version() {
  version_ = 0;
}
inline ::google::protobuf::int32 User::version() const {
  // @@protoc_insertion_point(field_get:chat.User.version)
  return version_;
}
inline void User::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:chat.User.version)
}

// repeated .chat.UserInfo friends = 12;
inline int User::friends_size() const {
  return friends_.size();
}
inline void User::clear_friends() {
  friends_.Clear();
}
inline const ::chat::UserInfo& User::friends(int index) const {
  // @@protoc_insertion_point(field_get:chat.User.friends)
  return friends_.Get(index);
}
inline ::chat::UserInfo* User::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:chat.User.friends)
  return friends_.Mutable(index);
}
inline ::chat::UserInfo* User::add_friends() {
  // @@protoc_insertion_point(field_add:chat.User.friends)
  return friends_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::chat::UserInfo >*
User::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:chat.User.friends)
  return &friends_;
}
inline const ::google::protobuf::RepeatedPtrField< ::chat::UserInfo >&
User::friends() const {
  // @@protoc_insertion_point(field_list:chat.User.friends)
  return friends_;
}

// repeated string blacklist = 13;
inline int User::blacklist_size() const {
  return blacklist_.size();
}
inline void User::clear_blacklist() {
  blacklist_.Clear();
}
inline const ::std::string& User::blacklist(int index) const {
  // @@protoc_insertion_point(field_get:chat.User.blacklist)
  return blacklist_.Get(index);
}
inline ::std::string* User::mutable_blacklist(int index) {
  // @@protoc_insertion_point(field_mutable:chat.User.blacklist)
  return blacklist_.Mutable(index);
}
inline void User::set_blacklist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chat.User.blacklist)
  blacklist_.Mutable(index)->assign(value);
}
inline void User::set_blacklist(int index, const char* value) {
  blacklist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.User.blacklist)
}
inline void User::set_blacklist(int index, const char* value, size_t size) {
  blacklist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.User.blacklist)
}
inline ::std::string* User::add_blacklist() {
  // @@protoc_insertion_point(field_add_mutable:chat.User.blacklist)
  return blacklist_.Add();
}
inline void User::add_blacklist(const ::std::string& value) {
  blacklist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chat.User.blacklist)
}
inline void User::add_blacklist(const char* value) {
  blacklist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chat.User.blacklist)
}
inline void User::add_blacklist(const char* value, size_t size) {
  blacklist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chat.User.blacklist)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
User::blacklist() const {
  // @@protoc_insertion_point(field_list:chat.User.blacklist)
  return blacklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
User::mutable_blacklist() {
  // @@protoc_insertion_point(field_mutable_list:chat.User.blacklist)
  return &blacklist_;
}

// repeated string groupNodeIDs = 14;
inline int User::groupnodeids_size() const {
  return groupnodeids_.size();
}
inline void User::clear_groupnodeids() {
  groupnodeids_.Clear();
}
inline const ::std::string& User::groupnodeids(int index) const {
  // @@protoc_insertion_point(field_get:chat.User.groupNodeIDs)
  return groupnodeids_.Get(index);
}
inline ::std::string* User::mutable_groupnodeids(int index) {
  // @@protoc_insertion_point(field_mutable:chat.User.groupNodeIDs)
  return groupnodeids_.Mutable(index);
}
inline void User::set_groupnodeids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chat.User.groupNodeIDs)
  groupnodeids_.Mutable(index)->assign(value);
}
inline void User::set_groupnodeids(int index, const char* value) {
  groupnodeids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.User.groupNodeIDs)
}
inline void User::set_groupnodeids(int index, const char* value, size_t size) {
  groupnodeids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.User.groupNodeIDs)
}
inline ::std::string* User::add_groupnodeids() {
  // @@protoc_insertion_point(field_add_mutable:chat.User.groupNodeIDs)
  return groupnodeids_.Add();
}
inline void User::add_groupnodeids(const ::std::string& value) {
  groupnodeids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chat.User.groupNodeIDs)
}
inline void User::add_groupnodeids(const char* value) {
  groupnodeids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chat.User.groupNodeIDs)
}
inline void User::add_groupnodeids(const char* value, size_t size) {
  groupnodeids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chat.User.groupNodeIDs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
User::groupnodeids() const {
  // @@protoc_insertion_point(field_list:chat.User.groupNodeIDs)
  return groupnodeids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
User::mutable_groupnodeids() {
  // @@protoc_insertion_point(field_mutable_list:chat.User.groupNodeIDs)
  return &groupnodeids_;
}

// repeated .chat.Device devices = 15;
inline int User::devices_size() const {
  return devices_.size();
}
inline void User::clear_devices() {
  devices_.Clear();
}
inline const ::chat::Device& User::devices(int index) const {
  // @@protoc_insertion_point(field_get:chat.User.devices)
  return devices_.Get(index);
}
inline ::chat::Device* User::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:chat.User.devices)
  return devices_.Mutable(index);
}
inline ::chat::Device* User::add_devices() {
  // @@protoc_insertion_point(field_add:chat.User.devices)
  return devices_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::chat::Device >*
User::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:chat.User.devices)
  return &devices_;
}
inline const ::google::protobuf::RepeatedPtrField< ::chat::Device >&
User::devices() const {
  // @@protoc_insertion_point(field_list:chat.User.devices)
  return devices_;
}

inline const User* User::internal_default_instance() {
  return &User_default_instance_.get();
}
// -------------------------------------------------------------------

// QueryUser

// optional string userID = 1;
inline void QueryUser::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryUser::userid() const {
  // @@protoc_insertion_point(field_get:chat.QueryUser.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryUser::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryUser.userID)
}
inline void QueryUser::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryUser.userID)
}
inline void QueryUser::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryUser.userID)
}
inline ::std::string* QueryUser::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryUser.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryUser::release_userid() {
  // @@protoc_insertion_point(field_release:chat.QueryUser.userID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryUser::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryUser.userID)
}

// optional string countryCode = 2;
inline void QueryUser::clear_countrycode() {
  countrycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryUser::countrycode() const {
  // @@protoc_insertion_point(field_get:chat.QueryUser.countryCode)
  return countrycode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryUser::set_countrycode(const ::std::string& value) {
  
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryUser.countryCode)
}
inline void QueryUser::set_countrycode(const char* value) {
  
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryUser.countryCode)
}
inline void QueryUser::set_countrycode(const char* value, size_t size) {
  
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryUser.countryCode)
}
inline ::std::string* QueryUser::mutable_countrycode() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryUser.countryCode)
  return countrycode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryUser::release_countrycode() {
  // @@protoc_insertion_point(field_release:chat.QueryUser.countryCode)
  
  return countrycode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryUser::set_allocated_countrycode(::std::string* countrycode) {
  if (countrycode != NULL) {
    
  } else {
    
  }
  countrycode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), countrycode);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryUser.countryCode)
}

// optional string phoneNo = 3;
inline void QueryUser::clear_phoneno() {
  phoneno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryUser::phoneno() const {
  // @@protoc_insertion_point(field_get:chat.QueryUser.phoneNo)
  return phoneno_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryUser::set_phoneno(const ::std::string& value) {
  
  phoneno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryUser.phoneNo)
}
inline void QueryUser::set_phoneno(const char* value) {
  
  phoneno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryUser.phoneNo)
}
inline void QueryUser::set_phoneno(const char* value, size_t size) {
  
  phoneno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryUser.phoneNo)
}
inline ::std::string* QueryUser::mutable_phoneno() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryUser.phoneNo)
  return phoneno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryUser::release_phoneno() {
  // @@protoc_insertion_point(field_release:chat.QueryUser.phoneNo)
  
  return phoneno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryUser::set_allocated_phoneno(::std::string* phoneno) {
  if (phoneno != NULL) {
    
  } else {
    
  }
  phoneno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phoneno);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryUser.phoneNo)
}

inline const QueryUser* QueryUser::internal_default_instance() {
  return &QueryUser_default_instance_.get();
}
// -------------------------------------------------------------------

// QueryUserRes

// optional string toUserID_outer = 1;
inline void QueryUserRes::clear_touserid_outer() {
  touserid_outer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryUserRes::touserid_outer() const {
  // @@protoc_insertion_point(field_get:chat.QueryUserRes.toUserID_outer)
  return touserid_outer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryUserRes::set_touserid_outer(const ::std::string& value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryUserRes.toUserID_outer)
}
inline void QueryUserRes::set_touserid_outer(const char* value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryUserRes.toUserID_outer)
}
inline void QueryUserRes::set_touserid_outer(const char* value, size_t size) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryUserRes.toUserID_outer)
}
inline ::std::string* QueryUserRes::mutable_touserid_outer() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryUserRes.toUserID_outer)
  return touserid_outer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryUserRes::release_touserid_outer() {
  // @@protoc_insertion_point(field_release:chat.QueryUserRes.toUserID_outer)
  
  return touserid_outer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryUserRes::set_allocated_touserid_outer(::std::string* touserid_outer) {
  if (touserid_outer != NULL) {
    
  } else {
    
  }
  touserid_outer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), touserid_outer);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryUserRes.toUserID_outer)
}

// optional .chat.User user = 2;
inline bool QueryUserRes::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
inline void QueryUserRes::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
}
inline const ::chat::User& QueryUserRes::user() const {
  // @@protoc_insertion_point(field_get:chat.QueryUserRes.user)
  return user_ != NULL ? *user_
                         : *::chat::User::internal_default_instance();
}
inline ::chat::User* QueryUserRes::mutable_user() {
  
  if (user_ == NULL) {
    user_ = new ::chat::User;
  }
  // @@protoc_insertion_point(field_mutable:chat.QueryUserRes.user)
  return user_;
}
inline ::chat::User* QueryUserRes::release_user() {
  // @@protoc_insertion_point(field_release:chat.QueryUserRes.user)
  
  ::chat::User* temp = user_;
  user_ = NULL;
  return temp;
}
inline void QueryUserRes::set_allocated_user(::chat::User* user) {
  delete user_;
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chat.QueryUserRes.user)
}

inline const QueryUserRes* QueryUserRes::internal_default_instance() {
  return &QueryUserRes_default_instance_.get();
}
// -------------------------------------------------------------------

// QueryUserVersion

// optional string userID = 1;
inline void QueryUserVersion::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryUserVersion::userid() const {
  // @@protoc_insertion_point(field_get:chat.QueryUserVersion.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryUserVersion::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryUserVersion.userID)
}
inline void QueryUserVersion::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryUserVersion.userID)
}
inline void QueryUserVersion::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryUserVersion.userID)
}
inline ::std::string* QueryUserVersion::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryUserVersion.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryUserVersion::release_userid() {
  // @@protoc_insertion_point(field_release:chat.QueryUserVersion.userID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryUserVersion::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryUserVersion.userID)
}

inline const QueryUserVersion* QueryUserVersion::internal_default_instance() {
  return &QueryUserVersion_default_instance_.get();
}
// -------------------------------------------------------------------

// QueryUserVersionRes

// optional string userID = 1;
inline void QueryUserVersionRes::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryUserVersionRes::userid() const {
  // @@protoc_insertion_point(field_get:chat.QueryUserVersionRes.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryUserVersionRes::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryUserVersionRes.userID)
}
inline void QueryUserVersionRes::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryUserVersionRes.userID)
}
inline void QueryUserVersionRes::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryUserVersionRes.userID)
}
inline ::std::string* QueryUserVersionRes::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryUserVersionRes.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryUserVersionRes::release_userid() {
  // @@protoc_insertion_point(field_release:chat.QueryUserVersionRes.userID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryUserVersionRes::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryUserVersionRes.userID)
}

// optional int32 version = 2;
inline void QueryUserVersionRes::clear_version() {
  version_ = 0;
}
inline ::google::protobuf::int32 QueryUserVersionRes::version() const {
  // @@protoc_insertion_point(field_get:chat.QueryUserVersionRes.version)
  return version_;
}
inline void QueryUserVersionRes::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:chat.QueryUserVersionRes.version)
}

inline const QueryUserVersionRes* QueryUserVersionRes::internal_default_instance() {
  return &QueryUserVersionRes_default_instance_.get();
}
// -------------------------------------------------------------------

// QueryNode

// optional string toNodeID = 1;
inline void QueryNode::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryNode::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.QueryNode.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryNode::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryNode.toNodeID)
}
inline void QueryNode::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryNode.toNodeID)
}
inline void QueryNode::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryNode.toNodeID)
}
inline ::std::string* QueryNode::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryNode.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryNode::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.QueryNode.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryNode::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryNode.toNodeID)
}

inline const QueryNode* QueryNode::internal_default_instance() {
  return &QueryNode_default_instance_.get();
}
// -------------------------------------------------------------------

// QueryNodeRes

// optional string toUserID_outer = 1;
inline void QueryNodeRes::clear_touserid_outer() {
  touserid_outer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryNodeRes::touserid_outer() const {
  // @@protoc_insertion_point(field_get:chat.QueryNodeRes.toUserID_outer)
  return touserid_outer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryNodeRes::set_touserid_outer(const ::std::string& value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryNodeRes.toUserID_outer)
}
inline void QueryNodeRes::set_touserid_outer(const char* value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryNodeRes.toUserID_outer)
}
inline void QueryNodeRes::set_touserid_outer(const char* value, size_t size) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryNodeRes.toUserID_outer)
}
inline ::std::string* QueryNodeRes::mutable_touserid_outer() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryNodeRes.toUserID_outer)
  return touserid_outer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryNodeRes::release_touserid_outer() {
  // @@protoc_insertion_point(field_release:chat.QueryNodeRes.toUserID_outer)
  
  return touserid_outer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryNodeRes::set_allocated_touserid_outer(::std::string* touserid_outer) {
  if (touserid_outer != NULL) {
    
  } else {
    
  }
  touserid_outer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), touserid_outer);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryNodeRes.toUserID_outer)
}

// optional .chat.MessageNode node = 2;
inline bool QueryNodeRes::has_node() const {
  return this != internal_default_instance() && node_ != NULL;
}
inline void QueryNodeRes::clear_node() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
}
inline const ::chat::MessageNode& QueryNodeRes::node() const {
  // @@protoc_insertion_point(field_get:chat.QueryNodeRes.node)
  return node_ != NULL ? *node_
                         : *::chat::MessageNode::internal_default_instance();
}
inline ::chat::MessageNode* QueryNodeRes::mutable_node() {
  
  if (node_ == NULL) {
    node_ = new ::chat::MessageNode;
  }
  // @@protoc_insertion_point(field_mutable:chat.QueryNodeRes.node)
  return node_;
}
inline ::chat::MessageNode* QueryNodeRes::release_node() {
  // @@protoc_insertion_point(field_release:chat.QueryNodeRes.node)
  
  ::chat::MessageNode* temp = node_;
  node_ = NULL;
  return temp;
}
inline void QueryNodeRes::set_allocated_node(::chat::MessageNode* node) {
  delete node_;
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chat.QueryNodeRes.node)
}

inline const QueryNodeRes* QueryNodeRes::internal_default_instance() {
  return &QueryNodeRes_default_instance_.get();
}
// -------------------------------------------------------------------

// QueryNodeVersion

// optional string toNodeID = 1;
inline void QueryNodeVersion::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryNodeVersion::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.QueryNodeVersion.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryNodeVersion::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryNodeVersion.toNodeID)
}
inline void QueryNodeVersion::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryNodeVersion.toNodeID)
}
inline void QueryNodeVersion::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryNodeVersion.toNodeID)
}
inline ::std::string* QueryNodeVersion::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryNodeVersion.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryNodeVersion::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.QueryNodeVersion.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryNodeVersion::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryNodeVersion.toNodeID)
}

inline const QueryNodeVersion* QueryNodeVersion::internal_default_instance() {
  return &QueryNodeVersion_default_instance_.get();
}
// -------------------------------------------------------------------

// QueryNodeVersionRes

// optional string toNodeID = 1;
inline void QueryNodeVersionRes::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryNodeVersionRes::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.QueryNodeVersionRes.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryNodeVersionRes::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryNodeVersionRes.toNodeID)
}
inline void QueryNodeVersionRes::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryNodeVersionRes.toNodeID)
}
inline void QueryNodeVersionRes::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryNodeVersionRes.toNodeID)
}
inline ::std::string* QueryNodeVersionRes::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryNodeVersionRes.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryNodeVersionRes::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.QueryNodeVersionRes.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryNodeVersionRes::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryNodeVersionRes.toNodeID)
}

// optional int32 version = 2;
inline void QueryNodeVersionRes::clear_version() {
  version_ = 0;
}
inline ::google::protobuf::int32 QueryNodeVersionRes::version() const {
  // @@protoc_insertion_point(field_get:chat.QueryNodeVersionRes.version)
  return version_;
}
inline void QueryNodeVersionRes::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:chat.QueryNodeVersionRes.version)
}

inline const QueryNodeVersionRes* QueryNodeVersionRes::internal_default_instance() {
  return &QueryNodeVersionRes_default_instance_.get();
}
// -------------------------------------------------------------------

// Register

// optional string phoneNo = 1;
inline void Register::clear_phoneno() {
  phoneno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Register::phoneno() const {
  // @@protoc_insertion_point(field_get:chat.Register.phoneNo)
  return phoneno_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Register::set_phoneno(const ::std::string& value) {
  
  phoneno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Register.phoneNo)
}
inline void Register::set_phoneno(const char* value) {
  
  phoneno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Register.phoneNo)
}
inline void Register::set_phoneno(const char* value, size_t size) {
  
  phoneno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Register.phoneNo)
}
inline ::std::string* Register::mutable_phoneno() {
  
  // @@protoc_insertion_point(field_mutable:chat.Register.phoneNo)
  return phoneno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Register::release_phoneno() {
  // @@protoc_insertion_point(field_release:chat.Register.phoneNo)
  
  return phoneno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Register::set_allocated_phoneno(::std::string* phoneno) {
  if (phoneno != NULL) {
    
  } else {
    
  }
  phoneno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phoneno);
  // @@protoc_insertion_point(field_set_allocated:chat.Register.phoneNo)
}

// optional string countryCode = 2;
inline void Register::clear_countrycode() {
  countrycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Register::countrycode() const {
  // @@protoc_insertion_point(field_get:chat.Register.countryCode)
  return countrycode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Register::set_countrycode(const ::std::string& value) {
  
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Register.countryCode)
}
inline void Register::set_countrycode(const char* value) {
  
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Register.countryCode)
}
inline void Register::set_countrycode(const char* value, size_t size) {
  
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Register.countryCode)
}
inline ::std::string* Register::mutable_countrycode() {
  
  // @@protoc_insertion_point(field_mutable:chat.Register.countryCode)
  return countrycode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Register::release_countrycode() {
  // @@protoc_insertion_point(field_release:chat.Register.countryCode)
  
  return countrycode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Register::set_allocated_countrycode(::std::string* countrycode) {
  if (countrycode != NULL) {
    
  } else {
    
  }
  countrycode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), countrycode);
  // @@protoc_insertion_point(field_set_allocated:chat.Register.countryCode)
}

// optional string password = 3;
inline void Register::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Register::password() const {
  // @@protoc_insertion_point(field_get:chat.Register.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Register::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Register.password)
}
inline void Register::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Register.password)
}
inline void Register::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Register.password)
}
inline ::std::string* Register::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:chat.Register.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Register::release_password() {
  // @@protoc_insertion_point(field_release:chat.Register.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Register::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:chat.Register.password)
}

// optional string nickname = 4;
inline void Register::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Register::nickname() const {
  // @@protoc_insertion_point(field_get:chat.Register.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Register::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Register.nickname)
}
inline void Register::set_nickname(const char* value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Register.nickname)
}
inline void Register::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Register.nickname)
}
inline ::std::string* Register::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:chat.Register.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Register::release_nickname() {
  // @@protoc_insertion_point(field_release:chat.Register.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Register::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:chat.Register.nickname)
}

// optional string verifycode = 5;
inline void Register::clear_verifycode() {
  verifycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Register::verifycode() const {
  // @@protoc_insertion_point(field_get:chat.Register.verifycode)
  return verifycode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Register::set_verifycode(const ::std::string& value) {
  
  verifycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Register.verifycode)
}
inline void Register::set_verifycode(const char* value) {
  
  verifycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Register.verifycode)
}
inline void Register::set_verifycode(const char* value, size_t size) {
  
  verifycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Register.verifycode)
}
inline ::std::string* Register::mutable_verifycode() {
  
  // @@protoc_insertion_point(field_mutable:chat.Register.verifycode)
  return verifycode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Register::release_verifycode() {
  // @@protoc_insertion_point(field_release:chat.Register.verifycode)
  
  return verifycode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Register::set_allocated_verifycode(::std::string* verifycode) {
  if (verifycode != NULL) {
    
  } else {
    
  }
  verifycode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifycode);
  // @@protoc_insertion_point(field_set_allocated:chat.Register.verifycode)
}

inline const Register* Register::internal_default_instance() {
  return &Register_default_instance_.get();
}
// -------------------------------------------------------------------

// RegisterRes

// optional string userID = 1;
inline void RegisterRes::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterRes::userid() const {
  // @@protoc_insertion_point(field_get:chat.RegisterRes.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRes::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.RegisterRes.userID)
}
inline void RegisterRes::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.RegisterRes.userID)
}
inline void RegisterRes::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.RegisterRes.userID)
}
inline ::std::string* RegisterRes::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:chat.RegisterRes.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterRes::release_userid() {
  // @@protoc_insertion_point(field_release:chat.RegisterRes.userID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRes::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:chat.RegisterRes.userID)
}

// optional bool isSuccess = 2;
inline void RegisterRes::clear_issuccess() {
  issuccess_ = false;
}
inline bool RegisterRes::issuccess() const {
  // @@protoc_insertion_point(field_get:chat.RegisterRes.isSuccess)
  return issuccess_;
}
inline void RegisterRes::set_issuccess(bool value) {
  
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:chat.RegisterRes.isSuccess)
}

// optional string e_msg = 3;
inline void RegisterRes::clear_e_msg() {
  e_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterRes::e_msg() const {
  // @@protoc_insertion_point(field_get:chat.RegisterRes.e_msg)
  return e_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRes::set_e_msg(const ::std::string& value) {
  
  e_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.RegisterRes.e_msg)
}
inline void RegisterRes::set_e_msg(const char* value) {
  
  e_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.RegisterRes.e_msg)
}
inline void RegisterRes::set_e_msg(const char* value, size_t size) {
  
  e_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.RegisterRes.e_msg)
}
inline ::std::string* RegisterRes::mutable_e_msg() {
  
  // @@protoc_insertion_point(field_mutable:chat.RegisterRes.e_msg)
  return e_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterRes::release_e_msg() {
  // @@protoc_insertion_point(field_release:chat.RegisterRes.e_msg)
  
  return e_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRes::set_allocated_e_msg(::std::string* e_msg) {
  if (e_msg != NULL) {
    
  } else {
    
  }
  e_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), e_msg);
  // @@protoc_insertion_point(field_set_allocated:chat.RegisterRes.e_msg)
}

// optional int32 e_no = 4;
inline void RegisterRes::clear_e_no() {
  e_no_ = 0;
}
inline ::google::protobuf::int32 RegisterRes::e_no() const {
  // @@protoc_insertion_point(field_get:chat.RegisterRes.e_no)
  return e_no_;
}
inline void RegisterRes::set_e_no(::google::protobuf::int32 value) {
  
  e_no_ = value;
  // @@protoc_insertion_point(field_set:chat.RegisterRes.e_no)
}

inline const RegisterRes* RegisterRes::internal_default_instance() {
  return &RegisterRes_default_instance_.get();
}
// -------------------------------------------------------------------

// Login

// optional string phoneNo = 1;
inline void Login::clear_phoneno() {
  phoneno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Login::phoneno() const {
  // @@protoc_insertion_point(field_get:chat.Login.phoneNo)
  return phoneno_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login::set_phoneno(const ::std::string& value) {
  
  phoneno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Login.phoneNo)
}
inline void Login::set_phoneno(const char* value) {
  
  phoneno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Login.phoneNo)
}
inline void Login::set_phoneno(const char* value, size_t size) {
  
  phoneno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Login.phoneNo)
}
inline ::std::string* Login::mutable_phoneno() {
  
  // @@protoc_insertion_point(field_mutable:chat.Login.phoneNo)
  return phoneno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Login::release_phoneno() {
  // @@protoc_insertion_point(field_release:chat.Login.phoneNo)
  
  return phoneno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login::set_allocated_phoneno(::std::string* phoneno) {
  if (phoneno != NULL) {
    
  } else {
    
  }
  phoneno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phoneno);
  // @@protoc_insertion_point(field_set_allocated:chat.Login.phoneNo)
}

// optional string countryCode = 2;
inline void Login::clear_countrycode() {
  countrycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Login::countrycode() const {
  // @@protoc_insertion_point(field_get:chat.Login.countryCode)
  return countrycode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login::set_countrycode(const ::std::string& value) {
  
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Login.countryCode)
}
inline void Login::set_countrycode(const char* value) {
  
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Login.countryCode)
}
inline void Login::set_countrycode(const char* value, size_t size) {
  
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Login.countryCode)
}
inline ::std::string* Login::mutable_countrycode() {
  
  // @@protoc_insertion_point(field_mutable:chat.Login.countryCode)
  return countrycode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Login::release_countrycode() {
  // @@protoc_insertion_point(field_release:chat.Login.countryCode)
  
  return countrycode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login::set_allocated_countrycode(::std::string* countrycode) {
  if (countrycode != NULL) {
    
  } else {
    
  }
  countrycode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), countrycode);
  // @@protoc_insertion_point(field_set_allocated:chat.Login.countryCode)
}

// optional string password = 3;
inline void Login::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Login::password() const {
  // @@protoc_insertion_point(field_get:chat.Login.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Login.password)
}
inline void Login::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Login.password)
}
inline void Login::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Login.password)
}
inline ::std::string* Login::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:chat.Login.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Login::release_password() {
  // @@protoc_insertion_point(field_release:chat.Login.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Login::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:chat.Login.password)
}

// optional .chat.Device device = 4;
inline bool Login::has_device() const {
  return this != internal_default_instance() && device_ != NULL;
}
inline void Login::clear_device() {
  if (GetArenaNoVirtual() == NULL && device_ != NULL) delete device_;
  device_ = NULL;
}
inline const ::chat::Device& Login::device() const {
  // @@protoc_insertion_point(field_get:chat.Login.device)
  return device_ != NULL ? *device_
                         : *::chat::Device::internal_default_instance();
}
inline ::chat::Device* Login::mutable_device() {
  
  if (device_ == NULL) {
    device_ = new ::chat::Device;
  }
  // @@protoc_insertion_point(field_mutable:chat.Login.device)
  return device_;
}
inline ::chat::Device* Login::release_device() {
  // @@protoc_insertion_point(field_release:chat.Login.device)
  
  ::chat::Device* temp = device_;
  device_ = NULL;
  return temp;
}
inline void Login::set_allocated_device(::chat::Device* device) {
  delete device_;
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chat.Login.device)
}

// repeated string ips = 5;
inline int Login::ips_size() const {
  return ips_.size();
}
inline void Login::clear_ips() {
  ips_.Clear();
}
inline const ::std::string& Login::ips(int index) const {
  // @@protoc_insertion_point(field_get:chat.Login.ips)
  return ips_.Get(index);
}
inline ::std::string* Login::mutable_ips(int index) {
  // @@protoc_insertion_point(field_mutable:chat.Login.ips)
  return ips_.Mutable(index);
}
inline void Login::set_ips(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chat.Login.ips)
  ips_.Mutable(index)->assign(value);
}
inline void Login::set_ips(int index, const char* value) {
  ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.Login.ips)
}
inline void Login::set_ips(int index, const char* value, size_t size) {
  ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.Login.ips)
}
inline ::std::string* Login::add_ips() {
  // @@protoc_insertion_point(field_add_mutable:chat.Login.ips)
  return ips_.Add();
}
inline void Login::add_ips(const ::std::string& value) {
  ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chat.Login.ips)
}
inline void Login::add_ips(const char* value) {
  ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chat.Login.ips)
}
inline void Login::add_ips(const char* value, size_t size) {
  ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chat.Login.ips)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Login::ips() const {
  // @@protoc_insertion_point(field_list:chat.Login.ips)
  return ips_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Login::mutable_ips() {
  // @@protoc_insertion_point(field_mutable_list:chat.Login.ips)
  return &ips_;
}

inline const Login* Login::internal_default_instance() {
  return &Login_default_instance_.get();
}
// -------------------------------------------------------------------

// LoginRes

// optional bool isSuccess = 1;
inline void LoginRes::clear_issuccess() {
  issuccess_ = false;
}
inline bool LoginRes::issuccess() const {
  // @@protoc_insertion_point(field_get:chat.LoginRes.isSuccess)
  return issuccess_;
}
inline void LoginRes::set_issuccess(bool value) {
  
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:chat.LoginRes.isSuccess)
}

// optional string userID = 2;
inline void LoginRes::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRes::userid() const {
  // @@protoc_insertion_point(field_get:chat.LoginRes.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRes::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.LoginRes.userID)
}
inline void LoginRes::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.LoginRes.userID)
}
inline void LoginRes::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.LoginRes.userID)
}
inline ::std::string* LoginRes::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:chat.LoginRes.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRes::release_userid() {
  // @@protoc_insertion_point(field_release:chat.LoginRes.userID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRes::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:chat.LoginRes.userID)
}

// optional int32 e_no = 3;
inline void LoginRes::clear_e_no() {
  e_no_ = 0;
}
inline ::google::protobuf::int32 LoginRes::e_no() const {
  // @@protoc_insertion_point(field_get:chat.LoginRes.e_no)
  return e_no_;
}
inline void LoginRes::set_e_no(::google::protobuf::int32 value) {
  
  e_no_ = value;
  // @@protoc_insertion_point(field_set:chat.LoginRes.e_no)
}

// optional string e_msg = 4;
inline void LoginRes::clear_e_msg() {
  e_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRes::e_msg() const {
  // @@protoc_insertion_point(field_get:chat.LoginRes.e_msg)
  return e_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRes::set_e_msg(const ::std::string& value) {
  
  e_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.LoginRes.e_msg)
}
inline void LoginRes::set_e_msg(const char* value) {
  
  e_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.LoginRes.e_msg)
}
inline void LoginRes::set_e_msg(const char* value, size_t size) {
  
  e_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.LoginRes.e_msg)
}
inline ::std::string* LoginRes::mutable_e_msg() {
  
  // @@protoc_insertion_point(field_mutable:chat.LoginRes.e_msg)
  return e_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRes::release_e_msg() {
  // @@protoc_insertion_point(field_release:chat.LoginRes.e_msg)
  
  return e_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRes::set_allocated_e_msg(::std::string* e_msg) {
  if (e_msg != NULL) {
    
  } else {
    
  }
  e_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), e_msg);
  // @@protoc_insertion_point(field_set_allocated:chat.LoginRes.e_msg)
}

inline const LoginRes* LoginRes::internal_default_instance() {
  return &LoginRes_default_instance_.get();
}
// -------------------------------------------------------------------

// LoginNoti

// optional string toUserID_outer = 1;
inline void LoginNoti::clear_touserid_outer() {
  touserid_outer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginNoti::touserid_outer() const {
  // @@protoc_insertion_point(field_get:chat.LoginNoti.toUserID_outer)
  return touserid_outer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginNoti::set_touserid_outer(const ::std::string& value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.LoginNoti.toUserID_outer)
}
inline void LoginNoti::set_touserid_outer(const char* value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.LoginNoti.toUserID_outer)
}
inline void LoginNoti::set_touserid_outer(const char* value, size_t size) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.LoginNoti.toUserID_outer)
}
inline ::std::string* LoginNoti::mutable_touserid_outer() {
  
  // @@protoc_insertion_point(field_mutable:chat.LoginNoti.toUserID_outer)
  return touserid_outer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginNoti::release_touserid_outer() {
  // @@protoc_insertion_point(field_release:chat.LoginNoti.toUserID_outer)
  
  return touserid_outer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginNoti::set_allocated_touserid_outer(::std::string* touserid_outer) {
  if (touserid_outer != NULL) {
    
  } else {
    
  }
  touserid_outer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), touserid_outer);
  // @@protoc_insertion_point(field_set_allocated:chat.LoginNoti.toUserID_outer)
}

// optional string UUID = 2;
inline void LoginNoti::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginNoti::uuid() const {
  // @@protoc_insertion_point(field_get:chat.LoginNoti.UUID)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginNoti::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.LoginNoti.UUID)
}
inline void LoginNoti::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.LoginNoti.UUID)
}
inline void LoginNoti::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.LoginNoti.UUID)
}
inline ::std::string* LoginNoti::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:chat.LoginNoti.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginNoti::release_uuid() {
  // @@protoc_insertion_point(field_release:chat.LoginNoti.UUID)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginNoti::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:chat.LoginNoti.UUID)
}

inline const LoginNoti* LoginNoti::internal_default_instance() {
  return &LoginNoti_default_instance_.get();
}
// -------------------------------------------------------------------

// ClientConnect

// optional string userID = 1;
inline void ClientConnect::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientConnect::userid() const {
  // @@protoc_insertion_point(field_get:chat.ClientConnect.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientConnect::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ClientConnect.userID)
}
inline void ClientConnect::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ClientConnect.userID)
}
inline void ClientConnect::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ClientConnect.userID)
}
inline ::std::string* ClientConnect::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:chat.ClientConnect.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientConnect::release_userid() {
  // @@protoc_insertion_point(field_release:chat.ClientConnect.userID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientConnect::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:chat.ClientConnect.userID)
}

// optional string UUID = 2;
inline void ClientConnect::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientConnect::uuid() const {
  // @@protoc_insertion_point(field_get:chat.ClientConnect.UUID)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientConnect::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ClientConnect.UUID)
}
inline void ClientConnect::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ClientConnect.UUID)
}
inline void ClientConnect::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ClientConnect.UUID)
}
inline ::std::string* ClientConnect::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:chat.ClientConnect.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientConnect::release_uuid() {
  // @@protoc_insertion_point(field_release:chat.ClientConnect.UUID)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientConnect::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:chat.ClientConnect.UUID)
}

// optional bool isReciveNoti = 3;
inline void ClientConnect::clear_isrecivenoti() {
  isrecivenoti_ = false;
}
inline bool ClientConnect::isrecivenoti() const {
  // @@protoc_insertion_point(field_get:chat.ClientConnect.isReciveNoti)
  return isrecivenoti_;
}
inline void ClientConnect::set_isrecivenoti(bool value) {
  
  isrecivenoti_ = value;
  // @@protoc_insertion_point(field_set:chat.ClientConnect.isReciveNoti)
}

// optional string clientVersion = 4;
inline void ClientConnect::clear_clientversion() {
  clientversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientConnect::clientversion() const {
  // @@protoc_insertion_point(field_get:chat.ClientConnect.clientVersion)
  return clientversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientConnect::set_clientversion(const ::std::string& value) {
  
  clientversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ClientConnect.clientVersion)
}
inline void ClientConnect::set_clientversion(const char* value) {
  
  clientversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ClientConnect.clientVersion)
}
inline void ClientConnect::set_clientversion(const char* value, size_t size) {
  
  clientversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ClientConnect.clientVersion)
}
inline ::std::string* ClientConnect::mutable_clientversion() {
  
  // @@protoc_insertion_point(field_mutable:chat.ClientConnect.clientVersion)
  return clientversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientConnect::release_clientversion() {
  // @@protoc_insertion_point(field_release:chat.ClientConnect.clientVersion)
  
  return clientversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientConnect::set_allocated_clientversion(::std::string* clientversion) {
  if (clientversion != NULL) {
    
  } else {
    
  }
  clientversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientversion);
  // @@protoc_insertion_point(field_set_allocated:chat.ClientConnect.clientVersion)
}

// optional string OSVersion = 5;
inline void ClientConnect::clear_osversion() {
  osversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientConnect::osversion() const {
  // @@protoc_insertion_point(field_get:chat.ClientConnect.OSVersion)
  return osversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientConnect::set_osversion(const ::std::string& value) {
  
  osversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ClientConnect.OSVersion)
}
inline void ClientConnect::set_osversion(const char* value) {
  
  osversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ClientConnect.OSVersion)
}
inline void ClientConnect::set_osversion(const char* value, size_t size) {
  
  osversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ClientConnect.OSVersion)
}
inline ::std::string* ClientConnect::mutable_osversion() {
  
  // @@protoc_insertion_point(field_mutable:chat.ClientConnect.OSVersion)
  return osversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientConnect::release_osversion() {
  // @@protoc_insertion_point(field_release:chat.ClientConnect.OSVersion)
  
  return osversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientConnect::set_allocated_osversion(::std::string* osversion) {
  if (osversion != NULL) {
    
  } else {
    
  }
  osversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), osversion);
  // @@protoc_insertion_point(field_set_allocated:chat.ClientConnect.OSVersion)
}

// optional string appVersion = 6;
inline void ClientConnect::clear_appversion() {
  appversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientConnect::appversion() const {
  // @@protoc_insertion_point(field_get:chat.ClientConnect.appVersion)
  return appversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientConnect::set_appversion(const ::std::string& value) {
  
  appversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ClientConnect.appVersion)
}
inline void ClientConnect::set_appversion(const char* value) {
  
  appversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ClientConnect.appVersion)
}
inline void ClientConnect::set_appversion(const char* value, size_t size) {
  
  appversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ClientConnect.appVersion)
}
inline ::std::string* ClientConnect::mutable_appversion() {
  
  // @@protoc_insertion_point(field_mutable:chat.ClientConnect.appVersion)
  return appversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientConnect::release_appversion() {
  // @@protoc_insertion_point(field_release:chat.ClientConnect.appVersion)
  
  return appversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientConnect::set_allocated_appversion(::std::string* appversion) {
  if (appversion != NULL) {
    
  } else {
    
  }
  appversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appversion);
  // @@protoc_insertion_point(field_set_allocated:chat.ClientConnect.appVersion)
}

// repeated string ips = 7;
inline int ClientConnect::ips_size() const {
  return ips_.size();
}
inline void ClientConnect::clear_ips() {
  ips_.Clear();
}
inline const ::std::string& ClientConnect::ips(int index) const {
  // @@protoc_insertion_point(field_get:chat.ClientConnect.ips)
  return ips_.Get(index);
}
inline ::std::string* ClientConnect::mutable_ips(int index) {
  // @@protoc_insertion_point(field_mutable:chat.ClientConnect.ips)
  return ips_.Mutable(index);
}
inline void ClientConnect::set_ips(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chat.ClientConnect.ips)
  ips_.Mutable(index)->assign(value);
}
inline void ClientConnect::set_ips(int index, const char* value) {
  ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.ClientConnect.ips)
}
inline void ClientConnect::set_ips(int index, const char* value, size_t size) {
  ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.ClientConnect.ips)
}
inline ::std::string* ClientConnect::add_ips() {
  // @@protoc_insertion_point(field_add_mutable:chat.ClientConnect.ips)
  return ips_.Add();
}
inline void ClientConnect::add_ips(const ::std::string& value) {
  ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chat.ClientConnect.ips)
}
inline void ClientConnect::add_ips(const char* value) {
  ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chat.ClientConnect.ips)
}
inline void ClientConnect::add_ips(const char* value, size_t size) {
  ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chat.ClientConnect.ips)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ClientConnect::ips() const {
  // @@protoc_insertion_point(field_list:chat.ClientConnect.ips)
  return ips_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ClientConnect::mutable_ips() {
  // @@protoc_insertion_point(field_mutable_list:chat.ClientConnect.ips)
  return &ips_;
}

inline const ClientConnect* ClientConnect::internal_default_instance() {
  return &ClientConnect_default_instance_.get();
}
// -------------------------------------------------------------------

// ClientConnectRes

// optional string UUID = 1;
inline void ClientConnectRes::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientConnectRes::uuid() const {
  // @@protoc_insertion_point(field_get:chat.ClientConnectRes.UUID)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientConnectRes::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ClientConnectRes.UUID)
}
inline void ClientConnectRes::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ClientConnectRes.UUID)
}
inline void ClientConnectRes::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ClientConnectRes.UUID)
}
inline ::std::string* ClientConnectRes::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:chat.ClientConnectRes.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientConnectRes::release_uuid() {
  // @@protoc_insertion_point(field_release:chat.ClientConnectRes.UUID)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientConnectRes::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:chat.ClientConnectRes.UUID)
}

// optional string userID = 2;
inline void ClientConnectRes::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientConnectRes::userid() const {
  // @@protoc_insertion_point(field_get:chat.ClientConnectRes.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientConnectRes::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ClientConnectRes.userID)
}
inline void ClientConnectRes::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ClientConnectRes.userID)
}
inline void ClientConnectRes::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ClientConnectRes.userID)
}
inline ::std::string* ClientConnectRes::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:chat.ClientConnectRes.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientConnectRes::release_userid() {
  // @@protoc_insertion_point(field_release:chat.ClientConnectRes.userID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientConnectRes::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:chat.ClientConnectRes.userID)
}

// optional int32 sessionid = 3;
inline void ClientConnectRes::clear_sessionid() {
  sessionid_ = 0;
}
inline ::google::protobuf::int32 ClientConnectRes::sessionid() const {
  // @@protoc_insertion_point(field_get:chat.ClientConnectRes.sessionid)
  return sessionid_;
}
inline void ClientConnectRes::set_sessionid(::google::protobuf::int32 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:chat.ClientConnectRes.sessionid)
}

// optional bool isSuccess = 4;
inline void ClientConnectRes::clear_issuccess() {
  issuccess_ = false;
}
inline bool ClientConnectRes::issuccess() const {
  // @@protoc_insertion_point(field_get:chat.ClientConnectRes.isSuccess)
  return issuccess_;
}
inline void ClientConnectRes::set_issuccess(bool value) {
  
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:chat.ClientConnectRes.isSuccess)
}

// optional string e_msg = 5;
inline void ClientConnectRes::clear_e_msg() {
  e_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientConnectRes::e_msg() const {
  // @@protoc_insertion_point(field_get:chat.ClientConnectRes.e_msg)
  return e_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientConnectRes::set_e_msg(const ::std::string& value) {
  
  e_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ClientConnectRes.e_msg)
}
inline void ClientConnectRes::set_e_msg(const char* value) {
  
  e_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ClientConnectRes.e_msg)
}
inline void ClientConnectRes::set_e_msg(const char* value, size_t size) {
  
  e_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ClientConnectRes.e_msg)
}
inline ::std::string* ClientConnectRes::mutable_e_msg() {
  
  // @@protoc_insertion_point(field_mutable:chat.ClientConnectRes.e_msg)
  return e_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientConnectRes::release_e_msg() {
  // @@protoc_insertion_point(field_release:chat.ClientConnectRes.e_msg)
  
  return e_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientConnectRes::set_allocated_e_msg(::std::string* e_msg) {
  if (e_msg != NULL) {
    
  } else {
    
  }
  e_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), e_msg);
  // @@protoc_insertion_point(field_set_allocated:chat.ClientConnectRes.e_msg)
}

// optional int32 e_no = 6;
inline void ClientConnectRes::clear_e_no() {
  e_no_ = 0;
}
inline ::google::protobuf::int32 ClientConnectRes::e_no() const {
  // @@protoc_insertion_point(field_get:chat.ClientConnectRes.e_no)
  return e_no_;
}
inline void ClientConnectRes::set_e_no(::google::protobuf::int32 value) {
  
  e_no_ = value;
  // @@protoc_insertion_point(field_set:chat.ClientConnectRes.e_no)
}

inline const ClientConnectRes* ClientConnectRes::internal_default_instance() {
  return &ClientConnectRes_default_instance_.get();
}
// -------------------------------------------------------------------

// ClientDisConnect

// optional string userID = 1;
inline void ClientDisConnect::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientDisConnect::userid() const {
  // @@protoc_insertion_point(field_get:chat.ClientDisConnect.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientDisConnect::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ClientDisConnect.userID)
}
inline void ClientDisConnect::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ClientDisConnect.userID)
}
inline void ClientDisConnect::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ClientDisConnect.userID)
}
inline ::std::string* ClientDisConnect::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:chat.ClientDisConnect.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientDisConnect::release_userid() {
  // @@protoc_insertion_point(field_release:chat.ClientDisConnect.userID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientDisConnect::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:chat.ClientDisConnect.userID)
}

// optional string UUID = 2;
inline void ClientDisConnect::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientDisConnect::uuid() const {
  // @@protoc_insertion_point(field_get:chat.ClientDisConnect.UUID)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientDisConnect::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ClientDisConnect.UUID)
}
inline void ClientDisConnect::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ClientDisConnect.UUID)
}
inline void ClientDisConnect::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ClientDisConnect.UUID)
}
inline ::std::string* ClientDisConnect::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:chat.ClientDisConnect.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientDisConnect::release_uuid() {
  // @@protoc_insertion_point(field_release:chat.ClientDisConnect.UUID)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientDisConnect::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:chat.ClientDisConnect.UUID)
}

inline const ClientDisConnect* ClientDisConnect::internal_default_instance() {
  return &ClientDisConnect_default_instance_.get();
}
// -------------------------------------------------------------------

// ClientDisConnectRes

// optional string UUID = 1;
inline void ClientDisConnectRes::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientDisConnectRes::uuid() const {
  // @@protoc_insertion_point(field_get:chat.ClientDisConnectRes.UUID)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientDisConnectRes::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ClientDisConnectRes.UUID)
}
inline void ClientDisConnectRes::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ClientDisConnectRes.UUID)
}
inline void ClientDisConnectRes::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ClientDisConnectRes.UUID)
}
inline ::std::string* ClientDisConnectRes::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:chat.ClientDisConnectRes.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientDisConnectRes::release_uuid() {
  // @@protoc_insertion_point(field_release:chat.ClientDisConnectRes.UUID)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientDisConnectRes::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:chat.ClientDisConnectRes.UUID)
}

// optional string userID = 2;
inline void ClientDisConnectRes::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientDisConnectRes::userid() const {
  // @@protoc_insertion_point(field_get:chat.ClientDisConnectRes.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientDisConnectRes::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ClientDisConnectRes.userID)
}
inline void ClientDisConnectRes::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ClientDisConnectRes.userID)
}
inline void ClientDisConnectRes::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ClientDisConnectRes.userID)
}
inline ::std::string* ClientDisConnectRes::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:chat.ClientDisConnectRes.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientDisConnectRes::release_userid() {
  // @@protoc_insertion_point(field_release:chat.ClientDisConnectRes.userID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientDisConnectRes::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:chat.ClientDisConnectRes.userID)
}

inline const ClientDisConnectRes* ClientDisConnectRes::internal_default_instance() {
  return &ClientDisConnectRes_default_instance_.get();
}
// -------------------------------------------------------------------

// Logout

// optional string userID = 1;
inline void Logout::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Logout::userid() const {
  // @@protoc_insertion_point(field_get:chat.Logout.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Logout::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Logout.userID)
}
inline void Logout::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Logout.userID)
}
inline void Logout::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Logout.userID)
}
inline ::std::string* Logout::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:chat.Logout.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Logout::release_userid() {
  // @@protoc_insertion_point(field_release:chat.Logout.userID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Logout::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:chat.Logout.userID)
}

// optional string UUID = 2;
inline void Logout::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Logout::uuid() const {
  // @@protoc_insertion_point(field_get:chat.Logout.UUID)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Logout::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Logout.UUID)
}
inline void Logout::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Logout.UUID)
}
inline void Logout::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Logout.UUID)
}
inline ::std::string* Logout::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:chat.Logout.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Logout::release_uuid() {
  // @@protoc_insertion_point(field_release:chat.Logout.UUID)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Logout::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:chat.Logout.UUID)
}

inline const Logout* Logout::internal_default_instance() {
  return &Logout_default_instance_.get();
}
// -------------------------------------------------------------------

// LogoutRes

// optional string UUID = 1;
inline void LogoutRes::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogoutRes::uuid() const {
  // @@protoc_insertion_point(field_get:chat.LogoutRes.UUID)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogoutRes::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.LogoutRes.UUID)
}
inline void LogoutRes::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.LogoutRes.UUID)
}
inline void LogoutRes::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.LogoutRes.UUID)
}
inline ::std::string* LogoutRes::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:chat.LogoutRes.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogoutRes::release_uuid() {
  // @@protoc_insertion_point(field_release:chat.LogoutRes.UUID)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogoutRes::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:chat.LogoutRes.UUID)
}

// optional string userID = 2;
inline void LogoutRes::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogoutRes::userid() const {
  // @@protoc_insertion_point(field_get:chat.LogoutRes.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogoutRes::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.LogoutRes.userID)
}
inline void LogoutRes::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.LogoutRes.userID)
}
inline void LogoutRes::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.LogoutRes.userID)
}
inline ::std::string* LogoutRes::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:chat.LogoutRes.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogoutRes::release_userid() {
  // @@protoc_insertion_point(field_release:chat.LogoutRes.userID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogoutRes::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:chat.LogoutRes.userID)
}

inline const LogoutRes* LogoutRes::internal_default_instance() {
  return &LogoutRes_default_instance_.get();
}
// -------------------------------------------------------------------

// AddFriend

// optional string inviteeID = 1;
inline void AddFriend::clear_inviteeid() {
  inviteeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddFriend::inviteeid() const {
  // @@protoc_insertion_point(field_get:chat.AddFriend.inviteeID)
  return inviteeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFriend::set_inviteeid(const ::std::string& value) {
  
  inviteeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.AddFriend.inviteeID)
}
inline void AddFriend::set_inviteeid(const char* value) {
  
  inviteeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.AddFriend.inviteeID)
}
inline void AddFriend::set_inviteeid(const char* value, size_t size) {
  
  inviteeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.AddFriend.inviteeID)
}
inline ::std::string* AddFriend::mutable_inviteeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.AddFriend.inviteeID)
  return inviteeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddFriend::release_inviteeid() {
  // @@protoc_insertion_point(field_release:chat.AddFriend.inviteeID)
  
  return inviteeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFriend::set_allocated_inviteeid(::std::string* inviteeid) {
  if (inviteeid != NULL) {
    
  } else {
    
  }
  inviteeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inviteeid);
  // @@protoc_insertion_point(field_set_allocated:chat.AddFriend.inviteeID)
}

// optional string inviterID = 2;
inline void AddFriend::clear_inviterid() {
  inviterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddFriend::inviterid() const {
  // @@protoc_insertion_point(field_get:chat.AddFriend.inviterID)
  return inviterid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFriend::set_inviterid(const ::std::string& value) {
  
  inviterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.AddFriend.inviterID)
}
inline void AddFriend::set_inviterid(const char* value) {
  
  inviterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.AddFriend.inviterID)
}
inline void AddFriend::set_inviterid(const char* value, size_t size) {
  
  inviterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.AddFriend.inviterID)
}
inline ::std::string* AddFriend::mutable_inviterid() {
  
  // @@protoc_insertion_point(field_mutable:chat.AddFriend.inviterID)
  return inviterid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddFriend::release_inviterid() {
  // @@protoc_insertion_point(field_release:chat.AddFriend.inviterID)
  
  return inviterid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFriend::set_allocated_inviterid(::std::string* inviterid) {
  if (inviterid != NULL) {
    
  } else {
    
  }
  inviterid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inviterid);
  // @@protoc_insertion_point(field_set_allocated:chat.AddFriend.inviterID)
}

// optional string msg = 3;
inline void AddFriend::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddFriend::msg() const {
  // @@protoc_insertion_point(field_get:chat.AddFriend.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFriend::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.AddFriend.msg)
}
inline void AddFriend::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.AddFriend.msg)
}
inline void AddFriend::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.AddFriend.msg)
}
inline ::std::string* AddFriend::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:chat.AddFriend.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddFriend::release_msg() {
  // @@protoc_insertion_point(field_release:chat.AddFriend.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFriend::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:chat.AddFriend.msg)
}

inline const AddFriend* AddFriend::internal_default_instance() {
  return &AddFriend_default_instance_.get();
}
// -------------------------------------------------------------------

// AddFriendRes

// optional string inviterID = 1;
inline void AddFriendRes::clear_inviterid() {
  inviterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddFriendRes::inviterid() const {
  // @@protoc_insertion_point(field_get:chat.AddFriendRes.inviterID)
  return inviterid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFriendRes::set_inviterid(const ::std::string& value) {
  
  inviterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.AddFriendRes.inviterID)
}
inline void AddFriendRes::set_inviterid(const char* value) {
  
  inviterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.AddFriendRes.inviterID)
}
inline void AddFriendRes::set_inviterid(const char* value, size_t size) {
  
  inviterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.AddFriendRes.inviterID)
}
inline ::std::string* AddFriendRes::mutable_inviterid() {
  
  // @@protoc_insertion_point(field_mutable:chat.AddFriendRes.inviterID)
  return inviterid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddFriendRes::release_inviterid() {
  // @@protoc_insertion_point(field_release:chat.AddFriendRes.inviterID)
  
  return inviterid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFriendRes::set_allocated_inviterid(::std::string* inviterid) {
  if (inviterid != NULL) {
    
  } else {
    
  }
  inviterid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inviterid);
  // @@protoc_insertion_point(field_set_allocated:chat.AddFriendRes.inviterID)
}

// optional string inviteeID = 2;
inline void AddFriendRes::clear_inviteeid() {
  inviteeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddFriendRes::inviteeid() const {
  // @@protoc_insertion_point(field_get:chat.AddFriendRes.inviteeID)
  return inviteeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFriendRes::set_inviteeid(const ::std::string& value) {
  
  inviteeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.AddFriendRes.inviteeID)
}
inline void AddFriendRes::set_inviteeid(const char* value) {
  
  inviteeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.AddFriendRes.inviteeID)
}
inline void AddFriendRes::set_inviteeid(const char* value, size_t size) {
  
  inviteeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.AddFriendRes.inviteeID)
}
inline ::std::string* AddFriendRes::mutable_inviteeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.AddFriendRes.inviteeID)
  return inviteeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddFriendRes::release_inviteeid() {
  // @@protoc_insertion_point(field_release:chat.AddFriendRes.inviteeID)
  
  return inviteeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFriendRes::set_allocated_inviteeid(::std::string* inviteeid) {
  if (inviteeid != NULL) {
    
  } else {
    
  }
  inviteeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inviteeid);
  // @@protoc_insertion_point(field_set_allocated:chat.AddFriendRes.inviteeID)
}

// optional string toNodeID = 3;
inline void AddFriendRes::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddFriendRes::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.AddFriendRes.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFriendRes::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.AddFriendRes.toNodeID)
}
inline void AddFriendRes::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.AddFriendRes.toNodeID)
}
inline void AddFriendRes::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.AddFriendRes.toNodeID)
}
inline ::std::string* AddFriendRes::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.AddFriendRes.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddFriendRes::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.AddFriendRes.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFriendRes::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.AddFriendRes.toNodeID)
}

inline const AddFriendRes* AddFriendRes::internal_default_instance() {
  return &AddFriendRes_default_instance_.get();
}
// -------------------------------------------------------------------

// AddFriendNoti

// optional string toUserID_outer = 1;
inline void AddFriendNoti::clear_touserid_outer() {
  touserid_outer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddFriendNoti::touserid_outer() const {
  // @@protoc_insertion_point(field_get:chat.AddFriendNoti.toUserID_outer)
  return touserid_outer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFriendNoti::set_touserid_outer(const ::std::string& value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.AddFriendNoti.toUserID_outer)
}
inline void AddFriendNoti::set_touserid_outer(const char* value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.AddFriendNoti.toUserID_outer)
}
inline void AddFriendNoti::set_touserid_outer(const char* value, size_t size) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.AddFriendNoti.toUserID_outer)
}
inline ::std::string* AddFriendNoti::mutable_touserid_outer() {
  
  // @@protoc_insertion_point(field_mutable:chat.AddFriendNoti.toUserID_outer)
  return touserid_outer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddFriendNoti::release_touserid_outer() {
  // @@protoc_insertion_point(field_release:chat.AddFriendNoti.toUserID_outer)
  
  return touserid_outer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFriendNoti::set_allocated_touserid_outer(::std::string* touserid_outer) {
  if (touserid_outer != NULL) {
    
  } else {
    
  }
  touserid_outer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), touserid_outer);
  // @@protoc_insertion_point(field_set_allocated:chat.AddFriendNoti.toUserID_outer)
}

// optional .chat.AddFriendRes response = 2;
inline bool AddFriendNoti::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void AddFriendNoti::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::chat::AddFriendRes& AddFriendNoti::response() const {
  // @@protoc_insertion_point(field_get:chat.AddFriendNoti.response)
  return response_ != NULL ? *response_
                         : *::chat::AddFriendRes::internal_default_instance();
}
inline ::chat::AddFriendRes* AddFriendNoti::mutable_response() {
  
  if (response_ == NULL) {
    response_ = new ::chat::AddFriendRes;
  }
  // @@protoc_insertion_point(field_mutable:chat.AddFriendNoti.response)
  return response_;
}
inline ::chat::AddFriendRes* AddFriendNoti::release_response() {
  // @@protoc_insertion_point(field_release:chat.AddFriendNoti.response)
  
  ::chat::AddFriendRes* temp = response_;
  response_ = NULL;
  return temp;
}
inline void AddFriendNoti::set_allocated_response(::chat::AddFriendRes* response) {
  delete response_;
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chat.AddFriendNoti.response)
}

inline const AddFriendNoti* AddFriendNoti::internal_default_instance() {
  return &AddFriendNoti_default_instance_.get();
}
// -------------------------------------------------------------------

// AddFriendAuthorize

// optional string inviterID = 1;
inline void AddFriendAuthorize::clear_inviterid() {
  inviterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddFriendAuthorize::inviterid() const {
  // @@protoc_insertion_point(field_get:chat.AddFriendAuthorize.inviterID)
  return inviterid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFriendAuthorize::set_inviterid(const ::std::string& value) {
  
  inviterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.AddFriendAuthorize.inviterID)
}
inline void AddFriendAuthorize::set_inviterid(const char* value) {
  
  inviterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.AddFriendAuthorize.inviterID)
}
inline void AddFriendAuthorize::set_inviterid(const char* value, size_t size) {
  
  inviterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.AddFriendAuthorize.inviterID)
}
inline ::std::string* AddFriendAuthorize::mutable_inviterid() {
  
  // @@protoc_insertion_point(field_mutable:chat.AddFriendAuthorize.inviterID)
  return inviterid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddFriendAuthorize::release_inviterid() {
  // @@protoc_insertion_point(field_release:chat.AddFriendAuthorize.inviterID)
  
  return inviterid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFriendAuthorize::set_allocated_inviterid(::std::string* inviterid) {
  if (inviterid != NULL) {
    
  } else {
    
  }
  inviterid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inviterid);
  // @@protoc_insertion_point(field_set_allocated:chat.AddFriendAuthorize.inviterID)
}

// optional string inviteeID = 2;
inline void AddFriendAuthorize::clear_inviteeid() {
  inviteeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddFriendAuthorize::inviteeid() const {
  // @@protoc_insertion_point(field_get:chat.AddFriendAuthorize.inviteeID)
  return inviteeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFriendAuthorize::set_inviteeid(const ::std::string& value) {
  
  inviteeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.AddFriendAuthorize.inviteeID)
}
inline void AddFriendAuthorize::set_inviteeid(const char* value) {
  
  inviteeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.AddFriendAuthorize.inviteeID)
}
inline void AddFriendAuthorize::set_inviteeid(const char* value, size_t size) {
  
  inviteeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.AddFriendAuthorize.inviteeID)
}
inline ::std::string* AddFriendAuthorize::mutable_inviteeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.AddFriendAuthorize.inviteeID)
  return inviteeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddFriendAuthorize::release_inviteeid() {
  // @@protoc_insertion_point(field_release:chat.AddFriendAuthorize.inviteeID)
  
  return inviteeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFriendAuthorize::set_allocated_inviteeid(::std::string* inviteeid) {
  if (inviteeid != NULL) {
    
  } else {
    
  }
  inviteeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inviteeid);
  // @@protoc_insertion_point(field_set_allocated:chat.AddFriendAuthorize.inviteeID)
}

// optional .chat.IsAgree isAgree = 3;
inline void AddFriendAuthorize::clear_isagree() {
  isagree_ = 0;
}
inline ::chat::IsAgree AddFriendAuthorize::isagree() const {
  // @@protoc_insertion_point(field_get:chat.AddFriendAuthorize.isAgree)
  return static_cast< ::chat::IsAgree >(isagree_);
}
inline void AddFriendAuthorize::set_isagree(::chat::IsAgree value) {
  
  isagree_ = value;
  // @@protoc_insertion_point(field_set:chat.AddFriendAuthorize.isAgree)
}

inline const AddFriendAuthorize* AddFriendAuthorize::internal_default_instance() {
  return &AddFriendAuthorize_default_instance_.get();
}
// -------------------------------------------------------------------

// AddFriendAuthorizeRes

// optional .chat.IsAgree isAgree = 1;
inline void AddFriendAuthorizeRes::clear_isagree() {
  isagree_ = 0;
}
inline ::chat::IsAgree AddFriendAuthorizeRes::isagree() const {
  // @@protoc_insertion_point(field_get:chat.AddFriendAuthorizeRes.isAgree)
  return static_cast< ::chat::IsAgree >(isagree_);
}
inline void AddFriendAuthorizeRes::set_isagree(::chat::IsAgree value) {
  
  isagree_ = value;
  // @@protoc_insertion_point(field_set:chat.AddFriendAuthorizeRes.isAgree)
}

// optional string toUserID_outer = 2;
inline void AddFriendAuthorizeRes::clear_touserid_outer() {
  touserid_outer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddFriendAuthorizeRes::touserid_outer() const {
  // @@protoc_insertion_point(field_get:chat.AddFriendAuthorizeRes.toUserID_outer)
  return touserid_outer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFriendAuthorizeRes::set_touserid_outer(const ::std::string& value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.AddFriendAuthorizeRes.toUserID_outer)
}
inline void AddFriendAuthorizeRes::set_touserid_outer(const char* value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.AddFriendAuthorizeRes.toUserID_outer)
}
inline void AddFriendAuthorizeRes::set_touserid_outer(const char* value, size_t size) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.AddFriendAuthorizeRes.toUserID_outer)
}
inline ::std::string* AddFriendAuthorizeRes::mutable_touserid_outer() {
  
  // @@protoc_insertion_point(field_mutable:chat.AddFriendAuthorizeRes.toUserID_outer)
  return touserid_outer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddFriendAuthorizeRes::release_touserid_outer() {
  // @@protoc_insertion_point(field_release:chat.AddFriendAuthorizeRes.toUserID_outer)
  
  return touserid_outer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFriendAuthorizeRes::set_allocated_touserid_outer(::std::string* touserid_outer) {
  if (touserid_outer != NULL) {
    
  } else {
    
  }
  touserid_outer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), touserid_outer);
  // @@protoc_insertion_point(field_set_allocated:chat.AddFriendAuthorizeRes.toUserID_outer)
}

inline const AddFriendAuthorizeRes* AddFriendAuthorizeRes::internal_default_instance() {
  return &AddFriendAuthorizeRes_default_instance_.get();
}
// -------------------------------------------------------------------

// AddFriendAuthorizeNoti

// optional string toUserID_outer = 1;
inline void AddFriendAuthorizeNoti::clear_touserid_outer() {
  touserid_outer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddFriendAuthorizeNoti::touserid_outer() const {
  // @@protoc_insertion_point(field_get:chat.AddFriendAuthorizeNoti.toUserID_outer)
  return touserid_outer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFriendAuthorizeNoti::set_touserid_outer(const ::std::string& value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.AddFriendAuthorizeNoti.toUserID_outer)
}
inline void AddFriendAuthorizeNoti::set_touserid_outer(const char* value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.AddFriendAuthorizeNoti.toUserID_outer)
}
inline void AddFriendAuthorizeNoti::set_touserid_outer(const char* value, size_t size) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.AddFriendAuthorizeNoti.toUserID_outer)
}
inline ::std::string* AddFriendAuthorizeNoti::mutable_touserid_outer() {
  
  // @@protoc_insertion_point(field_mutable:chat.AddFriendAuthorizeNoti.toUserID_outer)
  return touserid_outer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddFriendAuthorizeNoti::release_touserid_outer() {
  // @@protoc_insertion_point(field_release:chat.AddFriendAuthorizeNoti.toUserID_outer)
  
  return touserid_outer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddFriendAuthorizeNoti::set_allocated_touserid_outer(::std::string* touserid_outer) {
  if (touserid_outer != NULL) {
    
  } else {
    
  }
  touserid_outer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), touserid_outer);
  // @@protoc_insertion_point(field_set_allocated:chat.AddFriendAuthorizeNoti.toUserID_outer)
}

// optional .chat.AddFriendAuthorize response = 2;
inline bool AddFriendAuthorizeNoti::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void AddFriendAuthorizeNoti::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
inline const ::chat::AddFriendAuthorize& AddFriendAuthorizeNoti::response() const {
  // @@protoc_insertion_point(field_get:chat.AddFriendAuthorizeNoti.response)
  return response_ != NULL ? *response_
                         : *::chat::AddFriendAuthorize::internal_default_instance();
}
inline ::chat::AddFriendAuthorize* AddFriendAuthorizeNoti::mutable_response() {
  
  if (response_ == NULL) {
    response_ = new ::chat::AddFriendAuthorize;
  }
  // @@protoc_insertion_point(field_mutable:chat.AddFriendAuthorizeNoti.response)
  return response_;
}
inline ::chat::AddFriendAuthorize* AddFriendAuthorizeNoti::release_response() {
  // @@protoc_insertion_point(field_release:chat.AddFriendAuthorizeNoti.response)
  
  ::chat::AddFriendAuthorize* temp = response_;
  response_ = NULL;
  return temp;
}
inline void AddFriendAuthorizeNoti::set_allocated_response(::chat::AddFriendAuthorize* response) {
  delete response_;
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chat.AddFriendAuthorizeNoti.response)
}

inline const AddFriendAuthorizeNoti* AddFriendAuthorizeNoti::internal_default_instance() {
  return &AddFriendAuthorizeNoti_default_instance_.get();
}
// -------------------------------------------------------------------

// QueryAddfriendInfo

// optional int32 count = 1;
inline void QueryAddfriendInfo::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 QueryAddfriendInfo::count() const {
  // @@protoc_insertion_point(field_get:chat.QueryAddfriendInfo.count)
  return count_;
}
inline void QueryAddfriendInfo::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:chat.QueryAddfriendInfo.count)
}

inline const QueryAddfriendInfo* QueryAddfriendInfo::internal_default_instance() {
  return &QueryAddfriendInfo_default_instance_.get();
}
// -------------------------------------------------------------------

// QueryAddfriendInfoRes

// optional string inviter = 1;
inline void QueryAddfriendInfoRes::clear_inviter() {
  inviter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryAddfriendInfoRes::inviter() const {
  // @@protoc_insertion_point(field_get:chat.QueryAddfriendInfoRes.inviter)
  return inviter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryAddfriendInfoRes::set_inviter(const ::std::string& value) {
  
  inviter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryAddfriendInfoRes.inviter)
}
inline void QueryAddfriendInfoRes::set_inviter(const char* value) {
  
  inviter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryAddfriendInfoRes.inviter)
}
inline void QueryAddfriendInfoRes::set_inviter(const char* value, size_t size) {
  
  inviter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryAddfriendInfoRes.inviter)
}
inline ::std::string* QueryAddfriendInfoRes::mutable_inviter() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryAddfriendInfoRes.inviter)
  return inviter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryAddfriendInfoRes::release_inviter() {
  // @@protoc_insertion_point(field_release:chat.QueryAddfriendInfoRes.inviter)
  
  return inviter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryAddfriendInfoRes::set_allocated_inviter(::std::string* inviter) {
  if (inviter != NULL) {
    
  } else {
    
  }
  inviter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inviter);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryAddfriendInfoRes.inviter)
}

// optional string invitee = 2;
inline void QueryAddfriendInfoRes::clear_invitee() {
  invitee_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryAddfriendInfoRes::invitee() const {
  // @@protoc_insertion_point(field_get:chat.QueryAddfriendInfoRes.invitee)
  return invitee_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryAddfriendInfoRes::set_invitee(const ::std::string& value) {
  
  invitee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryAddfriendInfoRes.invitee)
}
inline void QueryAddfriendInfoRes::set_invitee(const char* value) {
  
  invitee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryAddfriendInfoRes.invitee)
}
inline void QueryAddfriendInfoRes::set_invitee(const char* value, size_t size) {
  
  invitee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryAddfriendInfoRes.invitee)
}
inline ::std::string* QueryAddfriendInfoRes::mutable_invitee() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryAddfriendInfoRes.invitee)
  return invitee_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryAddfriendInfoRes::release_invitee() {
  // @@protoc_insertion_point(field_release:chat.QueryAddfriendInfoRes.invitee)
  
  return invitee_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryAddfriendInfoRes::set_allocated_invitee(::std::string* invitee) {
  if (invitee != NULL) {
    
  } else {
    
  }
  invitee_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invitee);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryAddfriendInfoRes.invitee)
}

// optional string toNodeID = 3;
inline void QueryAddfriendInfoRes::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryAddfriendInfoRes::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.QueryAddfriendInfoRes.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryAddfriendInfoRes::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryAddfriendInfoRes.toNodeID)
}
inline void QueryAddfriendInfoRes::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryAddfriendInfoRes.toNodeID)
}
inline void QueryAddfriendInfoRes::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryAddfriendInfoRes.toNodeID)
}
inline ::std::string* QueryAddfriendInfoRes::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryAddfriendInfoRes.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryAddfriendInfoRes::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.QueryAddfriendInfoRes.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryAddfriendInfoRes::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryAddfriendInfoRes.toNodeID)
}

// optional bool isEnd = 4;
inline void QueryAddfriendInfoRes::clear_isend() {
  isend_ = false;
}
inline bool QueryAddfriendInfoRes::isend() const {
  // @@protoc_insertion_point(field_get:chat.QueryAddfriendInfoRes.isEnd)
  return isend_;
}
inline void QueryAddfriendInfoRes::set_isend(bool value) {
  
  isend_ = value;
  // @@protoc_insertion_point(field_set:chat.QueryAddfriendInfoRes.isEnd)
}

inline const QueryAddfriendInfoRes* QueryAddfriendInfoRes::internal_default_instance() {
  return &QueryAddfriendInfoRes_default_instance_.get();
}
// -------------------------------------------------------------------

// CreateGroup

// optional string userID = 1;
inline void CreateGroup::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateGroup::userid() const {
  // @@protoc_insertion_point(field_get:chat.CreateGroup.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateGroup::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.CreateGroup.userID)
}
inline void CreateGroup::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.CreateGroup.userID)
}
inline void CreateGroup::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.CreateGroup.userID)
}
inline ::std::string* CreateGroup::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:chat.CreateGroup.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateGroup::release_userid() {
  // @@protoc_insertion_point(field_release:chat.CreateGroup.userID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateGroup::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:chat.CreateGroup.userID)
}

// optional string nickname = 2;
inline void CreateGroup::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateGroup::nickname() const {
  // @@protoc_insertion_point(field_get:chat.CreateGroup.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateGroup::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.CreateGroup.nickname)
}
inline void CreateGroup::set_nickname(const char* value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.CreateGroup.nickname)
}
inline void CreateGroup::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.CreateGroup.nickname)
}
inline ::std::string* CreateGroup::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:chat.CreateGroup.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateGroup::release_nickname() {
  // @@protoc_insertion_point(field_release:chat.CreateGroup.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateGroup::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:chat.CreateGroup.nickname)
}

// repeated string membersID = 3;
inline int CreateGroup::membersid_size() const {
  return membersid_.size();
}
inline void CreateGroup::clear_membersid() {
  membersid_.Clear();
}
inline const ::std::string& CreateGroup::membersid(int index) const {
  // @@protoc_insertion_point(field_get:chat.CreateGroup.membersID)
  return membersid_.Get(index);
}
inline ::std::string* CreateGroup::mutable_membersid(int index) {
  // @@protoc_insertion_point(field_mutable:chat.CreateGroup.membersID)
  return membersid_.Mutable(index);
}
inline void CreateGroup::set_membersid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chat.CreateGroup.membersID)
  membersid_.Mutable(index)->assign(value);
}
inline void CreateGroup::set_membersid(int index, const char* value) {
  membersid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.CreateGroup.membersID)
}
inline void CreateGroup::set_membersid(int index, const char* value, size_t size) {
  membersid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.CreateGroup.membersID)
}
inline ::std::string* CreateGroup::add_membersid() {
  // @@protoc_insertion_point(field_add_mutable:chat.CreateGroup.membersID)
  return membersid_.Add();
}
inline void CreateGroup::add_membersid(const ::std::string& value) {
  membersid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chat.CreateGroup.membersID)
}
inline void CreateGroup::add_membersid(const char* value) {
  membersid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chat.CreateGroup.membersID)
}
inline void CreateGroup::add_membersid(const char* value, size_t size) {
  membersid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chat.CreateGroup.membersID)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CreateGroup::membersid() const {
  // @@protoc_insertion_point(field_list:chat.CreateGroup.membersID)
  return membersid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CreateGroup::mutable_membersid() {
  // @@protoc_insertion_point(field_mutable_list:chat.CreateGroup.membersID)
  return &membersid_;
}

inline const CreateGroup* CreateGroup::internal_default_instance() {
  return &CreateGroup_default_instance_.get();
}
// -------------------------------------------------------------------

// CreateGroupRes

// optional string toUserID_outer = 1;
inline void CreateGroupRes::clear_touserid_outer() {
  touserid_outer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateGroupRes::touserid_outer() const {
  // @@protoc_insertion_point(field_get:chat.CreateGroupRes.toUserID_outer)
  return touserid_outer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateGroupRes::set_touserid_outer(const ::std::string& value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.CreateGroupRes.toUserID_outer)
}
inline void CreateGroupRes::set_touserid_outer(const char* value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.CreateGroupRes.toUserID_outer)
}
inline void CreateGroupRes::set_touserid_outer(const char* value, size_t size) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.CreateGroupRes.toUserID_outer)
}
inline ::std::string* CreateGroupRes::mutable_touserid_outer() {
  
  // @@protoc_insertion_point(field_mutable:chat.CreateGroupRes.toUserID_outer)
  return touserid_outer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateGroupRes::release_touserid_outer() {
  // @@protoc_insertion_point(field_release:chat.CreateGroupRes.toUserID_outer)
  
  return touserid_outer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateGroupRes::set_allocated_touserid_outer(::std::string* touserid_outer) {
  if (touserid_outer != NULL) {
    
  } else {
    
  }
  touserid_outer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), touserid_outer);
  // @@protoc_insertion_point(field_set_allocated:chat.CreateGroupRes.toUserID_outer)
}

// optional string nickname = 2;
inline void CreateGroupRes::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateGroupRes::nickname() const {
  // @@protoc_insertion_point(field_get:chat.CreateGroupRes.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateGroupRes::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.CreateGroupRes.nickname)
}
inline void CreateGroupRes::set_nickname(const char* value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.CreateGroupRes.nickname)
}
inline void CreateGroupRes::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.CreateGroupRes.nickname)
}
inline ::std::string* CreateGroupRes::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:chat.CreateGroupRes.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateGroupRes::release_nickname() {
  // @@protoc_insertion_point(field_release:chat.CreateGroupRes.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateGroupRes::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:chat.CreateGroupRes.nickname)
}

// optional string toNodeID = 3;
inline void CreateGroupRes::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateGroupRes::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.CreateGroupRes.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateGroupRes::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.CreateGroupRes.toNodeID)
}
inline void CreateGroupRes::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.CreateGroupRes.toNodeID)
}
inline void CreateGroupRes::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.CreateGroupRes.toNodeID)
}
inline ::std::string* CreateGroupRes::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.CreateGroupRes.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateGroupRes::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.CreateGroupRes.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateGroupRes::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.CreateGroupRes.toNodeID)
}

inline const CreateGroupRes* CreateGroupRes::internal_default_instance() {
  return &CreateGroupRes_default_instance_.get();
}
// -------------------------------------------------------------------

// GroupAddMember

// optional string toNodeID = 1;
inline void GroupAddMember::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupAddMember::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.GroupAddMember.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupAddMember::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.GroupAddMember.toNodeID)
}
inline void GroupAddMember::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.GroupAddMember.toNodeID)
}
inline void GroupAddMember::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.GroupAddMember.toNodeID)
}
inline ::std::string* GroupAddMember::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.GroupAddMember.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupAddMember::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.GroupAddMember.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupAddMember::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.GroupAddMember.toNodeID)
}

// repeated string membersID = 2;
inline int GroupAddMember::membersid_size() const {
  return membersid_.size();
}
inline void GroupAddMember::clear_membersid() {
  membersid_.Clear();
}
inline const ::std::string& GroupAddMember::membersid(int index) const {
  // @@protoc_insertion_point(field_get:chat.GroupAddMember.membersID)
  return membersid_.Get(index);
}
inline ::std::string* GroupAddMember::mutable_membersid(int index) {
  // @@protoc_insertion_point(field_mutable:chat.GroupAddMember.membersID)
  return membersid_.Mutable(index);
}
inline void GroupAddMember::set_membersid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chat.GroupAddMember.membersID)
  membersid_.Mutable(index)->assign(value);
}
inline void GroupAddMember::set_membersid(int index, const char* value) {
  membersid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.GroupAddMember.membersID)
}
inline void GroupAddMember::set_membersid(int index, const char* value, size_t size) {
  membersid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.GroupAddMember.membersID)
}
inline ::std::string* GroupAddMember::add_membersid() {
  // @@protoc_insertion_point(field_add_mutable:chat.GroupAddMember.membersID)
  return membersid_.Add();
}
inline void GroupAddMember::add_membersid(const ::std::string& value) {
  membersid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chat.GroupAddMember.membersID)
}
inline void GroupAddMember::add_membersid(const char* value) {
  membersid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chat.GroupAddMember.membersID)
}
inline void GroupAddMember::add_membersid(const char* value, size_t size) {
  membersid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chat.GroupAddMember.membersID)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GroupAddMember::membersid() const {
  // @@protoc_insertion_point(field_list:chat.GroupAddMember.membersID)
  return membersid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GroupAddMember::mutable_membersid() {
  // @@protoc_insertion_point(field_mutable_list:chat.GroupAddMember.membersID)
  return &membersid_;
}

inline const GroupAddMember* GroupAddMember::internal_default_instance() {
  return &GroupAddMember_default_instance_.get();
}
// -------------------------------------------------------------------

// GroupAddMemberRes

// optional string toUserID_outer = 1;
inline void GroupAddMemberRes::clear_touserid_outer() {
  touserid_outer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupAddMemberRes::touserid_outer() const {
  // @@protoc_insertion_point(field_get:chat.GroupAddMemberRes.toUserID_outer)
  return touserid_outer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupAddMemberRes::set_touserid_outer(const ::std::string& value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.GroupAddMemberRes.toUserID_outer)
}
inline void GroupAddMemberRes::set_touserid_outer(const char* value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.GroupAddMemberRes.toUserID_outer)
}
inline void GroupAddMemberRes::set_touserid_outer(const char* value, size_t size) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.GroupAddMemberRes.toUserID_outer)
}
inline ::std::string* GroupAddMemberRes::mutable_touserid_outer() {
  
  // @@protoc_insertion_point(field_mutable:chat.GroupAddMemberRes.toUserID_outer)
  return touserid_outer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupAddMemberRes::release_touserid_outer() {
  // @@protoc_insertion_point(field_release:chat.GroupAddMemberRes.toUserID_outer)
  
  return touserid_outer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupAddMemberRes::set_allocated_touserid_outer(::std::string* touserid_outer) {
  if (touserid_outer != NULL) {
    
  } else {
    
  }
  touserid_outer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), touserid_outer);
  // @@protoc_insertion_point(field_set_allocated:chat.GroupAddMemberRes.toUserID_outer)
}

// optional string toNodeID = 2;
inline void GroupAddMemberRes::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupAddMemberRes::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.GroupAddMemberRes.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupAddMemberRes::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.GroupAddMemberRes.toNodeID)
}
inline void GroupAddMemberRes::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.GroupAddMemberRes.toNodeID)
}
inline void GroupAddMemberRes::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.GroupAddMemberRes.toNodeID)
}
inline ::std::string* GroupAddMemberRes::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.GroupAddMemberRes.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupAddMemberRes::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.GroupAddMemberRes.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupAddMemberRes::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.GroupAddMemberRes.toNodeID)
}

inline const GroupAddMemberRes* GroupAddMemberRes::internal_default_instance() {
  return &GroupAddMemberRes_default_instance_.get();
}
// -------------------------------------------------------------------

// NodeMessage

// optional string id = 1;
inline void NodeMessage::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeMessage::id() const {
  // @@protoc_insertion_point(field_get:chat.NodeMessage.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeMessage::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.NodeMessage.id)
}
inline void NodeMessage::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.NodeMessage.id)
}
inline void NodeMessage::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.NodeMessage.id)
}
inline ::std::string* NodeMessage::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:chat.NodeMessage.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeMessage::release_id() {
  // @@protoc_insertion_point(field_release:chat.NodeMessage.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeMessage::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:chat.NodeMessage.id)
}

// optional string fromUserID = 2;
inline void NodeMessage::clear_fromuserid() {
  fromuserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeMessage::fromuserid() const {
  // @@protoc_insertion_point(field_get:chat.NodeMessage.fromUserID)
  return fromuserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeMessage::set_fromuserid(const ::std::string& value) {
  
  fromuserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.NodeMessage.fromUserID)
}
inline void NodeMessage::set_fromuserid(const char* value) {
  
  fromuserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.NodeMessage.fromUserID)
}
inline void NodeMessage::set_fromuserid(const char* value, size_t size) {
  
  fromuserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.NodeMessage.fromUserID)
}
inline ::std::string* NodeMessage::mutable_fromuserid() {
  
  // @@protoc_insertion_point(field_mutable:chat.NodeMessage.fromUserID)
  return fromuserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeMessage::release_fromuserid() {
  // @@protoc_insertion_point(field_release:chat.NodeMessage.fromUserID)
  
  return fromuserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeMessage::set_allocated_fromuserid(::std::string* fromuserid) {
  if (fromuserid != NULL) {
    
  } else {
    
  }
  fromuserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromuserid);
  // @@protoc_insertion_point(field_set_allocated:chat.NodeMessage.fromUserID)
}

// optional string toNodeID = 3;
inline void NodeMessage::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeMessage::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.NodeMessage.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeMessage::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.NodeMessage.toNodeID)
}
inline void NodeMessage::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.NodeMessage.toNodeID)
}
inline void NodeMessage::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.NodeMessage.toNodeID)
}
inline ::std::string* NodeMessage::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.NodeMessage.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeMessage::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.NodeMessage.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeMessage::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.NodeMessage.toNodeID)
}

// optional int32 incrementID = 4;
inline void NodeMessage::clear_incrementid() {
  incrementid_ = 0;
}
inline ::google::protobuf::int32 NodeMessage::incrementid() const {
  // @@protoc_insertion_point(field_get:chat.NodeMessage.incrementID)
  return incrementid_;
}
inline void NodeMessage::set_incrementid(::google::protobuf::int32 value) {
  
  incrementid_ = value;
  // @@protoc_insertion_point(field_set:chat.NodeMessage.incrementID)
}

// optional .chat.MediaType type = 5;
inline void NodeMessage::clear_type() {
  type_ = 0;
}
inline ::chat::MediaType NodeMessage::type() const {
  // @@protoc_insertion_point(field_get:chat.NodeMessage.type)
  return static_cast< ::chat::MediaType >(type_);
}
inline void NodeMessage::set_type(::chat::MediaType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:chat.NodeMessage.type)
}

// optional string content = 6;
inline void NodeMessage::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeMessage::content() const {
  // @@protoc_insertion_point(field_get:chat.NodeMessage.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeMessage::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.NodeMessage.content)
}
inline void NodeMessage::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.NodeMessage.content)
}
inline void NodeMessage::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.NodeMessage.content)
}
inline ::std::string* NodeMessage::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:chat.NodeMessage.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeMessage::release_content() {
  // @@protoc_insertion_point(field_release:chat.NodeMessage.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeMessage::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:chat.NodeMessage.content)
}

// optional string toUserID_outer = 7;
inline void NodeMessage::clear_touserid_outer() {
  touserid_outer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeMessage::touserid_outer() const {
  // @@protoc_insertion_point(field_get:chat.NodeMessage.toUserID_outer)
  return touserid_outer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeMessage::set_touserid_outer(const ::std::string& value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.NodeMessage.toUserID_outer)
}
inline void NodeMessage::set_touserid_outer(const char* value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.NodeMessage.toUserID_outer)
}
inline void NodeMessage::set_touserid_outer(const char* value, size_t size) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.NodeMessage.toUserID_outer)
}
inline ::std::string* NodeMessage::mutable_touserid_outer() {
  
  // @@protoc_insertion_point(field_mutable:chat.NodeMessage.toUserID_outer)
  return touserid_outer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeMessage::release_touserid_outer() {
  // @@protoc_insertion_point(field_release:chat.NodeMessage.toUserID_outer)
  
  return touserid_outer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeMessage::set_allocated_touserid_outer(::std::string* touserid_outer) {
  if (touserid_outer != NULL) {
    
  } else {
    
  }
  touserid_outer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), touserid_outer);
  // @@protoc_insertion_point(field_set_allocated:chat.NodeMessage.toUserID_outer)
}

inline const NodeMessage* NodeMessage::internal_default_instance() {
  return &NodeMessage_default_instance_.get();
}
// -------------------------------------------------------------------

// NodeMessageRes

// optional string toNodeID = 2;
inline void NodeMessageRes::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeMessageRes::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.NodeMessageRes.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeMessageRes::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.NodeMessageRes.toNodeID)
}
inline void NodeMessageRes::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.NodeMessageRes.toNodeID)
}
inline void NodeMessageRes::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.NodeMessageRes.toNodeID)
}
inline ::std::string* NodeMessageRes::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.NodeMessageRes.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeMessageRes::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.NodeMessageRes.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeMessageRes::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.NodeMessageRes.toNodeID)
}

// optional int32 incrementID = 3;
inline void NodeMessageRes::clear_incrementid() {
  incrementid_ = 0;
}
inline ::google::protobuf::int32 NodeMessageRes::incrementid() const {
  // @@protoc_insertion_point(field_get:chat.NodeMessageRes.incrementID)
  return incrementid_;
}
inline void NodeMessageRes::set_incrementid(::google::protobuf::int32 value) {
  
  incrementid_ = value;
  // @@protoc_insertion_point(field_set:chat.NodeMessageRes.incrementID)
}

inline const NodeMessageRes* NodeMessageRes::internal_default_instance() {
  return &NodeMessageRes_default_instance_.get();
}
// -------------------------------------------------------------------

// NodeMessageNoti

// optional string toNodeID = 1;
inline void NodeMessageNoti::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeMessageNoti::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.NodeMessageNoti.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeMessageNoti::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.NodeMessageNoti.toNodeID)
}
inline void NodeMessageNoti::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.NodeMessageNoti.toNodeID)
}
inline void NodeMessageNoti::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.NodeMessageNoti.toNodeID)
}
inline ::std::string* NodeMessageNoti::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.NodeMessageNoti.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeMessageNoti::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.NodeMessageNoti.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeMessageNoti::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.NodeMessageNoti.toNodeID)
}

// optional int32 unreadIncrement = 2;
inline void NodeMessageNoti::clear_unreadincrement() {
  unreadincrement_ = 0;
}
inline ::google::protobuf::int32 NodeMessageNoti::unreadincrement() const {
  // @@protoc_insertion_point(field_get:chat.NodeMessageNoti.unreadIncrement)
  return unreadincrement_;
}
inline void NodeMessageNoti::set_unreadincrement(::google::protobuf::int32 value) {
  
  unreadincrement_ = value;
  // @@protoc_insertion_point(field_set:chat.NodeMessageNoti.unreadIncrement)
}

// optional string toUserID_outer = 3;
inline void NodeMessageNoti::clear_touserid_outer() {
  touserid_outer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeMessageNoti::touserid_outer() const {
  // @@protoc_insertion_point(field_get:chat.NodeMessageNoti.toUserID_outer)
  return touserid_outer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeMessageNoti::set_touserid_outer(const ::std::string& value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.NodeMessageNoti.toUserID_outer)
}
inline void NodeMessageNoti::set_touserid_outer(const char* value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.NodeMessageNoti.toUserID_outer)
}
inline void NodeMessageNoti::set_touserid_outer(const char* value, size_t size) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.NodeMessageNoti.toUserID_outer)
}
inline ::std::string* NodeMessageNoti::mutable_touserid_outer() {
  
  // @@protoc_insertion_point(field_mutable:chat.NodeMessageNoti.toUserID_outer)
  return touserid_outer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeMessageNoti::release_touserid_outer() {
  // @@protoc_insertion_point(field_release:chat.NodeMessageNoti.toUserID_outer)
  
  return touserid_outer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeMessageNoti::set_allocated_touserid_outer(::std::string* touserid_outer) {
  if (touserid_outer != NULL) {
    
  } else {
    
  }
  touserid_outer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), touserid_outer);
  // @@protoc_insertion_point(field_set_allocated:chat.NodeMessageNoti.toUserID_outer)
}

inline const NodeMessageNoti* NodeMessageNoti::internal_default_instance() {
  return &NodeMessageNoti_default_instance_.get();
}
// -------------------------------------------------------------------

// setReadMessage

// optional string toNodeID = 1;
inline void setReadMessage::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& setReadMessage::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.setReadMessage.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void setReadMessage::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.setReadMessage.toNodeID)
}
inline void setReadMessage::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.setReadMessage.toNodeID)
}
inline void setReadMessage::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.setReadMessage.toNodeID)
}
inline ::std::string* setReadMessage::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.setReadMessage.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* setReadMessage::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.setReadMessage.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void setReadMessage::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.setReadMessage.toNodeID)
}

// optional int32 readedIncrement = 2;
inline void setReadMessage::clear_readedincrement() {
  readedincrement_ = 0;
}
inline ::google::protobuf::int32 setReadMessage::readedincrement() const {
  // @@protoc_insertion_point(field_get:chat.setReadMessage.readedIncrement)
  return readedincrement_;
}
inline void setReadMessage::set_readedincrement(::google::protobuf::int32 value) {
  
  readedincrement_ = value;
  // @@protoc_insertion_point(field_set:chat.setReadMessage.readedIncrement)
}

inline const setReadMessage* setReadMessage::internal_default_instance() {
  return &setReadMessage_default_instance_.get();
}
// -------------------------------------------------------------------

// QueryMessage

// optional string toNodeID = 1;
inline void QueryMessage::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryMessage::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.QueryMessage.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryMessage::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryMessage.toNodeID)
}
inline void QueryMessage::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryMessage.toNodeID)
}
inline void QueryMessage::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryMessage.toNodeID)
}
inline ::std::string* QueryMessage::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryMessage.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryMessage::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.QueryMessage.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryMessage::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryMessage.toNodeID)
}

// optional int32 fromIncrementID = 2;
inline void QueryMessage::clear_fromincrementid() {
  fromincrementid_ = 0;
}
inline ::google::protobuf::int32 QueryMessage::fromincrementid() const {
  // @@protoc_insertion_point(field_get:chat.QueryMessage.fromIncrementID)
  return fromincrementid_;
}
inline void QueryMessage::set_fromincrementid(::google::protobuf::int32 value) {
  
  fromincrementid_ = value;
  // @@protoc_insertion_point(field_set:chat.QueryMessage.fromIncrementID)
}

// optional int32 toIncrementID = 3;
inline void QueryMessage::clear_toincrementid() {
  toincrementid_ = 0;
}
inline ::google::protobuf::int32 QueryMessage::toincrementid() const {
  // @@protoc_insertion_point(field_get:chat.QueryMessage.toIncrementID)
  return toincrementid_;
}
inline void QueryMessage::set_toincrementid(::google::protobuf::int32 value) {
  
  toincrementid_ = value;
  // @@protoc_insertion_point(field_set:chat.QueryMessage.toIncrementID)
}

inline const QueryMessage* QueryMessage::internal_default_instance() {
  return &QueryMessage_default_instance_.get();
}
// -------------------------------------------------------------------

// QueryOneMessage

// optional string toNodeID = 1;
inline void QueryOneMessage::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryOneMessage::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.QueryOneMessage.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryOneMessage::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryOneMessage.toNodeID)
}
inline void QueryOneMessage::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryOneMessage.toNodeID)
}
inline void QueryOneMessage::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryOneMessage.toNodeID)
}
inline ::std::string* QueryOneMessage::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryOneMessage.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryOneMessage::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.QueryOneMessage.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryOneMessage::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryOneMessage.toNodeID)
}

// optional int32 incrementID = 2;
inline void QueryOneMessage::clear_incrementid() {
  incrementid_ = 0;
}
inline ::google::protobuf::int32 QueryOneMessage::incrementid() const {
  // @@protoc_insertion_point(field_get:chat.QueryOneMessage.incrementID)
  return incrementid_;
}
inline void QueryOneMessage::set_incrementid(::google::protobuf::int32 value) {
  
  incrementid_ = value;
  // @@protoc_insertion_point(field_set:chat.QueryOneMessage.incrementID)
}

inline const QueryOneMessage* QueryOneMessage::internal_default_instance() {
  return &QueryOneMessage_default_instance_.get();
}
// -------------------------------------------------------------------

// ServerConnect

// optional string serverName = 1;
inline void ServerConnect::clear_servername() {
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerConnect::servername() const {
  // @@protoc_insertion_point(field_get:chat.ServerConnect.serverName)
  return servername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConnect::set_servername(const ::std::string& value) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ServerConnect.serverName)
}
inline void ServerConnect::set_servername(const char* value) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ServerConnect.serverName)
}
inline void ServerConnect::set_servername(const char* value, size_t size) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ServerConnect.serverName)
}
inline ::std::string* ServerConnect::mutable_servername() {
  
  // @@protoc_insertion_point(field_mutable:chat.ServerConnect.serverName)
  return servername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConnect::release_servername() {
  // @@protoc_insertion_point(field_release:chat.ServerConnect.serverName)
  
  return servername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConnect::set_allocated_servername(::std::string* servername) {
  if (servername != NULL) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:chat.ServerConnect.serverName)
}

// optional string serverIP = 2;
inline void ServerConnect::clear_serverip() {
  serverip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerConnect::serverip() const {
  // @@protoc_insertion_point(field_get:chat.ServerConnect.serverIP)
  return serverip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConnect::set_serverip(const ::std::string& value) {
  
  serverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ServerConnect.serverIP)
}
inline void ServerConnect::set_serverip(const char* value) {
  
  serverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ServerConnect.serverIP)
}
inline void ServerConnect::set_serverip(const char* value, size_t size) {
  
  serverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ServerConnect.serverIP)
}
inline ::std::string* ServerConnect::mutable_serverip() {
  
  // @@protoc_insertion_point(field_mutable:chat.ServerConnect.serverIP)
  return serverip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConnect::release_serverip() {
  // @@protoc_insertion_point(field_release:chat.ServerConnect.serverIP)
  
  return serverip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConnect::set_allocated_serverip(::std::string* serverip) {
  if (serverip != NULL) {
    
  } else {
    
  }
  serverip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serverip);
  // @@protoc_insertion_point(field_set_allocated:chat.ServerConnect.serverIP)
}

inline const ServerConnect* ServerConnect::internal_default_instance() {
  return &ServerConnect_default_instance_.get();
}
// -------------------------------------------------------------------

// ServerDisconnect

// optional string serverName = 1;
inline void ServerDisconnect::clear_servername() {
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerDisconnect::servername() const {
  // @@protoc_insertion_point(field_get:chat.ServerDisconnect.serverName)
  return servername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerDisconnect::set_servername(const ::std::string& value) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ServerDisconnect.serverName)
}
inline void ServerDisconnect::set_servername(const char* value) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ServerDisconnect.serverName)
}
inline void ServerDisconnect::set_servername(const char* value, size_t size) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ServerDisconnect.serverName)
}
inline ::std::string* ServerDisconnect::mutable_servername() {
  
  // @@protoc_insertion_point(field_mutable:chat.ServerDisconnect.serverName)
  return servername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerDisconnect::release_servername() {
  // @@protoc_insertion_point(field_release:chat.ServerDisconnect.serverName)
  
  return servername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerDisconnect::set_allocated_servername(::std::string* servername) {
  if (servername != NULL) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:chat.ServerDisconnect.serverName)
}

// optional string serverIP = 2;
inline void ServerDisconnect::clear_serverip() {
  serverip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerDisconnect::serverip() const {
  // @@protoc_insertion_point(field_get:chat.ServerDisconnect.serverIP)
  return serverip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerDisconnect::set_serverip(const ::std::string& value) {
  
  serverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ServerDisconnect.serverIP)
}
inline void ServerDisconnect::set_serverip(const char* value) {
  
  serverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ServerDisconnect.serverIP)
}
inline void ServerDisconnect::set_serverip(const char* value, size_t size) {
  
  serverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ServerDisconnect.serverIP)
}
inline ::std::string* ServerDisconnect::mutable_serverip() {
  
  // @@protoc_insertion_point(field_mutable:chat.ServerDisconnect.serverIP)
  return serverip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerDisconnect::release_serverip() {
  // @@protoc_insertion_point(field_release:chat.ServerDisconnect.serverIP)
  
  return serverip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerDisconnect::set_allocated_serverip(::std::string* serverip) {
  if (serverip != NULL) {
    
  } else {
    
  }
  serverip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serverip);
  // @@protoc_insertion_point(field_set_allocated:chat.ServerDisconnect.serverIP)
}

inline const ServerDisconnect* ServerDisconnect::internal_default_instance() {
  return &ServerDisconnect_default_instance_.get();
}
// -------------------------------------------------------------------

// ConnectInfo

// optional string UUID = 1;
inline void ConnectInfo::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectInfo::uuid() const {
  // @@protoc_insertion_point(field_get:chat.ConnectInfo.UUID)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectInfo::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ConnectInfo.UUID)
}
inline void ConnectInfo::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ConnectInfo.UUID)
}
inline void ConnectInfo::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ConnectInfo.UUID)
}
inline ::std::string* ConnectInfo::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:chat.ConnectInfo.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectInfo::release_uuid() {
  // @@protoc_insertion_point(field_release:chat.ConnectInfo.UUID)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectInfo::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:chat.ConnectInfo.UUID)
}

// optional string userID = 2;
inline void ConnectInfo::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectInfo::userid() const {
  // @@protoc_insertion_point(field_get:chat.ConnectInfo.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectInfo::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ConnectInfo.userID)
}
inline void ConnectInfo::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ConnectInfo.userID)
}
inline void ConnectInfo::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ConnectInfo.userID)
}
inline ::std::string* ConnectInfo::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:chat.ConnectInfo.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectInfo::release_userid() {
  // @@protoc_insertion_point(field_release:chat.ConnectInfo.userID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectInfo::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:chat.ConnectInfo.userID)
}

// optional bool isLogin = 3;
inline void ConnectInfo::clear_islogin() {
  islogin_ = false;
}
inline bool ConnectInfo::islogin() const {
  // @@protoc_insertion_point(field_get:chat.ConnectInfo.isLogin)
  return islogin_;
}
inline void ConnectInfo::set_islogin(bool value) {
  
  islogin_ = value;
  // @@protoc_insertion_point(field_set:chat.ConnectInfo.isLogin)
}

// optional bool isConnected = 4;
inline void ConnectInfo::clear_isconnected() {
  isconnected_ = false;
}
inline bool ConnectInfo::isconnected() const {
  // @@protoc_insertion_point(field_get:chat.ConnectInfo.isConnected)
  return isconnected_;
}
inline void ConnectInfo::set_isconnected(bool value) {
  
  isconnected_ = value;
  // @@protoc_insertion_point(field_set:chat.ConnectInfo.isConnected)
}

// optional bool isReciveNoti = 5;
inline void ConnectInfo::clear_isrecivenoti() {
  isrecivenoti_ = false;
}
inline bool ConnectInfo::isrecivenoti() const {
  // @@protoc_insertion_point(field_get:chat.ConnectInfo.isReciveNoti)
  return isrecivenoti_;
}
inline void ConnectInfo::set_isrecivenoti(bool value) {
  
  isrecivenoti_ = value;
  // @@protoc_insertion_point(field_set:chat.ConnectInfo.isReciveNoti)
}

// optional string serverName = 6;
inline void ConnectInfo::clear_servername() {
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectInfo::servername() const {
  // @@protoc_insertion_point(field_get:chat.ConnectInfo.serverName)
  return servername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectInfo::set_servername(const ::std::string& value) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ConnectInfo.serverName)
}
inline void ConnectInfo::set_servername(const char* value) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ConnectInfo.serverName)
}
inline void ConnectInfo::set_servername(const char* value, size_t size) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ConnectInfo.serverName)
}
inline ::std::string* ConnectInfo::mutable_servername() {
  
  // @@protoc_insertion_point(field_mutable:chat.ConnectInfo.serverName)
  return servername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectInfo::release_servername() {
  // @@protoc_insertion_point(field_release:chat.ConnectInfo.serverName)
  
  return servername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectInfo::set_allocated_servername(::std::string* servername) {
  if (servername != NULL) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:chat.ConnectInfo.serverName)
}

// map<string, int32> users = 8;
inline int ConnectInfo::users_size() const {
  return users_.size();
}
inline void ConnectInfo::clear_users() {
  users_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
ConnectInfo::users() const {
  // @@protoc_insertion_point(field_map:chat.ConnectInfo.users)
  return users_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
ConnectInfo::mutable_users() {
  // @@protoc_insertion_point(field_mutable_map:chat.ConnectInfo.users)
  return users_.MutableMap();
}

// optional string clientVersion = 9;
inline void ConnectInfo::clear_clientversion() {
  clientversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectInfo::clientversion() const {
  // @@protoc_insertion_point(field_get:chat.ConnectInfo.clientVersion)
  return clientversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectInfo::set_clientversion(const ::std::string& value) {
  
  clientversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ConnectInfo.clientVersion)
}
inline void ConnectInfo::set_clientversion(const char* value) {
  
  clientversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ConnectInfo.clientVersion)
}
inline void ConnectInfo::set_clientversion(const char* value, size_t size) {
  
  clientversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ConnectInfo.clientVersion)
}
inline ::std::string* ConnectInfo::mutable_clientversion() {
  
  // @@protoc_insertion_point(field_mutable:chat.ConnectInfo.clientVersion)
  return clientversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectInfo::release_clientversion() {
  // @@protoc_insertion_point(field_release:chat.ConnectInfo.clientVersion)
  
  return clientversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectInfo::set_allocated_clientversion(::std::string* clientversion) {
  if (clientversion != NULL) {
    
  } else {
    
  }
  clientversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientversion);
  // @@protoc_insertion_point(field_set_allocated:chat.ConnectInfo.clientVersion)
}

// optional string OSVersion = 10;
inline void ConnectInfo::clear_osversion() {
  osversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectInfo::osversion() const {
  // @@protoc_insertion_point(field_get:chat.ConnectInfo.OSVersion)
  return osversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectInfo::set_osversion(const ::std::string& value) {
  
  osversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ConnectInfo.OSVersion)
}
inline void ConnectInfo::set_osversion(const char* value) {
  
  osversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ConnectInfo.OSVersion)
}
inline void ConnectInfo::set_osversion(const char* value, size_t size) {
  
  osversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ConnectInfo.OSVersion)
}
inline ::std::string* ConnectInfo::mutable_osversion() {
  
  // @@protoc_insertion_point(field_mutable:chat.ConnectInfo.OSVersion)
  return osversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectInfo::release_osversion() {
  // @@protoc_insertion_point(field_release:chat.ConnectInfo.OSVersion)
  
  return osversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectInfo::set_allocated_osversion(::std::string* osversion) {
  if (osversion != NULL) {
    
  } else {
    
  }
  osversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), osversion);
  // @@protoc_insertion_point(field_set_allocated:chat.ConnectInfo.OSVersion)
}

// optional string appVersion = 11;
inline void ConnectInfo::clear_appversion() {
  appversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectInfo::appversion() const {
  // @@protoc_insertion_point(field_get:chat.ConnectInfo.appVersion)
  return appversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectInfo::set_appversion(const ::std::string& value) {
  
  appversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ConnectInfo.appVersion)
}
inline void ConnectInfo::set_appversion(const char* value) {
  
  appversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ConnectInfo.appVersion)
}
inline void ConnectInfo::set_appversion(const char* value, size_t size) {
  
  appversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ConnectInfo.appVersion)
}
inline ::std::string* ConnectInfo::mutable_appversion() {
  
  // @@protoc_insertion_point(field_mutable:chat.ConnectInfo.appVersion)
  return appversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectInfo::release_appversion() {
  // @@protoc_insertion_point(field_release:chat.ConnectInfo.appVersion)
  
  return appversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectInfo::set_allocated_appversion(::std::string* appversion) {
  if (appversion != NULL) {
    
  } else {
    
  }
  appversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appversion);
  // @@protoc_insertion_point(field_set_allocated:chat.ConnectInfo.appVersion)
}

// optional string timestamp = 12;
inline void ConnectInfo::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:chat.ConnectInfo.timestamp)
  return timestamp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectInfo::set_timestamp(const ::std::string& value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ConnectInfo.timestamp)
}
inline void ConnectInfo::set_timestamp(const char* value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ConnectInfo.timestamp)
}
inline void ConnectInfo::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ConnectInfo.timestamp)
}
inline ::std::string* ConnectInfo::mutable_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:chat.ConnectInfo.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectInfo::release_timestamp() {
  // @@protoc_insertion_point(field_release:chat.ConnectInfo.timestamp)
  
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectInfo::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:chat.ConnectInfo.timestamp)
}

inline const ConnectInfo* ConnectInfo::internal_default_instance() {
  return &ConnectInfo_default_instance_.get();
}
// -------------------------------------------------------------------

// ConnectInfoLittle

// optional string UUID = 1;
inline void ConnectInfoLittle::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectInfoLittle::uuid() const {
  // @@protoc_insertion_point(field_get:chat.ConnectInfoLittle.UUID)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectInfoLittle::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ConnectInfoLittle.UUID)
}
inline void ConnectInfoLittle::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ConnectInfoLittle.UUID)
}
inline void ConnectInfoLittle::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ConnectInfoLittle.UUID)
}
inline ::std::string* ConnectInfoLittle::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:chat.ConnectInfoLittle.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectInfoLittle::release_uuid() {
  // @@protoc_insertion_point(field_release:chat.ConnectInfoLittle.UUID)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectInfoLittle::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:chat.ConnectInfoLittle.UUID)
}

// optional bool isConnected = 2;
inline void ConnectInfoLittle::clear_isconnected() {
  isconnected_ = false;
}
inline bool ConnectInfoLittle::isconnected() const {
  // @@protoc_insertion_point(field_get:chat.ConnectInfoLittle.isConnected)
  return isconnected_;
}
inline void ConnectInfoLittle::set_isconnected(bool value) {
  
  isconnected_ = value;
  // @@protoc_insertion_point(field_set:chat.ConnectInfoLittle.isConnected)
}

// optional bool isReciveNoti = 3;
inline void ConnectInfoLittle::clear_isrecivenoti() {
  isrecivenoti_ = false;
}
inline bool ConnectInfoLittle::isrecivenoti() const {
  // @@protoc_insertion_point(field_get:chat.ConnectInfoLittle.isReciveNoti)
  return isrecivenoti_;
}
inline void ConnectInfoLittle::set_isrecivenoti(bool value) {
  
  isrecivenoti_ = value;
  // @@protoc_insertion_point(field_set:chat.ConnectInfoLittle.isReciveNoti)
}

// optional int64 nodepointor = 4;
inline void ConnectInfoLittle::clear_nodepointor() {
  nodepointor_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ConnectInfoLittle::nodepointor() const {
  // @@protoc_insertion_point(field_get:chat.ConnectInfoLittle.nodepointor)
  return nodepointor_;
}
inline void ConnectInfoLittle::set_nodepointor(::google::protobuf::int64 value) {
  
  nodepointor_ = value;
  // @@protoc_insertion_point(field_set:chat.ConnectInfoLittle.nodepointor)
}

inline const ConnectInfoLittle* ConnectInfoLittle::internal_default_instance() {
  return &ConnectInfoLittle_default_instance_.get();
}
// -------------------------------------------------------------------

// Media

// optional string sha1 = 1;
inline void Media::clear_sha1() {
  sha1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Media::sha1() const {
  // @@protoc_insertion_point(field_get:chat.Media.sha1)
  return sha1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Media::set_sha1(const ::std::string& value) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Media.sha1)
}
inline void Media::set_sha1(const char* value) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Media.sha1)
}
inline void Media::set_sha1(const char* value, size_t size) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Media.sha1)
}
inline ::std::string* Media::mutable_sha1() {
  
  // @@protoc_insertion_point(field_mutable:chat.Media.sha1)
  return sha1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Media::release_sha1() {
  // @@protoc_insertion_point(field_release:chat.Media.sha1)
  
  return sha1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Media::set_allocated_sha1(::std::string* sha1) {
  if (sha1 != NULL) {
    
  } else {
    
  }
  sha1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha1);
  // @@protoc_insertion_point(field_set_allocated:chat.Media.sha1)
}

// optional int32 nth = 2;
inline void Media::clear_nth() {
  nth_ = 0;
}
inline ::google::protobuf::int32 Media::nth() const {
  // @@protoc_insertion_point(field_get:chat.Media.nth)
  return nth_;
}
inline void Media::set_nth(::google::protobuf::int32 value) {
  
  nth_ = value;
  // @@protoc_insertion_point(field_set:chat.Media.nth)
}

// optional .chat.MediaType type = 3;
inline void Media::clear_type() {
  type_ = 0;
}
inline ::chat::MediaType Media::type() const {
  // @@protoc_insertion_point(field_get:chat.Media.type)
  return static_cast< ::chat::MediaType >(type_);
}
inline void Media::set_type(::chat::MediaType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:chat.Media.type)
}

// optional int32 length = 4;
inline void Media::clear_length() {
  length_ = 0;
}
inline ::google::protobuf::int32 Media::length() const {
  // @@protoc_insertion_point(field_get:chat.Media.length)
  return length_;
}
inline void Media::set_length(::google::protobuf::int32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:chat.Media.length)
}

// optional bytes content = 5;
inline void Media::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Media::content() const {
  // @@protoc_insertion_point(field_get:chat.Media.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Media::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Media.content)
}
inline void Media::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Media.content)
}
inline void Media::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Media.content)
}
inline ::std::string* Media::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:chat.Media.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Media::release_content() {
  // @@protoc_insertion_point(field_release:chat.Media.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Media::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:chat.Media.content)
}

inline const Media* Media::internal_default_instance() {
  return &Media_default_instance_.get();
}
// -------------------------------------------------------------------

// MediaRes

// optional string sha1 = 1;
inline void MediaRes::clear_sha1() {
  sha1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MediaRes::sha1() const {
  // @@protoc_insertion_point(field_get:chat.MediaRes.sha1)
  return sha1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MediaRes::set_sha1(const ::std::string& value) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.MediaRes.sha1)
}
inline void MediaRes::set_sha1(const char* value) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.MediaRes.sha1)
}
inline void MediaRes::set_sha1(const char* value, size_t size) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.MediaRes.sha1)
}
inline ::std::string* MediaRes::mutable_sha1() {
  
  // @@protoc_insertion_point(field_mutable:chat.MediaRes.sha1)
  return sha1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MediaRes::release_sha1() {
  // @@protoc_insertion_point(field_release:chat.MediaRes.sha1)
  
  return sha1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MediaRes::set_allocated_sha1(::std::string* sha1) {
  if (sha1 != NULL) {
    
  } else {
    
  }
  sha1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha1);
  // @@protoc_insertion_point(field_set_allocated:chat.MediaRes.sha1)
}

// optional int32 nth = 2;
inline void MediaRes::clear_nth() {
  nth_ = 0;
}
inline ::google::protobuf::int32 MediaRes::nth() const {
  // @@protoc_insertion_point(field_get:chat.MediaRes.nth)
  return nth_;
}
inline void MediaRes::set_nth(::google::protobuf::int32 value) {
  
  nth_ = value;
  // @@protoc_insertion_point(field_set:chat.MediaRes.nth)
}

// optional .chat.MediaType type = 3;
inline void MediaRes::clear_type() {
  type_ = 0;
}
inline ::chat::MediaType MediaRes::type() const {
  // @@protoc_insertion_point(field_get:chat.MediaRes.type)
  return static_cast< ::chat::MediaType >(type_);
}
inline void MediaRes::set_type(::chat::MediaType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:chat.MediaRes.type)
}

inline const MediaRes* MediaRes::internal_default_instance() {
  return &MediaRes_default_instance_.get();
}
// -------------------------------------------------------------------

// QueryMedia

// optional string sha1 = 1;
inline void QueryMedia::clear_sha1() {
  sha1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QueryMedia::sha1() const {
  // @@protoc_insertion_point(field_get:chat.QueryMedia.sha1)
  return sha1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryMedia::set_sha1(const ::std::string& value) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryMedia.sha1)
}
inline void QueryMedia::set_sha1(const char* value) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryMedia.sha1)
}
inline void QueryMedia::set_sha1(const char* value, size_t size) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryMedia.sha1)
}
inline ::std::string* QueryMedia::mutable_sha1() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryMedia.sha1)
  return sha1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryMedia::release_sha1() {
  // @@protoc_insertion_point(field_release:chat.QueryMedia.sha1)
  
  return sha1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryMedia::set_allocated_sha1(::std::string* sha1) {
  if (sha1 != NULL) {
    
  } else {
    
  }
  sha1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha1);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryMedia.sha1)
}

inline const QueryMedia* QueryMedia::internal_default_instance() {
  return &QueryMedia_default_instance_.get();
}
// -------------------------------------------------------------------

// MediaIsExist

// optional string sha1 = 1;
inline void MediaIsExist::clear_sha1() {
  sha1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MediaIsExist::sha1() const {
  // @@protoc_insertion_point(field_get:chat.MediaIsExist.sha1)
  return sha1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MediaIsExist::set_sha1(const ::std::string& value) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.MediaIsExist.sha1)
}
inline void MediaIsExist::set_sha1(const char* value) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.MediaIsExist.sha1)
}
inline void MediaIsExist::set_sha1(const char* value, size_t size) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.MediaIsExist.sha1)
}
inline ::std::string* MediaIsExist::mutable_sha1() {
  
  // @@protoc_insertion_point(field_mutable:chat.MediaIsExist.sha1)
  return sha1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MediaIsExist::release_sha1() {
  // @@protoc_insertion_point(field_release:chat.MediaIsExist.sha1)
  
  return sha1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MediaIsExist::set_allocated_sha1(::std::string* sha1) {
  if (sha1 != NULL) {
    
  } else {
    
  }
  sha1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha1);
  // @@protoc_insertion_point(field_set_allocated:chat.MediaIsExist.sha1)
}

inline const MediaIsExist* MediaIsExist::internal_default_instance() {
  return &MediaIsExist_default_instance_.get();
}
// -------------------------------------------------------------------

// MediaIsExistRes

// optional bool isExist = 1;
inline void MediaIsExistRes::clear_isexist() {
  isexist_ = false;
}
inline bool MediaIsExistRes::isexist() const {
  // @@protoc_insertion_point(field_get:chat.MediaIsExistRes.isExist)
  return isexist_;
}
inline void MediaIsExistRes::set_isexist(bool value) {
  
  isexist_ = value;
  // @@protoc_insertion_point(field_set:chat.MediaIsExistRes.isExist)
}

inline const MediaIsExistRes* MediaIsExistRes::internal_default_instance() {
  return &MediaIsExistRes_default_instance_.get();
}
// -------------------------------------------------------------------

// MediaCheck

// optional string sha1 = 1;
inline void MediaCheck::clear_sha1() {
  sha1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MediaCheck::sha1() const {
  // @@protoc_insertion_point(field_get:chat.MediaCheck.sha1)
  return sha1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MediaCheck::set_sha1(const ::std::string& value) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.MediaCheck.sha1)
}
inline void MediaCheck::set_sha1(const char* value) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.MediaCheck.sha1)
}
inline void MediaCheck::set_sha1(const char* value, size_t size) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.MediaCheck.sha1)
}
inline ::std::string* MediaCheck::mutable_sha1() {
  
  // @@protoc_insertion_point(field_mutable:chat.MediaCheck.sha1)
  return sha1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MediaCheck::release_sha1() {
  // @@protoc_insertion_point(field_release:chat.MediaCheck.sha1)
  
  return sha1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MediaCheck::set_allocated_sha1(::std::string* sha1) {
  if (sha1 != NULL) {
    
  } else {
    
  }
  sha1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha1);
  // @@protoc_insertion_point(field_set_allocated:chat.MediaCheck.sha1)
}

inline const MediaCheck* MediaCheck::internal_default_instance() {
  return &MediaCheck_default_instance_.get();
}
// -------------------------------------------------------------------

// MediaCheckRes

// optional string sha1 = 1;
inline void MediaCheckRes::clear_sha1() {
  sha1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MediaCheckRes::sha1() const {
  // @@protoc_insertion_point(field_get:chat.MediaCheckRes.sha1)
  return sha1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MediaCheckRes::set_sha1(const ::std::string& value) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.MediaCheckRes.sha1)
}
inline void MediaCheckRes::set_sha1(const char* value) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.MediaCheckRes.sha1)
}
inline void MediaCheckRes::set_sha1(const char* value, size_t size) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.MediaCheckRes.sha1)
}
inline ::std::string* MediaCheckRes::mutable_sha1() {
  
  // @@protoc_insertion_point(field_mutable:chat.MediaCheckRes.sha1)
  return sha1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MediaCheckRes::release_sha1() {
  // @@protoc_insertion_point(field_release:chat.MediaCheckRes.sha1)
  
  return sha1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MediaCheckRes::set_allocated_sha1(::std::string* sha1) {
  if (sha1 != NULL) {
    
  } else {
    
  }
  sha1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha1);
  // @@protoc_insertion_point(field_set_allocated:chat.MediaCheckRes.sha1)
}

// optional bool isIntact = 2;
inline void MediaCheckRes::clear_isintact() {
  isintact_ = false;
}
inline bool MediaCheckRes::isintact() const {
  // @@protoc_insertion_point(field_get:chat.MediaCheckRes.isIntact)
  return isintact_;
}
inline void MediaCheckRes::set_isintact(bool value) {
  
  isintact_ = value;
  // @@protoc_insertion_point(field_set:chat.MediaCheckRes.isIntact)
}

inline const MediaCheckRes* MediaCheckRes::internal_default_instance() {
  return &MediaCheckRes_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::chat::Device_OperatingSystem> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::Device_OperatingSystem>() {
  return ::chat::Device_OperatingSystem_descriptor();
}
template <> struct is_proto_enum< ::chat::MessageNode_Authorize> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::MessageNode_Authorize>() {
  return ::chat::MessageNode_Authorize_descriptor();
}
template <> struct is_proto_enum< ::chat::IsAgree> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::IsAgree>() {
  return ::chat::IsAgree_descriptor();
}
template <> struct is_proto_enum< ::chat::MediaType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::chat::MediaType>() {
  return ::chat::MediaType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_chat_5fmessage_2eproto__INCLUDED
