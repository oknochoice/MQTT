// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chat_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace chat {

namespace {

const ::google::protobuf::Descriptor* ErrorNth_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ErrorNth_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalkList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalkList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalkList_NodemapEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AddFriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ping_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pong_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeSelfDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeSelfDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodePeerServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodePeerServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeSpecifiy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeSpecifiy_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;
const ::google::protobuf::Descriptor* Device_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Device_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Device_OperatingSystem_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MessageNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageNode_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageNode_Authorize_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  User_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryUserRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryUserRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryUserVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryUserVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryUserVersionRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryUserVersionRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryNodeRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryNodeRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryNodeVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryNodeVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryNodeVersionRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryNodeVersionRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* Register_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Register_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginNoti_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginNoti_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientConnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientConnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientConnectRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientConnectRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientDisConnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientDisConnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientDisConnectRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientDisConnectRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* Logout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Logout_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFriendRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFriendRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFriendNoti_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFriendNoti_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFriendAuthorize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFriendAuthorize_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFriendAuthorizeRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFriendAuthorizeRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFriendAuthorizeNoti_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFriendAuthorizeNoti_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryAddfriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryAddfriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryAddfriendInfoRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryAddfriendInfoRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateGroupRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateGroupRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupAddMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupAddMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupAddMemberRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupAddMemberRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeMessageRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeMessageRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeMessageNoti_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeMessageNoti_reflection_ = NULL;
const ::google::protobuf::Descriptor* setReadMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  setReadMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryOneMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryOneMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerConnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerConnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerDisconnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerDisconnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnectInfo_UsersEntry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ConnectInfoLittle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectInfoLittle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Media_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Media_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryMedia_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryMedia_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaIsExist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaIsExist_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaIsExistRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaIsExistRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaCheck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaCheck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MediaCheckRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MediaCheckRes_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* IsAgree_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MediaType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_chat_5fmessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_chat_5fmessage_2eproto() {
  protobuf_AddDesc_chat_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chat_message.proto");
  GOOGLE_CHECK(file != NULL);
  ErrorNth_descriptor_ = file->message_type(0);
  static const int ErrorNth_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorNth, maxnth_),
  };
  ErrorNth_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ErrorNth_descriptor_,
      ErrorNth::internal_default_instance(),
      ErrorNth_offsets_,
      -1,
      -1,
      -1,
      sizeof(ErrorNth),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorNth, _internal_metadata_));
  NodeInfo_descriptor_ = file->message_type(1);
  static const int NodeInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, readedincrementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, unreadincrementid_),
  };
  NodeInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeInfo_descriptor_,
      NodeInfo::internal_default_instance(),
      NodeInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(NodeInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeInfo, _internal_metadata_));
  TalkList_descriptor_ = file->message_type(2);
  static const int TalkList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkList, nodemap_),
  };
  TalkList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TalkList_descriptor_,
      TalkList::internal_default_instance(),
      TalkList_offsets_,
      -1,
      -1,
      -1,
      sizeof(TalkList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkList, _internal_metadata_));
  TalkList_NodemapEntry_descriptor_ = TalkList_descriptor_->nested_type(0);
  AddFriendInfo_descriptor_ = file->message_type(3);
  static const int AddFriendInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendInfo, info_),
  };
  AddFriendInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddFriendInfo_descriptor_,
      AddFriendInfo::internal_default_instance(),
      AddFriendInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(AddFriendInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendInfo, _internal_metadata_));
  Ping_descriptor_ = file->message_type(4);
  static const int Ping_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, msg_),
  };
  Ping_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Ping_descriptor_,
      Ping::internal_default_instance(),
      Ping_offsets_,
      -1,
      -1,
      -1,
      sizeof(Ping),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ping, _internal_metadata_));
  Pong_descriptor_ = file->message_type(5);
  static const int Pong_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pong, msg_),
  };
  Pong_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Pong_descriptor_,
      Pong::internal_default_instance(),
      Pong_offsets_,
      -1,
      -1,
      -1,
      sizeof(Pong),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pong, _internal_metadata_));
  NodeSelfDevice_descriptor_ = file->message_type(6);
  static const int NodeSelfDevice_offsets_[1] = {
  };
  NodeSelfDevice_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeSelfDevice_descriptor_,
      NodeSelfDevice::internal_default_instance(),
      NodeSelfDevice_offsets_,
      -1,
      -1,
      -1,
      sizeof(NodeSelfDevice),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeSelfDevice, _internal_metadata_));
  NodePeerServer_descriptor_ = file->message_type(7);
  static const int NodePeerServer_offsets_[1] = {
  };
  NodePeerServer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodePeerServer_descriptor_,
      NodePeerServer::internal_default_instance(),
      NodePeerServer_offsets_,
      -1,
      -1,
      -1,
      sizeof(NodePeerServer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodePeerServer, _internal_metadata_));
  NodeSpecifiy_descriptor_ = file->message_type(8);
  static const int NodeSpecifiy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeSpecifiy, tonodeid_),
  };
  NodeSpecifiy_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeSpecifiy_descriptor_,
      NodeSpecifiy::internal_default_instance(),
      NodeSpecifiy_offsets_,
      -1,
      -1,
      -1,
      sizeof(NodeSpecifiy),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeSpecifiy, _internal_metadata_));
  NodeUser_descriptor_ = file->message_type(9);
  static const int NodeUser_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeUser, touserid_),
  };
  NodeUser_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeUser_descriptor_,
      NodeUser::internal_default_instance(),
      NodeUser_offsets_,
      -1,
      -1,
      -1,
      sizeof(NodeUser),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeUser, _internal_metadata_));
  Error_descriptor_ = file->message_type(10);
  static const int Error_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, errnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, errmsg_),
  };
  Error_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Error_descriptor_,
      Error::internal_default_instance(),
      Error_offsets_,
      -1,
      -1,
      -1,
      sizeof(Error),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _internal_metadata_));
  Device_descriptor_ = file->message_type(11);
  static const int Device_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, devicemodel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, devicenickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, uuid_),
  };
  Device_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Device_descriptor_,
      Device::internal_default_instance(),
      Device_offsets_,
      -1,
      -1,
      -1,
      sizeof(Device),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, _internal_metadata_));
  Device_OperatingSystem_descriptor_ = Device_descriptor_->enum_type(0);
  MessageNode_descriptor_ = file->message_type(12);
  static const int MessageNode_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageNode, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageNode, authorize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageNode, creatorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageNode, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageNode, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageNode, managerids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageNode, members_),
  };
  MessageNode_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageNode_descriptor_,
      MessageNode::internal_default_instance(),
      MessageNode_offsets_,
      -1,
      -1,
      -1,
      sizeof(MessageNode),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageNode, _internal_metadata_));
  MessageNode_Authorize_descriptor_ = MessageNode_descriptor_->enum_type(0);
  UserInfo_descriptor_ = file->message_type(13);
  static const int UserInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, tonodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, userid_),
  };
  UserInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::internal_default_instance(),
      UserInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _internal_metadata_));
  User_descriptor_ = file->message_type(14);
  static const int User_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, realname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, ismale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, phoneno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, countrycode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, birthday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, blacklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, groupnodeids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, devices_),
  };
  User_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      User_descriptor_,
      User::internal_default_instance(),
      User_offsets_,
      -1,
      -1,
      -1,
      sizeof(User),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _internal_metadata_));
  QueryUser_descriptor_ = file->message_type(15);
  static const int QueryUser_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUser, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUser, countrycode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUser, phoneno_),
  };
  QueryUser_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryUser_descriptor_,
      QueryUser::internal_default_instance(),
      QueryUser_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueryUser),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUser, _internal_metadata_));
  QueryUserRes_descriptor_ = file->message_type(16);
  static const int QueryUserRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserRes, touserid_outer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserRes, user_),
  };
  QueryUserRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryUserRes_descriptor_,
      QueryUserRes::internal_default_instance(),
      QueryUserRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueryUserRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserRes, _internal_metadata_));
  QueryUserVersion_descriptor_ = file->message_type(17);
  static const int QueryUserVersion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserVersion, userid_),
  };
  QueryUserVersion_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryUserVersion_descriptor_,
      QueryUserVersion::internal_default_instance(),
      QueryUserVersion_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueryUserVersion),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserVersion, _internal_metadata_));
  QueryUserVersionRes_descriptor_ = file->message_type(18);
  static const int QueryUserVersionRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserVersionRes, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserVersionRes, version_),
  };
  QueryUserVersionRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryUserVersionRes_descriptor_,
      QueryUserVersionRes::internal_default_instance(),
      QueryUserVersionRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueryUserVersionRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserVersionRes, _internal_metadata_));
  QueryNode_descriptor_ = file->message_type(19);
  static const int QueryNode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNode, tonodeid_),
  };
  QueryNode_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryNode_descriptor_,
      QueryNode::internal_default_instance(),
      QueryNode_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueryNode),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNode, _internal_metadata_));
  QueryNodeRes_descriptor_ = file->message_type(20);
  static const int QueryNodeRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNodeRes, touserid_outer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNodeRes, node_),
  };
  QueryNodeRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryNodeRes_descriptor_,
      QueryNodeRes::internal_default_instance(),
      QueryNodeRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueryNodeRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNodeRes, _internal_metadata_));
  QueryNodeVersion_descriptor_ = file->message_type(21);
  static const int QueryNodeVersion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNodeVersion, tonodeid_),
  };
  QueryNodeVersion_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryNodeVersion_descriptor_,
      QueryNodeVersion::internal_default_instance(),
      QueryNodeVersion_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueryNodeVersion),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNodeVersion, _internal_metadata_));
  QueryNodeVersionRes_descriptor_ = file->message_type(22);
  static const int QueryNodeVersionRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNodeVersionRes, tonodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNodeVersionRes, version_),
  };
  QueryNodeVersionRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryNodeVersionRes_descriptor_,
      QueryNodeVersionRes::internal_default_instance(),
      QueryNodeVersionRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueryNodeVersionRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryNodeVersionRes, _internal_metadata_));
  Register_descriptor_ = file->message_type(23);
  static const int Register_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, phoneno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, countrycode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, verifycode_),
  };
  Register_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Register_descriptor_,
      Register::internal_default_instance(),
      Register_offsets_,
      -1,
      -1,
      -1,
      sizeof(Register),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, _internal_metadata_));
  RegisterRes_descriptor_ = file->message_type(24);
  static const int RegisterRes_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRes, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRes, issuccess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRes, e_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRes, e_no_),
  };
  RegisterRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegisterRes_descriptor_,
      RegisterRes::internal_default_instance(),
      RegisterRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegisterRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterRes, _internal_metadata_));
  Login_descriptor_ = file->message_type(25);
  static const int Login_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, phoneno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, countrycode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, device_),
  };
  Login_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Login_descriptor_,
      Login::internal_default_instance(),
      Login_offsets_,
      -1,
      -1,
      -1,
      sizeof(Login),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _internal_metadata_));
  LoginRes_descriptor_ = file->message_type(26);
  static const int LoginRes_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRes, issuccess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRes, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRes, e_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRes, e_msg_),
  };
  LoginRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginRes_descriptor_,
      LoginRes::internal_default_instance(),
      LoginRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(LoginRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRes, _internal_metadata_));
  LoginNoti_descriptor_ = file->message_type(27);
  static const int LoginNoti_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginNoti, touserid_outer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginNoti, uuid_),
  };
  LoginNoti_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginNoti_descriptor_,
      LoginNoti::internal_default_instance(),
      LoginNoti_offsets_,
      -1,
      -1,
      -1,
      sizeof(LoginNoti),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginNoti, _internal_metadata_));
  ClientConnect_descriptor_ = file->message_type(28);
  static const int ClientConnect_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConnect, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConnect, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConnect, isrecivenoti_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConnect, osversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConnect, appversion_),
  };
  ClientConnect_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClientConnect_descriptor_,
      ClientConnect::internal_default_instance(),
      ClientConnect_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClientConnect),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConnect, _internal_metadata_));
  ClientConnectRes_descriptor_ = file->message_type(29);
  static const int ClientConnectRes_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConnectRes, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConnectRes, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConnectRes, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConnectRes, issuccess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConnectRes, e_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConnectRes, e_no_),
  };
  ClientConnectRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClientConnectRes_descriptor_,
      ClientConnectRes::internal_default_instance(),
      ClientConnectRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClientConnectRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientConnectRes, _internal_metadata_));
  ClientDisConnect_descriptor_ = file->message_type(30);
  static const int ClientDisConnect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDisConnect, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDisConnect, uuid_),
  };
  ClientDisConnect_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClientDisConnect_descriptor_,
      ClientDisConnect::internal_default_instance(),
      ClientDisConnect_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClientDisConnect),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDisConnect, _internal_metadata_));
  ClientDisConnectRes_descriptor_ = file->message_type(31);
  static const int ClientDisConnectRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDisConnectRes, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDisConnectRes, userid_),
  };
  ClientDisConnectRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClientDisConnectRes_descriptor_,
      ClientDisConnectRes::internal_default_instance(),
      ClientDisConnectRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(ClientDisConnectRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDisConnectRes, _internal_metadata_));
  Logout_descriptor_ = file->message_type(32);
  static const int Logout_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logout, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logout, uuid_),
  };
  Logout_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Logout_descriptor_,
      Logout::internal_default_instance(),
      Logout_offsets_,
      -1,
      -1,
      -1,
      sizeof(Logout),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logout, _internal_metadata_));
  LogoutRes_descriptor_ = file->message_type(33);
  static const int LogoutRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRes, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRes, userid_),
  };
  LogoutRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LogoutRes_descriptor_,
      LogoutRes::internal_default_instance(),
      LogoutRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(LogoutRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRes, _internal_metadata_));
  AddFriend_descriptor_ = file->message_type(34);
  static const int AddFriend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriend, inviteeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriend, inviterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriend, msg_),
  };
  AddFriend_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddFriend_descriptor_,
      AddFriend::internal_default_instance(),
      AddFriend_offsets_,
      -1,
      -1,
      -1,
      sizeof(AddFriend),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriend, _internal_metadata_));
  AddFriendRes_descriptor_ = file->message_type(35);
  static const int AddFriendRes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendRes, inviterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendRes, inviteeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendRes, tonodeid_),
  };
  AddFriendRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddFriendRes_descriptor_,
      AddFriendRes::internal_default_instance(),
      AddFriendRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(AddFriendRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendRes, _internal_metadata_));
  AddFriendNoti_descriptor_ = file->message_type(36);
  static const int AddFriendNoti_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendNoti, touserid_outer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendNoti, response_),
  };
  AddFriendNoti_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddFriendNoti_descriptor_,
      AddFriendNoti::internal_default_instance(),
      AddFriendNoti_offsets_,
      -1,
      -1,
      -1,
      sizeof(AddFriendNoti),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendNoti, _internal_metadata_));
  AddFriendAuthorize_descriptor_ = file->message_type(37);
  static const int AddFriendAuthorize_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendAuthorize, inviterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendAuthorize, inviteeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendAuthorize, isagree_),
  };
  AddFriendAuthorize_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddFriendAuthorize_descriptor_,
      AddFriendAuthorize::internal_default_instance(),
      AddFriendAuthorize_offsets_,
      -1,
      -1,
      -1,
      sizeof(AddFriendAuthorize),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendAuthorize, _internal_metadata_));
  AddFriendAuthorizeRes_descriptor_ = file->message_type(38);
  static const int AddFriendAuthorizeRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendAuthorizeRes, isagree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendAuthorizeRes, touserid_outer_),
  };
  AddFriendAuthorizeRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddFriendAuthorizeRes_descriptor_,
      AddFriendAuthorizeRes::internal_default_instance(),
      AddFriendAuthorizeRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(AddFriendAuthorizeRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendAuthorizeRes, _internal_metadata_));
  AddFriendAuthorizeNoti_descriptor_ = file->message_type(39);
  static const int AddFriendAuthorizeNoti_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendAuthorizeNoti, touserid_outer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendAuthorizeNoti, response_),
  };
  AddFriendAuthorizeNoti_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddFriendAuthorizeNoti_descriptor_,
      AddFriendAuthorizeNoti::internal_default_instance(),
      AddFriendAuthorizeNoti_offsets_,
      -1,
      -1,
      -1,
      sizeof(AddFriendAuthorizeNoti),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendAuthorizeNoti, _internal_metadata_));
  QueryAddfriendInfo_descriptor_ = file->message_type(40);
  static const int QueryAddfriendInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAddfriendInfo, count_),
  };
  QueryAddfriendInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryAddfriendInfo_descriptor_,
      QueryAddfriendInfo::internal_default_instance(),
      QueryAddfriendInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueryAddfriendInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAddfriendInfo, _internal_metadata_));
  QueryAddfriendInfoRes_descriptor_ = file->message_type(41);
  static const int QueryAddfriendInfoRes_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAddfriendInfoRes, inviter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAddfriendInfoRes, invitee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAddfriendInfoRes, tonodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAddfriendInfoRes, isend_),
  };
  QueryAddfriendInfoRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryAddfriendInfoRes_descriptor_,
      QueryAddfriendInfoRes::internal_default_instance(),
      QueryAddfriendInfoRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueryAddfriendInfoRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAddfriendInfoRes, _internal_metadata_));
  CreateGroup_descriptor_ = file->message_type(42);
  static const int CreateGroup_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroup, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroup, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroup, membersid_),
  };
  CreateGroup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateGroup_descriptor_,
      CreateGroup::internal_default_instance(),
      CreateGroup_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateGroup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroup, _internal_metadata_));
  CreateGroupRes_descriptor_ = file->message_type(43);
  static const int CreateGroupRes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRes, touserid_outer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRes, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRes, tonodeid_),
  };
  CreateGroupRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateGroupRes_descriptor_,
      CreateGroupRes::internal_default_instance(),
      CreateGroupRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateGroupRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGroupRes, _internal_metadata_));
  GroupAddMember_descriptor_ = file->message_type(44);
  static const int GroupAddMember_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAddMember, tonodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAddMember, membersid_),
  };
  GroupAddMember_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GroupAddMember_descriptor_,
      GroupAddMember::internal_default_instance(),
      GroupAddMember_offsets_,
      -1,
      -1,
      -1,
      sizeof(GroupAddMember),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAddMember, _internal_metadata_));
  GroupAddMemberRes_descriptor_ = file->message_type(45);
  static const int GroupAddMemberRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAddMemberRes, touserid_outer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAddMemberRes, tonodeid_),
  };
  GroupAddMemberRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GroupAddMemberRes_descriptor_,
      GroupAddMemberRes::internal_default_instance(),
      GroupAddMemberRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(GroupAddMemberRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAddMemberRes, _internal_metadata_));
  NodeMessage_descriptor_ = file->message_type(46);
  static const int NodeMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage, fromuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage, tonodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage, incrementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage, touserid_outer_),
  };
  NodeMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeMessage_descriptor_,
      NodeMessage::internal_default_instance(),
      NodeMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(NodeMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessage, _internal_metadata_));
  NodeMessageRes_descriptor_ = file->message_type(47);
  static const int NodeMessageRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessageRes, tonodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessageRes, incrementid_),
  };
  NodeMessageRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeMessageRes_descriptor_,
      NodeMessageRes::internal_default_instance(),
      NodeMessageRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(NodeMessageRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessageRes, _internal_metadata_));
  NodeMessageNoti_descriptor_ = file->message_type(48);
  static const int NodeMessageNoti_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessageNoti, tonodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessageNoti, unreadincrement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessageNoti, touserid_outer_),
  };
  NodeMessageNoti_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeMessageNoti_descriptor_,
      NodeMessageNoti::internal_default_instance(),
      NodeMessageNoti_offsets_,
      -1,
      -1,
      -1,
      sizeof(NodeMessageNoti),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMessageNoti, _internal_metadata_));
  setReadMessage_descriptor_ = file->message_type(49);
  static const int setReadMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(setReadMessage, tonodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(setReadMessage, readedincrement_),
  };
  setReadMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      setReadMessage_descriptor_,
      setReadMessage::internal_default_instance(),
      setReadMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(setReadMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(setReadMessage, _internal_metadata_));
  QueryMessage_descriptor_ = file->message_type(50);
  static const int QueryMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMessage, tonodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMessage, fromincrementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMessage, toincrementid_),
  };
  QueryMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryMessage_descriptor_,
      QueryMessage::internal_default_instance(),
      QueryMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueryMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMessage, _internal_metadata_));
  QueryOneMessage_descriptor_ = file->message_type(51);
  static const int QueryOneMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOneMessage, tonodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOneMessage, incrementid_),
  };
  QueryOneMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryOneMessage_descriptor_,
      QueryOneMessage::internal_default_instance(),
      QueryOneMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueryOneMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryOneMessage, _internal_metadata_));
  ServerConnect_descriptor_ = file->message_type(52);
  static const int ServerConnect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConnect, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConnect, serverip_),
  };
  ServerConnect_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerConnect_descriptor_,
      ServerConnect::internal_default_instance(),
      ServerConnect_offsets_,
      -1,
      -1,
      -1,
      sizeof(ServerConnect),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerConnect, _internal_metadata_));
  ServerDisconnect_descriptor_ = file->message_type(53);
  static const int ServerDisconnect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDisconnect, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDisconnect, serverip_),
  };
  ServerDisconnect_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServerDisconnect_descriptor_,
      ServerDisconnect::internal_default_instance(),
      ServerDisconnect_offsets_,
      -1,
      -1,
      -1,
      sizeof(ServerDisconnect),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerDisconnect, _internal_metadata_));
  ConnectInfo_descriptor_ = file->message_type(54);
  static const int ConnectInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectInfo, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectInfo, islogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectInfo, isconnected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectInfo, isrecivenoti_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectInfo, servername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectInfo, users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectInfo, clientversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectInfo, osversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectInfo, appversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectInfo, timestamp_),
  };
  ConnectInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConnectInfo_descriptor_,
      ConnectInfo::internal_default_instance(),
      ConnectInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConnectInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectInfo, _internal_metadata_));
  ConnectInfo_UsersEntry_descriptor_ = ConnectInfo_descriptor_->nested_type(0);
  ConnectInfoLittle_descriptor_ = file->message_type(55);
  static const int ConnectInfoLittle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectInfoLittle, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectInfoLittle, isconnected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectInfoLittle, isrecivenoti_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectInfoLittle, nodepointor_),
  };
  ConnectInfoLittle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConnectInfoLittle_descriptor_,
      ConnectInfoLittle::internal_default_instance(),
      ConnectInfoLittle_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConnectInfoLittle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectInfoLittle, _internal_metadata_));
  Media_descriptor_ = file->message_type(56);
  static const int Media_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Media, sha1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Media, nth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Media, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Media, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Media, content_),
  };
  Media_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Media_descriptor_,
      Media::internal_default_instance(),
      Media_offsets_,
      -1,
      -1,
      -1,
      sizeof(Media),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Media, _internal_metadata_));
  MediaRes_descriptor_ = file->message_type(57);
  static const int MediaRes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRes, sha1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRes, nth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRes, type_),
  };
  MediaRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MediaRes_descriptor_,
      MediaRes::internal_default_instance(),
      MediaRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(MediaRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaRes, _internal_metadata_));
  QueryMedia_descriptor_ = file->message_type(58);
  static const int QueryMedia_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMedia, sha1_),
  };
  QueryMedia_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QueryMedia_descriptor_,
      QueryMedia::internal_default_instance(),
      QueryMedia_offsets_,
      -1,
      -1,
      -1,
      sizeof(QueryMedia),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMedia, _internal_metadata_));
  MediaIsExist_descriptor_ = file->message_type(59);
  static const int MediaIsExist_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaIsExist, sha1_),
  };
  MediaIsExist_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MediaIsExist_descriptor_,
      MediaIsExist::internal_default_instance(),
      MediaIsExist_offsets_,
      -1,
      -1,
      -1,
      sizeof(MediaIsExist),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaIsExist, _internal_metadata_));
  MediaIsExistRes_descriptor_ = file->message_type(60);
  static const int MediaIsExistRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaIsExistRes, isexist_),
  };
  MediaIsExistRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MediaIsExistRes_descriptor_,
      MediaIsExistRes::internal_default_instance(),
      MediaIsExistRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(MediaIsExistRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaIsExistRes, _internal_metadata_));
  MediaCheck_descriptor_ = file->message_type(61);
  static const int MediaCheck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCheck, sha1_),
  };
  MediaCheck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MediaCheck_descriptor_,
      MediaCheck::internal_default_instance(),
      MediaCheck_offsets_,
      -1,
      -1,
      -1,
      sizeof(MediaCheck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCheck, _internal_metadata_));
  MediaCheckRes_descriptor_ = file->message_type(62);
  static const int MediaCheckRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCheckRes, sha1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCheckRes, isintact_),
  };
  MediaCheckRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MediaCheckRes_descriptor_,
      MediaCheckRes::internal_default_instance(),
      MediaCheckRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(MediaCheckRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MediaCheckRes, _internal_metadata_));
  IsAgree_descriptor_ = file->enum_type(0);
  MediaType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chat_5fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ErrorNth_descriptor_, ErrorNth::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeInfo_descriptor_, NodeInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TalkList_descriptor_, TalkList::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        TalkList_NodemapEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::chat::NodeInfo,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                TalkList_NodemapEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddFriendInfo_descriptor_, AddFriendInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Ping_descriptor_, Ping::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Pong_descriptor_, Pong::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeSelfDevice_descriptor_, NodeSelfDevice::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodePeerServer_descriptor_, NodePeerServer::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeSpecifiy_descriptor_, NodeSpecifiy::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeUser_descriptor_, NodeUser::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Error_descriptor_, Error::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Device_descriptor_, Device::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageNode_descriptor_, MessageNode::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserInfo_descriptor_, UserInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      User_descriptor_, User::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryUser_descriptor_, QueryUser::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryUserRes_descriptor_, QueryUserRes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryUserVersion_descriptor_, QueryUserVersion::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryUserVersionRes_descriptor_, QueryUserVersionRes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryNode_descriptor_, QueryNode::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryNodeRes_descriptor_, QueryNodeRes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryNodeVersion_descriptor_, QueryNodeVersion::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryNodeVersionRes_descriptor_, QueryNodeVersionRes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Register_descriptor_, Register::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegisterRes_descriptor_, RegisterRes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Login_descriptor_, Login::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginRes_descriptor_, LoginRes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginNoti_descriptor_, LoginNoti::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClientConnect_descriptor_, ClientConnect::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClientConnectRes_descriptor_, ClientConnectRes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClientDisConnect_descriptor_, ClientDisConnect::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClientDisConnectRes_descriptor_, ClientDisConnectRes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Logout_descriptor_, Logout::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LogoutRes_descriptor_, LogoutRes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddFriend_descriptor_, AddFriend::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddFriendRes_descriptor_, AddFriendRes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddFriendNoti_descriptor_, AddFriendNoti::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddFriendAuthorize_descriptor_, AddFriendAuthorize::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddFriendAuthorizeRes_descriptor_, AddFriendAuthorizeRes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddFriendAuthorizeNoti_descriptor_, AddFriendAuthorizeNoti::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryAddfriendInfo_descriptor_, QueryAddfriendInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryAddfriendInfoRes_descriptor_, QueryAddfriendInfoRes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateGroup_descriptor_, CreateGroup::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateGroupRes_descriptor_, CreateGroupRes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GroupAddMember_descriptor_, GroupAddMember::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GroupAddMemberRes_descriptor_, GroupAddMemberRes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeMessage_descriptor_, NodeMessage::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeMessageRes_descriptor_, NodeMessageRes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeMessageNoti_descriptor_, NodeMessageNoti::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      setReadMessage_descriptor_, setReadMessage::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryMessage_descriptor_, QueryMessage::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryOneMessage_descriptor_, QueryOneMessage::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerConnect_descriptor_, ServerConnect::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServerDisconnect_descriptor_, ServerDisconnect::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConnectInfo_descriptor_, ConnectInfo::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        ConnectInfo_UsersEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::std::string,
            ::google::protobuf::int32,
            ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            0>::CreateDefaultInstance(
                ConnectInfo_UsersEntry_descriptor_));
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConnectInfoLittle_descriptor_, ConnectInfoLittle::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Media_descriptor_, Media::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MediaRes_descriptor_, MediaRes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QueryMedia_descriptor_, QueryMedia::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MediaIsExist_descriptor_, MediaIsExist::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MediaIsExistRes_descriptor_, MediaIsExistRes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MediaCheck_descriptor_, MediaCheck::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MediaCheckRes_descriptor_, MediaCheckRes::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_chat_5fmessage_2eproto() {
  ErrorNth_default_instance_.Shutdown();
  delete ErrorNth_reflection_;
  NodeInfo_default_instance_.Shutdown();
  delete NodeInfo_reflection_;
  TalkList_default_instance_.Shutdown();
  delete TalkList_reflection_;
  AddFriendInfo_default_instance_.Shutdown();
  delete AddFriendInfo_reflection_;
  Ping_default_instance_.Shutdown();
  delete Ping_reflection_;
  Pong_default_instance_.Shutdown();
  delete Pong_reflection_;
  NodeSelfDevice_default_instance_.Shutdown();
  delete NodeSelfDevice_reflection_;
  NodePeerServer_default_instance_.Shutdown();
  delete NodePeerServer_reflection_;
  NodeSpecifiy_default_instance_.Shutdown();
  delete NodeSpecifiy_reflection_;
  NodeUser_default_instance_.Shutdown();
  delete NodeUser_reflection_;
  Error_default_instance_.Shutdown();
  delete Error_reflection_;
  Device_default_instance_.Shutdown();
  delete Device_reflection_;
  MessageNode_default_instance_.Shutdown();
  delete MessageNode_reflection_;
  UserInfo_default_instance_.Shutdown();
  delete UserInfo_reflection_;
  User_default_instance_.Shutdown();
  delete User_reflection_;
  QueryUser_default_instance_.Shutdown();
  delete QueryUser_reflection_;
  QueryUserRes_default_instance_.Shutdown();
  delete QueryUserRes_reflection_;
  QueryUserVersion_default_instance_.Shutdown();
  delete QueryUserVersion_reflection_;
  QueryUserVersionRes_default_instance_.Shutdown();
  delete QueryUserVersionRes_reflection_;
  QueryNode_default_instance_.Shutdown();
  delete QueryNode_reflection_;
  QueryNodeRes_default_instance_.Shutdown();
  delete QueryNodeRes_reflection_;
  QueryNodeVersion_default_instance_.Shutdown();
  delete QueryNodeVersion_reflection_;
  QueryNodeVersionRes_default_instance_.Shutdown();
  delete QueryNodeVersionRes_reflection_;
  Register_default_instance_.Shutdown();
  delete Register_reflection_;
  RegisterRes_default_instance_.Shutdown();
  delete RegisterRes_reflection_;
  Login_default_instance_.Shutdown();
  delete Login_reflection_;
  LoginRes_default_instance_.Shutdown();
  delete LoginRes_reflection_;
  LoginNoti_default_instance_.Shutdown();
  delete LoginNoti_reflection_;
  ClientConnect_default_instance_.Shutdown();
  delete ClientConnect_reflection_;
  ClientConnectRes_default_instance_.Shutdown();
  delete ClientConnectRes_reflection_;
  ClientDisConnect_default_instance_.Shutdown();
  delete ClientDisConnect_reflection_;
  ClientDisConnectRes_default_instance_.Shutdown();
  delete ClientDisConnectRes_reflection_;
  Logout_default_instance_.Shutdown();
  delete Logout_reflection_;
  LogoutRes_default_instance_.Shutdown();
  delete LogoutRes_reflection_;
  AddFriend_default_instance_.Shutdown();
  delete AddFriend_reflection_;
  AddFriendRes_default_instance_.Shutdown();
  delete AddFriendRes_reflection_;
  AddFriendNoti_default_instance_.Shutdown();
  delete AddFriendNoti_reflection_;
  AddFriendAuthorize_default_instance_.Shutdown();
  delete AddFriendAuthorize_reflection_;
  AddFriendAuthorizeRes_default_instance_.Shutdown();
  delete AddFriendAuthorizeRes_reflection_;
  AddFriendAuthorizeNoti_default_instance_.Shutdown();
  delete AddFriendAuthorizeNoti_reflection_;
  QueryAddfriendInfo_default_instance_.Shutdown();
  delete QueryAddfriendInfo_reflection_;
  QueryAddfriendInfoRes_default_instance_.Shutdown();
  delete QueryAddfriendInfoRes_reflection_;
  CreateGroup_default_instance_.Shutdown();
  delete CreateGroup_reflection_;
  CreateGroupRes_default_instance_.Shutdown();
  delete CreateGroupRes_reflection_;
  GroupAddMember_default_instance_.Shutdown();
  delete GroupAddMember_reflection_;
  GroupAddMemberRes_default_instance_.Shutdown();
  delete GroupAddMemberRes_reflection_;
  NodeMessage_default_instance_.Shutdown();
  delete NodeMessage_reflection_;
  NodeMessageRes_default_instance_.Shutdown();
  delete NodeMessageRes_reflection_;
  NodeMessageNoti_default_instance_.Shutdown();
  delete NodeMessageNoti_reflection_;
  setReadMessage_default_instance_.Shutdown();
  delete setReadMessage_reflection_;
  QueryMessage_default_instance_.Shutdown();
  delete QueryMessage_reflection_;
  QueryOneMessage_default_instance_.Shutdown();
  delete QueryOneMessage_reflection_;
  ServerConnect_default_instance_.Shutdown();
  delete ServerConnect_reflection_;
  ServerDisconnect_default_instance_.Shutdown();
  delete ServerDisconnect_reflection_;
  ConnectInfo_default_instance_.Shutdown();
  delete ConnectInfo_reflection_;
  ConnectInfoLittle_default_instance_.Shutdown();
  delete ConnectInfoLittle_reflection_;
  Media_default_instance_.Shutdown();
  delete Media_reflection_;
  MediaRes_default_instance_.Shutdown();
  delete MediaRes_reflection_;
  QueryMedia_default_instance_.Shutdown();
  delete QueryMedia_reflection_;
  MediaIsExist_default_instance_.Shutdown();
  delete MediaIsExist_reflection_;
  MediaIsExistRes_default_instance_.Shutdown();
  delete MediaIsExistRes_reflection_;
  MediaCheck_default_instance_.Shutdown();
  delete MediaCheck_reflection_;
  MediaCheckRes_default_instance_.Shutdown();
  delete MediaCheckRes_reflection_;
}

void protobuf_InitDefaults_chat_5fmessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ErrorNth_default_instance_.DefaultConstruct();
  NodeInfo_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TalkList_default_instance_.DefaultConstruct();
  AddFriendInfo_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Ping_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Pong_default_instance_.DefaultConstruct();
  NodeSelfDevice_default_instance_.DefaultConstruct();
  NodePeerServer_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  NodeSpecifiy_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  NodeUser_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Error_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Device_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MessageNode_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  UserInfo_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  User_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  QueryUser_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  QueryUserRes_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  QueryUserVersion_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  QueryUserVersionRes_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  QueryNode_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  QueryNodeRes_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  QueryNodeVersion_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  QueryNodeVersionRes_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Register_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RegisterRes_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Login_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  LoginRes_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  LoginNoti_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ClientConnect_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ClientConnectRes_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ClientDisConnect_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ClientDisConnectRes_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Logout_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  LogoutRes_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AddFriend_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AddFriendRes_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AddFriendNoti_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AddFriendAuthorize_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AddFriendAuthorizeRes_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AddFriendAuthorizeNoti_default_instance_.DefaultConstruct();
  QueryAddfriendInfo_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  QueryAddfriendInfoRes_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CreateGroup_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  CreateGroupRes_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  GroupAddMember_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  GroupAddMemberRes_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  NodeMessage_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  NodeMessageRes_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  NodeMessageNoti_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  setReadMessage_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  QueryMessage_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  QueryOneMessage_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ServerConnect_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ServerDisconnect_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ConnectInfo_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  ConnectInfoLittle_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Media_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MediaRes_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  QueryMedia_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MediaIsExist_default_instance_.DefaultConstruct();
  MediaIsExistRes_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MediaCheck_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  MediaCheckRes_default_instance_.DefaultConstruct();
  ErrorNth_default_instance_.get_mutable()->InitAsDefaultInstance();
  NodeInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  TalkList_default_instance_.get_mutable()->InitAsDefaultInstance();
  AddFriendInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  Ping_default_instance_.get_mutable()->InitAsDefaultInstance();
  Pong_default_instance_.get_mutable()->InitAsDefaultInstance();
  NodeSelfDevice_default_instance_.get_mutable()->InitAsDefaultInstance();
  NodePeerServer_default_instance_.get_mutable()->InitAsDefaultInstance();
  NodeSpecifiy_default_instance_.get_mutable()->InitAsDefaultInstance();
  NodeUser_default_instance_.get_mutable()->InitAsDefaultInstance();
  Error_default_instance_.get_mutable()->InitAsDefaultInstance();
  Device_default_instance_.get_mutable()->InitAsDefaultInstance();
  MessageNode_default_instance_.get_mutable()->InitAsDefaultInstance();
  UserInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  User_default_instance_.get_mutable()->InitAsDefaultInstance();
  QueryUser_default_instance_.get_mutable()->InitAsDefaultInstance();
  QueryUserRes_default_instance_.get_mutable()->InitAsDefaultInstance();
  QueryUserVersion_default_instance_.get_mutable()->InitAsDefaultInstance();
  QueryUserVersionRes_default_instance_.get_mutable()->InitAsDefaultInstance();
  QueryNode_default_instance_.get_mutable()->InitAsDefaultInstance();
  QueryNodeRes_default_instance_.get_mutable()->InitAsDefaultInstance();
  QueryNodeVersion_default_instance_.get_mutable()->InitAsDefaultInstance();
  QueryNodeVersionRes_default_instance_.get_mutable()->InitAsDefaultInstance();
  Register_default_instance_.get_mutable()->InitAsDefaultInstance();
  RegisterRes_default_instance_.get_mutable()->InitAsDefaultInstance();
  Login_default_instance_.get_mutable()->InitAsDefaultInstance();
  LoginRes_default_instance_.get_mutable()->InitAsDefaultInstance();
  LoginNoti_default_instance_.get_mutable()->InitAsDefaultInstance();
  ClientConnect_default_instance_.get_mutable()->InitAsDefaultInstance();
  ClientConnectRes_default_instance_.get_mutable()->InitAsDefaultInstance();
  ClientDisConnect_default_instance_.get_mutable()->InitAsDefaultInstance();
  ClientDisConnectRes_default_instance_.get_mutable()->InitAsDefaultInstance();
  Logout_default_instance_.get_mutable()->InitAsDefaultInstance();
  LogoutRes_default_instance_.get_mutable()->InitAsDefaultInstance();
  AddFriend_default_instance_.get_mutable()->InitAsDefaultInstance();
  AddFriendRes_default_instance_.get_mutable()->InitAsDefaultInstance();
  AddFriendNoti_default_instance_.get_mutable()->InitAsDefaultInstance();
  AddFriendAuthorize_default_instance_.get_mutable()->InitAsDefaultInstance();
  AddFriendAuthorizeRes_default_instance_.get_mutable()->InitAsDefaultInstance();
  AddFriendAuthorizeNoti_default_instance_.get_mutable()->InitAsDefaultInstance();
  QueryAddfriendInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  QueryAddfriendInfoRes_default_instance_.get_mutable()->InitAsDefaultInstance();
  CreateGroup_default_instance_.get_mutable()->InitAsDefaultInstance();
  CreateGroupRes_default_instance_.get_mutable()->InitAsDefaultInstance();
  GroupAddMember_default_instance_.get_mutable()->InitAsDefaultInstance();
  GroupAddMemberRes_default_instance_.get_mutable()->InitAsDefaultInstance();
  NodeMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
  NodeMessageRes_default_instance_.get_mutable()->InitAsDefaultInstance();
  NodeMessageNoti_default_instance_.get_mutable()->InitAsDefaultInstance();
  setReadMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
  QueryMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
  QueryOneMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
  ServerConnect_default_instance_.get_mutable()->InitAsDefaultInstance();
  ServerDisconnect_default_instance_.get_mutable()->InitAsDefaultInstance();
  ConnectInfo_default_instance_.get_mutable()->InitAsDefaultInstance();
  ConnectInfoLittle_default_instance_.get_mutable()->InitAsDefaultInstance();
  Media_default_instance_.get_mutable()->InitAsDefaultInstance();
  MediaRes_default_instance_.get_mutable()->InitAsDefaultInstance();
  QueryMedia_default_instance_.get_mutable()->InitAsDefaultInstance();
  MediaIsExist_default_instance_.get_mutable()->InitAsDefaultInstance();
  MediaIsExistRes_default_instance_.get_mutable()->InitAsDefaultInstance();
  MediaCheck_default_instance_.get_mutable()->InitAsDefaultInstance();
  MediaCheckRes_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_chat_5fmessage_2eproto_once_);
void protobuf_InitDefaults_chat_5fmessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_chat_5fmessage_2eproto_once_,
                 &protobuf_InitDefaults_chat_5fmessage_2eproto_impl);
}
void protobuf_AddDesc_chat_5fmessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_chat_5fmessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022chat_message.proto\022\004chat\"\032\n\010ErrorNth\022\016"
    "\n\006maxnth\030\001 \001(\005\"T\n\010NodeInfo\022\022\n\nupdatetime"
    "\030\001 \001(\005\022\031\n\021readedIncrementid\030\002 \001(\005\022\031\n\021unr"
    "eadIncrementid\030\003 \001(\005\"x\n\010TalkList\022,\n\007node"
    "map\030\001 \003(\0132\033.chat.TalkList.NodemapEntry\032>"
    "\n\014NodemapEntry\022\013\n\003key\030\001 \001(\t\022\035\n\005value\030\002 \001"
    "(\0132\016.chat.NodeInfo:\0028\001\":\n\rAddFriendInfo\022"
    ")\n\004info\030\001 \003(\0132\033.chat.QueryAddfriendInfoR"
    "es\"\023\n\004Ping\022\013\n\003msg\030\001 \001(\t\"\023\n\004Pong\022\013\n\003msg\030\001"
    " \001(\t\"\020\n\016NodeSelfDevice\"\020\n\016NodePeerServer"
    "\" \n\014NodeSpecifiy\022\020\n\010toNodeID\030\001 \001(\t\"\034\n\010No"
    "deUser\022\020\n\010toUserID\030\001 \001(\t\"\'\n\005Error\022\016\n\006err"
    "num\030\001 \001(\005\022\016\n\006errmsg\030\002 \001(\t\"\226\001\n\006Device\022(\n\002"
    "OS\030\001 \001(\0162\034.chat.Device.OperatingSystem\022\023"
    "\n\013deviceModel\030\002 \001(\t\022\026\n\016deviceNickname\030\003 "
    "\001(\t\022\014\n\004UUID\030\004 \001(\t\"\'\n\017OperatingSystem\022\007\n\003"
    "iOS\020\000\022\013\n\007Android\020\001\"\341\001\n\013MessageNode\022\n\n\002id"
    "\030\001 \001(\t\022.\n\tauthorize\030\002 \001(\0162\033.chat.Message"
    "Node.Authorize\022\021\n\tcreatorID\030\003 \001(\t\022\020\n\010nic"
    "kname\030\004 \001(\t\022\017\n\007version\030\005 \001(\005\022\022\n\nmanagerI"
    "Ds\030\006 \003(\t\022\017\n\007members\030\007 \003(\t\";\n\tAuthorize\022\013"
    "\n\007creator\020\000\022\013\n\007manager\020\001\022\n\n\006member\020\002\022\010\n\004"
    "peer\020\003\",\n\010UserInfo\022\020\n\010toNodeID\030\001 \001(\t\022\016\n\006"
    "userID\030\002 \001(\t\"\255\002\n\004User\022\n\n\002id\030\001 \001(\t\022\020\n\010rea"
    "lname\030\002 \001(\t\022\020\n\010nickname\030\003 \001(\t\022\014\n\004icon\030\004 "
    "\001(\t\022\023\n\013description\030\005 \001(\t\022\016\n\006isMale\030\006 \001(\010"
    "\022\017\n\007phoneNo\030\007 \001(\t\022\023\n\013countryCode\030\010 \001(\t\022\020"
    "\n\010password\030\t \001(\t\022\020\n\010birthday\030\n \001(\005\022\017\n\007ve"
    "rsion\030\013 \001(\005\022\037\n\007friends\030\014 \003(\0132\016.chat.User"
    "Info\022\021\n\tblacklist\030\r \003(\t\022\024\n\014groupNodeIDs\030"
    "\016 \003(\t\022\035\n\007devices\030\017 \003(\0132\014.chat.Device\"A\n\t"
    "QueryUser\022\016\n\006userID\030\001 \001(\t\022\023\n\013countryCode"
    "\030\002 \001(\t\022\017\n\007phoneNo\030\003 \001(\t\"@\n\014QueryUserRes\022"
    "\026\n\016toUserID_outer\030\001 \001(\t\022\030\n\004user\030\002 \001(\0132\n."
    "chat.User\"\"\n\020QueryUserVersion\022\016\n\006userID\030"
    "\001 \001(\t\"6\n\023QueryUserVersionRes\022\016\n\006userID\030\001"
    " \001(\t\022\017\n\007version\030\002 \001(\005\"\035\n\tQueryNode\022\020\n\010to"
    "NodeID\030\001 \001(\t\"G\n\014QueryNodeRes\022\026\n\016toUserID"
    "_outer\030\001 \001(\t\022\037\n\004node\030\002 \001(\0132\021.chat.Messag"
    "eNode\"$\n\020QueryNodeVersion\022\020\n\010toNodeID\030\001 "
    "\001(\t\"8\n\023QueryNodeVersionRes\022\020\n\010toNodeID\030\001"
    " \001(\t\022\017\n\007version\030\002 \001(\005\"h\n\010Register\022\017\n\007pho"
    "neNo\030\001 \001(\t\022\023\n\013countryCode\030\002 \001(\t\022\020\n\010passw"
    "ord\030\003 \001(\t\022\020\n\010nickname\030\004 \001(\t\022\022\n\nverifycod"
    "e\030\005 \001(\t\"M\n\013RegisterRes\022\016\n\006userID\030\001 \001(\t\022\021"
    "\n\tisSuccess\030\002 \001(\010\022\r\n\005e_msg\030\003 \001(\t\022\014\n\004e_no"
    "\030\004 \001(\005\"]\n\005Login\022\017\n\007phoneNo\030\001 \001(\t\022\023\n\013coun"
    "tryCode\030\002 \001(\t\022\020\n\010password\030\003 \001(\t\022\034\n\006devic"
    "e\030\004 \001(\0132\014.chat.Device\"J\n\010LoginRes\022\021\n\tisS"
    "uccess\030\001 \001(\010\022\016\n\006userID\030\002 \001(\t\022\014\n\004e_no\030\003 \001"
    "(\005\022\r\n\005e_msg\030\004 \001(\t\"1\n\tLoginNoti\022\026\n\016toUser"
    "ID_outer\030\001 \001(\t\022\014\n\004UUID\030\002 \001(\t\"j\n\rClientCo"
    "nnect\022\016\n\006userID\030\001 \001(\t\022\014\n\004UUID\030\002 \001(\t\022\024\n\014i"
    "sReciveNoti\030\003 \001(\010\022\021\n\tOSVersion\030\004 \001(\t\022\022\n\n"
    "appVersion\030\005 \001(\t\"s\n\020ClientConnectRes\022\014\n\004"
    "UUID\030\001 \001(\t\022\016\n\006userID\030\002 \001(\t\022\021\n\tsessionid\030"
    "\003 \001(\005\022\021\n\tisSuccess\030\004 \001(\010\022\r\n\005e_msg\030\005 \001(\t\022"
    "\014\n\004e_no\030\006 \001(\005\"0\n\020ClientDisConnect\022\016\n\006use"
    "rID\030\001 \001(\t\022\014\n\004UUID\030\002 \001(\t\"3\n\023ClientDisConn"
    "ectRes\022\014\n\004UUID\030\001 \001(\t\022\016\n\006userID\030\002 \001(\t\"&\n\006"
    "Logout\022\016\n\006userID\030\001 \001(\t\022\014\n\004UUID\030\002 \001(\t\")\n\t"
    "LogoutRes\022\014\n\004UUID\030\001 \001(\t\022\016\n\006userID\030\002 \001(\t\""
    ">\n\tAddFriend\022\021\n\tinviteeID\030\001 \001(\t\022\021\n\tinvit"
    "erID\030\002 \001(\t\022\013\n\003msg\030\003 \001(\t\"F\n\014AddFriendRes\022"
    "\021\n\tinviterID\030\001 \001(\t\022\021\n\tinviteeID\030\002 \001(\t\022\020\n"
    "\010toNodeID\030\003 \001(\t\"M\n\rAddFriendNoti\022\026\n\016toUs"
    "erID_outer\030\001 \001(\t\022$\n\010response\030\002 \001(\0132\022.cha"
    "t.AddFriendRes\"Z\n\022AddFriendAuthorize\022\021\n\t"
    "inviterID\030\001 \001(\t\022\021\n\tinviteeID\030\002 \001(\t\022\036\n\007is"
    "Agree\030\003 \001(\0162\r.chat.IsAgree\"O\n\025AddFriendA"
    "uthorizeRes\022\036\n\007isAgree\030\001 \001(\0162\r.chat.IsAg"
    "ree\022\026\n\016toUserID_outer\030\002 \001(\t\"\\\n\026AddFriend"
    "AuthorizeNoti\022\026\n\016toUserID_outer\030\001 \001(\t\022*\n"
    "\010response\030\002 \001(\0132\030.chat.AddFriendAuthoriz"
    "e\"#\n\022QueryAddfriendInfo\022\r\n\005count\030\001 \001(\005\"Z"
    "\n\025QueryAddfriendInfoRes\022\017\n\007inviter\030\001 \001(\t"
    "\022\017\n\007invitee\030\002 \001(\t\022\020\n\010toNodeID\030\003 \001(\t\022\r\n\005i"
    "sEnd\030\004 \001(\010\"B\n\013CreateGroup\022\016\n\006userID\030\001 \001("
    "\t\022\020\n\010nickname\030\002 \001(\t\022\021\n\tmembersID\030\003 \003(\t\"L"
    "\n\016CreateGroupRes\022\026\n\016toUserID_outer\030\001 \001(\t"
    "\022\020\n\010nickname\030\002 \001(\t\022\020\n\010toNodeID\030\003 \001(\t\"5\n\016"
    "GroupAddMember\022\020\n\010toNodeID\030\001 \001(\t\022\021\n\tmemb"
    "ersID\030\002 \003(\t\"=\n\021GroupAddMemberRes\022\026\n\016toUs"
    "erID_outer\030\001 \001(\t\022\020\n\010toNodeID\030\002 \001(\t\"\234\001\n\013N"
    "odeMessage\022\n\n\002id\030\001 \001(\t\022\022\n\nfromUserID\030\002 \001"
    "(\t\022\020\n\010toNodeID\030\003 \001(\t\022\023\n\013incrementID\030\004 \001("
    "\005\022\035\n\004type\030\005 \001(\0162\017.chat.MediaType\022\017\n\007cont"
    "ent\030\006 \001(\t\022\026\n\016toUserID_outer\030\007 \001(\t\"7\n\016Nod"
    "eMessageRes\022\020\n\010toNodeID\030\002 \001(\t\022\023\n\013increme"
    "ntID\030\003 \001(\005\"T\n\017NodeMessageNoti\022\020\n\010toNodeI"
    "D\030\001 \001(\t\022\027\n\017unreadIncrement\030\002 \001(\005\022\026\n\016toUs"
    "erID_outer\030\003 \001(\t\";\n\016setReadMessage\022\020\n\010to"
    "NodeID\030\001 \001(\t\022\027\n\017readedIncrement\030\002 \001(\005\"P\n"
    "\014QueryMessage\022\020\n\010toNodeID\030\001 \001(\t\022\027\n\017fromI"
    "ncrementID\030\002 \001(\005\022\025\n\rtoIncrementID\030\003 \001(\005\""
    "8\n\017QueryOneMessage\022\020\n\010toNodeID\030\001 \001(\t\022\023\n\013"
    "incrementID\030\002 \001(\005\"5\n\rServerConnect\022\022\n\nse"
    "rverName\030\001 \001(\t\022\020\n\010serverIP\030\002 \001(\t\"8\n\020Serv"
    "erDisconnect\022\022\n\nserverName\030\001 \001(\t\022\020\n\010serv"
    "erIP\030\002 \001(\t\"\247\002\n\013ConnectInfo\022\014\n\004UUID\030\001 \001(\t"
    "\022\016\n\006userID\030\002 \001(\t\022\017\n\007isLogin\030\003 \001(\010\022\023\n\013isC"
    "onnected\030\004 \001(\010\022\024\n\014isReciveNoti\030\005 \001(\010\022\022\n\n"
    "serverName\030\006 \001(\t\022+\n\005users\030\010 \003(\0132\034.chat.C"
    "onnectInfo.UsersEntry\022\025\n\rclientVersion\030\t"
    " \001(\t\022\021\n\tOSVersion\030\n \001(\t\022\022\n\nappVersion\030\013 "
    "\001(\t\022\021\n\ttimestamp\030\014 \001(\t\032,\n\nUsersEntry\022\013\n\003"
    "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\"a\n\021ConnectI"
    "nfoLittle\022\014\n\004UUID\030\001 \001(\t\022\023\n\013isConnected\030\002"
    " \001(\010\022\024\n\014isReciveNoti\030\003 \001(\010\022\023\n\013nodepointo"
    "r\030\004 \001(\003\"b\n\005Media\022\014\n\004sha1\030\001 \001(\t\022\013\n\003nth\030\002 "
    "\001(\005\022\035\n\004type\030\003 \001(\0162\017.chat.MediaType\022\016\n\006le"
    "ngth\030\004 \001(\005\022\017\n\007content\030\005 \001(\014\"D\n\010MediaRes\022"
    "\014\n\004sha1\030\001 \001(\t\022\013\n\003nth\030\002 \001(\005\022\035\n\004type\030\003 \001(\016"
    "2\017.chat.MediaType\"\032\n\nQueryMedia\022\014\n\004sha1\030"
    "\001 \001(\t\"\034\n\014MediaIsExist\022\014\n\004sha1\030\001 \001(\t\"\"\n\017M"
    "ediaIsExistRes\022\017\n\007isExist\030\001 \001(\010\"\032\n\nMedia"
    "Check\022\014\n\004sha1\030\001 \001(\t\"/\n\rMediaCheckRes\022\014\n\004"
    "sha1\030\001 \001(\t\022\020\n\010isIntact\030\002 \001(\010*8\n\007IsAgree\022"
    "\n\n\006unknow\020\000\022\t\n\005agree\020\001\022\n\n\006refuse\020\002\022\n\n\006ig"
    "nore\020\003*3\n\tMediaType\022\n\n\006UNKNOW\020\000\022\010\n\004TEXT\020"
    "\001\022\007\n\003JPG\020\002\022\007\n\003MP3\020\003B\003\370\001\000b\006proto3", 4832);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chat_message.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chat_5fmessage_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_chat_5fmessage_2eproto_once_);
void protobuf_AddDesc_chat_5fmessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_chat_5fmessage_2eproto_once_,
                 &protobuf_AddDesc_chat_5fmessage_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chat_5fmessage_2eproto {
  StaticDescriptorInitializer_chat_5fmessage_2eproto() {
    protobuf_AddDesc_chat_5fmessage_2eproto();
  }
} static_descriptor_initializer_chat_5fmessage_2eproto_;
const ::google::protobuf::EnumDescriptor* IsAgree_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsAgree_descriptor_;
}
bool IsAgree_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MediaType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaType_descriptor_;
}
bool MediaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ErrorNth::kMaxnthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ErrorNth::ErrorNth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ErrorNth)
}

void ErrorNth::InitAsDefaultInstance() {
}

ErrorNth::ErrorNth(const ErrorNth& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.ErrorNth)
}

void ErrorNth::SharedCtor() {
  maxnth_ = 0;
  _cached_size_ = 0;
}

ErrorNth::~ErrorNth() {
  // @@protoc_insertion_point(destructor:chat.ErrorNth)
  SharedDtor();
}

void ErrorNth::SharedDtor() {
}

void ErrorNth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErrorNth::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorNth_descriptor_;
}

const ErrorNth& ErrorNth::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ErrorNth> ErrorNth_default_instance_;

ErrorNth* ErrorNth::New(::google::protobuf::Arena* arena) const {
  ErrorNth* n = new ErrorNth;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ErrorNth::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ErrorNth)
  maxnth_ = 0;
}

bool ErrorNth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ErrorNth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 maxnth = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxnth_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ErrorNth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ErrorNth)
  return false;
#undef DO_
}

void ErrorNth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ErrorNth)
  // optional int32 maxnth = 1;
  if (this->maxnth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->maxnth(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.ErrorNth)
}

::google::protobuf::uint8* ErrorNth::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.ErrorNth)
  // optional int32 maxnth = 1;
  if (this->maxnth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->maxnth(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.ErrorNth)
  return target;
}

size_t ErrorNth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ErrorNth)
  size_t total_size = 0;

  // optional int32 maxnth = 1;
  if (this->maxnth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxnth());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrorNth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ErrorNth)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ErrorNth* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ErrorNth>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ErrorNth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ErrorNth)
    UnsafeMergeFrom(*source);
  }
}

void ErrorNth::MergeFrom(const ErrorNth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ErrorNth)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ErrorNth::UnsafeMergeFrom(const ErrorNth& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.maxnth() != 0) {
    set_maxnth(from.maxnth());
  }
}

void ErrorNth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ErrorNth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorNth::CopyFrom(const ErrorNth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ErrorNth)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ErrorNth::IsInitialized() const {

  return true;
}

void ErrorNth::Swap(ErrorNth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ErrorNth::InternalSwap(ErrorNth* other) {
  std::swap(maxnth_, other->maxnth_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ErrorNth::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ErrorNth_descriptor_;
  metadata.reflection = ErrorNth_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ErrorNth

// optional int32 maxnth = 1;
void ErrorNth::clear_maxnth() {
  maxnth_ = 0;
}
::google::protobuf::int32 ErrorNth::maxnth() const {
  // @@protoc_insertion_point(field_get:chat.ErrorNth.maxnth)
  return maxnth_;
}
void ErrorNth::set_maxnth(::google::protobuf::int32 value) {
  
  maxnth_ = value;
  // @@protoc_insertion_point(field_set:chat.ErrorNth.maxnth)
}

inline const ErrorNth* ErrorNth::internal_default_instance() {
  return &ErrorNth_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeInfo::kUpdatetimeFieldNumber;
const int NodeInfo::kReadedIncrementidFieldNumber;
const int NodeInfo::kUnreadIncrementidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeInfo::NodeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.NodeInfo)
}

void NodeInfo::InitAsDefaultInstance() {
}

NodeInfo::NodeInfo(const NodeInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.NodeInfo)
}

void NodeInfo::SharedCtor() {
  ::memset(&updatetime_, 0, reinterpret_cast<char*>(&unreadincrementid_) -
    reinterpret_cast<char*>(&updatetime_) + sizeof(unreadincrementid_));
  _cached_size_ = 0;
}

NodeInfo::~NodeInfo() {
  // @@protoc_insertion_point(destructor:chat.NodeInfo)
  SharedDtor();
}

void NodeInfo::SharedDtor() {
}

void NodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeInfo_descriptor_;
}

const NodeInfo& NodeInfo::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NodeInfo> NodeInfo_default_instance_;

NodeInfo* NodeInfo::New(::google::protobuf::Arena* arena) const {
  NodeInfo* n = new NodeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.NodeInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NodeInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NodeInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(updatetime_, unreadincrementid_);

#undef ZR_HELPER_
#undef ZR_

}

bool NodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.NodeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 updatetime = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updatetime_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_readedIncrementid;
        break;
      }

      // optional int32 readedIncrementid = 2;
      case 2: {
        if (tag == 16) {
         parse_readedIncrementid:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &readedincrementid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unreadIncrementid;
        break;
      }

      // optional int32 unreadIncrementid = 3;
      case 3: {
        if (tag == 24) {
         parse_unreadIncrementid:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unreadincrementid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.NodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.NodeInfo)
  return false;
#undef DO_
}

void NodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.NodeInfo)
  // optional int32 updatetime = 1;
  if (this->updatetime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->updatetime(), output);
  }

  // optional int32 readedIncrementid = 2;
  if (this->readedincrementid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->readedincrementid(), output);
  }

  // optional int32 unreadIncrementid = 3;
  if (this->unreadincrementid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->unreadincrementid(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.NodeInfo)
}

::google::protobuf::uint8* NodeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.NodeInfo)
  // optional int32 updatetime = 1;
  if (this->updatetime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->updatetime(), target);
  }

  // optional int32 readedIncrementid = 2;
  if (this->readedincrementid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->readedincrementid(), target);
  }

  // optional int32 unreadIncrementid = 3;
  if (this->unreadincrementid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->unreadincrementid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.NodeInfo)
  return target;
}

size_t NodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.NodeInfo)
  size_t total_size = 0;

  // optional int32 updatetime = 1;
  if (this->updatetime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->updatetime());
  }

  // optional int32 readedIncrementid = 2;
  if (this->readedincrementid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->readedincrementid());
  }

  // optional int32 unreadIncrementid = 3;
  if (this->unreadincrementid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unreadincrementid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.NodeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NodeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.NodeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.NodeInfo)
    UnsafeMergeFrom(*source);
  }
}

void NodeInfo::MergeFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.NodeInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NodeInfo::UnsafeMergeFrom(const NodeInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.updatetime() != 0) {
    set_updatetime(from.updatetime());
  }
  if (from.readedincrementid() != 0) {
    set_readedincrementid(from.readedincrementid());
  }
  if (from.unreadincrementid() != 0) {
    set_unreadincrementid(from.unreadincrementid());
  }
}

void NodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo::CopyFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.NodeInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NodeInfo::IsInitialized() const {

  return true;
}

void NodeInfo::Swap(NodeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeInfo::InternalSwap(NodeInfo* other) {
  std::swap(updatetime_, other->updatetime_);
  std::swap(readedincrementid_, other->readedincrementid_);
  std::swap(unreadincrementid_, other->unreadincrementid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeInfo_descriptor_;
  metadata.reflection = NodeInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeInfo

// optional int32 updatetime = 1;
void NodeInfo::clear_updatetime() {
  updatetime_ = 0;
}
::google::protobuf::int32 NodeInfo::updatetime() const {
  // @@protoc_insertion_point(field_get:chat.NodeInfo.updatetime)
  return updatetime_;
}
void NodeInfo::set_updatetime(::google::protobuf::int32 value) {
  
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:chat.NodeInfo.updatetime)
}

// optional int32 readedIncrementid = 2;
void NodeInfo::clear_readedincrementid() {
  readedincrementid_ = 0;
}
::google::protobuf::int32 NodeInfo::readedincrementid() const {
  // @@protoc_insertion_point(field_get:chat.NodeInfo.readedIncrementid)
  return readedincrementid_;
}
void NodeInfo::set_readedincrementid(::google::protobuf::int32 value) {
  
  readedincrementid_ = value;
  // @@protoc_insertion_point(field_set:chat.NodeInfo.readedIncrementid)
}

// optional int32 unreadIncrementid = 3;
void NodeInfo::clear_unreadincrementid() {
  unreadincrementid_ = 0;
}
::google::protobuf::int32 NodeInfo::unreadincrementid() const {
  // @@protoc_insertion_point(field_get:chat.NodeInfo.unreadIncrementid)
  return unreadincrementid_;
}
void NodeInfo::set_unreadincrementid(::google::protobuf::int32 value) {
  
  unreadincrementid_ = value;
  // @@protoc_insertion_point(field_set:chat.NodeInfo.unreadIncrementid)
}

inline const NodeInfo* NodeInfo::internal_default_instance() {
  return &NodeInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TalkList::kNodemapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TalkList::TalkList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.TalkList)
}

void TalkList::InitAsDefaultInstance() {
}

TalkList::TalkList(const TalkList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.TalkList)
}

void TalkList::SharedCtor() {
  nodemap_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  nodemap_.SetEntryDescriptor(
      &::chat::TalkList_NodemapEntry_descriptor_);
  _cached_size_ = 0;
}

TalkList::~TalkList() {
  // @@protoc_insertion_point(destructor:chat.TalkList)
  SharedDtor();
}

void TalkList::SharedDtor() {
}

void TalkList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalkList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalkList_descriptor_;
}

const TalkList& TalkList::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TalkList> TalkList_default_instance_;

TalkList* TalkList::New(::google::protobuf::Arena* arena) const {
  TalkList* n = new TalkList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TalkList::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.TalkList)
  nodemap_.Clear();
}

bool TalkList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.TalkList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .chat.NodeInfo> nodemap = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_nodemap:
          TalkList_NodemapEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::chat::NodeInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::chat::NodeInfo > > parser(&nodemap_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.TalkList.NodemapEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_nodemap;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.TalkList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.TalkList)
  return false;
#undef DO_
}

void TalkList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.TalkList)
  // map<string, .chat.NodeInfo> nodemap = 1;
  if (!this->nodemap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::chat::NodeInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "chat.TalkList.NodemapEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->nodemap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->nodemap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::chat::NodeInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::chat::NodeInfo >::const_iterator
          it = this->nodemap().begin();
          it != this->nodemap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TalkList_NodemapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(nodemap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TalkList_NodemapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::chat::NodeInfo >::const_iterator
          it = this->nodemap().begin();
          it != this->nodemap().end(); ++it) {
        entry.reset(nodemap_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_end:chat.TalkList)
}

::google::protobuf::uint8* TalkList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.TalkList)
  // map<string, .chat.NodeInfo> nodemap = 1;
  if (!this->nodemap().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::chat::NodeInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "chat.TalkList.NodemapEntry.key");
      }
    };

    if (deterministic &&
        this->nodemap().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->nodemap().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::chat::NodeInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::chat::NodeInfo >::const_iterator
          it = this->nodemap().begin();
          it != this->nodemap().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<TalkList_NodemapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(nodemap_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TalkList_NodemapEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::chat::NodeInfo >::const_iterator
          it = this->nodemap().begin();
          it != this->nodemap().end(); ++it) {
        entry.reset(nodemap_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.TalkList)
  return target;
}

size_t TalkList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.TalkList)
  size_t total_size = 0;

  // map<string, .chat.NodeInfo> nodemap = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->nodemap_size());
  {
    ::google::protobuf::scoped_ptr<TalkList_NodemapEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::chat::NodeInfo >::const_iterator
        it = this->nodemap().begin();
        it != this->nodemap().end(); ++it) {
      entry.reset(nodemap_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalkList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.TalkList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TalkList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TalkList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.TalkList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.TalkList)
    UnsafeMergeFrom(*source);
  }
}

void TalkList::MergeFrom(const TalkList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.TalkList)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TalkList::UnsafeMergeFrom(const TalkList& from) {
  GOOGLE_DCHECK(&from != this);
  nodemap_.MergeFrom(from.nodemap_);
}

void TalkList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.TalkList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalkList::CopyFrom(const TalkList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.TalkList)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TalkList::IsInitialized() const {

  return true;
}

void TalkList::Swap(TalkList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TalkList::InternalSwap(TalkList* other) {
  nodemap_.Swap(&other->nodemap_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TalkList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalkList_descriptor_;
  metadata.reflection = TalkList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TalkList

// map<string, .chat.NodeInfo> nodemap = 1;
int TalkList::nodemap_size() const {
  return nodemap_.size();
}
void TalkList::clear_nodemap() {
  nodemap_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::chat::NodeInfo >&
TalkList::nodemap() const {
  // @@protoc_insertion_point(field_map:chat.TalkList.nodemap)
  return nodemap_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::chat::NodeInfo >*
TalkList::mutable_nodemap() {
  // @@protoc_insertion_point(field_mutable_map:chat.TalkList.nodemap)
  return nodemap_.MutableMap();
}

inline const TalkList* TalkList::internal_default_instance() {
  return &TalkList_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddFriendInfo::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddFriendInfo::AddFriendInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.AddFriendInfo)
}

void AddFriendInfo::InitAsDefaultInstance() {
}

AddFriendInfo::AddFriendInfo(const AddFriendInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.AddFriendInfo)
}

void AddFriendInfo::SharedCtor() {
  _cached_size_ = 0;
}

AddFriendInfo::~AddFriendInfo() {
  // @@protoc_insertion_point(destructor:chat.AddFriendInfo)
  SharedDtor();
}

void AddFriendInfo::SharedDtor() {
}

void AddFriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFriendInfo_descriptor_;
}

const AddFriendInfo& AddFriendInfo::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AddFriendInfo> AddFriendInfo_default_instance_;

AddFriendInfo* AddFriendInfo::New(::google::protobuf::Arena* arena) const {
  AddFriendInfo* n = new AddFriendInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddFriendInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.AddFriendInfo)
  info_.Clear();
}

bool AddFriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.AddFriendInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .chat.QueryAddfriendInfoRes info = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.AddFriendInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.AddFriendInfo)
  return false;
#undef DO_
}

void AddFriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.AddFriendInfo)
  // repeated .chat.QueryAddfriendInfoRes info = 1;
  for (unsigned int i = 0, n = this->info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.AddFriendInfo)
}

::google::protobuf::uint8* AddFriendInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.AddFriendInfo)
  // repeated .chat.QueryAddfriendInfoRes info = 1;
  for (unsigned int i = 0, n = this->info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->info(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.AddFriendInfo)
  return target;
}

size_t AddFriendInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.AddFriendInfo)
  size_t total_size = 0;

  // repeated .chat.QueryAddfriendInfoRes info = 1;
  {
    unsigned int count = this->info_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.AddFriendInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AddFriendInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddFriendInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.AddFriendInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.AddFriendInfo)
    UnsafeMergeFrom(*source);
  }
}

void AddFriendInfo::MergeFrom(const AddFriendInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.AddFriendInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AddFriendInfo::UnsafeMergeFrom(const AddFriendInfo& from) {
  GOOGLE_DCHECK(&from != this);
  info_.MergeFrom(from.info_);
}

void AddFriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.AddFriendInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendInfo::CopyFrom(const AddFriendInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.AddFriendInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AddFriendInfo::IsInitialized() const {

  return true;
}

void AddFriendInfo::Swap(AddFriendInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddFriendInfo::InternalSwap(AddFriendInfo* other) {
  info_.UnsafeArenaSwap(&other->info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddFriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFriendInfo_descriptor_;
  metadata.reflection = AddFriendInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddFriendInfo

// repeated .chat.QueryAddfriendInfoRes info = 1;
int AddFriendInfo::info_size() const {
  return info_.size();
}
void AddFriendInfo::clear_info() {
  info_.Clear();
}
const ::chat::QueryAddfriendInfoRes& AddFriendInfo::info(int index) const {
  // @@protoc_insertion_point(field_get:chat.AddFriendInfo.info)
  return info_.Get(index);
}
::chat::QueryAddfriendInfoRes* AddFriendInfo::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:chat.AddFriendInfo.info)
  return info_.Mutable(index);
}
::chat::QueryAddfriendInfoRes* AddFriendInfo::add_info() {
  // @@protoc_insertion_point(field_add:chat.AddFriendInfo.info)
  return info_.Add();
}
::google::protobuf::RepeatedPtrField< ::chat::QueryAddfriendInfoRes >*
AddFriendInfo::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:chat.AddFriendInfo.info)
  return &info_;
}
const ::google::protobuf::RepeatedPtrField< ::chat::QueryAddfriendInfoRes >&
AddFriendInfo::info() const {
  // @@protoc_insertion_point(field_list:chat.AddFriendInfo.info)
  return info_;
}

inline const AddFriendInfo* AddFriendInfo::internal_default_instance() {
  return &AddFriendInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ping::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ping::Ping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.Ping)
}

void Ping::InitAsDefaultInstance() {
}

Ping::Ping(const Ping& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.Ping)
}

void Ping::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Ping::~Ping() {
  // @@protoc_insertion_point(destructor:chat.Ping)
  SharedDtor();
}

void Ping::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ping_descriptor_;
}

const Ping& Ping::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Ping> Ping_default_instance_;

Ping* Ping::New(::google::protobuf::Arena* arena) const {
  Ping* n = new Ping;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.Ping)
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.Ping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.Ping.msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.Ping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.Ping)
  return false;
#undef DO_
}

void Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.Ping)
  // optional string msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Ping.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.Ping)
}

::google::protobuf::uint8* Ping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.Ping)
  // optional string msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Ping.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.Ping)
  return target;
}

size_t Ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.Ping)
  size_t total_size = 0;

  // optional string msg = 1;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.Ping)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Ping* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.Ping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.Ping)
    UnsafeMergeFrom(*source);
  }
}

void Ping::MergeFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.Ping)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Ping::UnsafeMergeFrom(const Ping& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void Ping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ping::CopyFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.Ping)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Ping::IsInitialized() const {

  return true;
}

void Ping::Swap(Ping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ping::InternalSwap(Ping* other) {
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ping_descriptor_;
  metadata.reflection = Ping_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ping

// optional string msg = 1;
void Ping::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Ping::msg() const {
  // @@protoc_insertion_point(field_get:chat.Ping.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Ping::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Ping.msg)
}
void Ping::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Ping.msg)
}
void Ping::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Ping.msg)
}
::std::string* Ping::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:chat.Ping.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Ping::release_msg() {
  // @@protoc_insertion_point(field_release:chat.Ping.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Ping::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:chat.Ping.msg)
}

inline const Ping* Ping::internal_default_instance() {
  return &Ping_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pong::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pong::Pong()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.Pong)
}

void Pong::InitAsDefaultInstance() {
}

Pong::Pong(const Pong& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.Pong)
}

void Pong::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Pong::~Pong() {
  // @@protoc_insertion_point(destructor:chat.Pong)
  SharedDtor();
}

void Pong::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Pong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pong_descriptor_;
}

const Pong& Pong::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Pong> Pong_default_instance_;

Pong* Pong::New(::google::protobuf::Arena* arena) const {
  Pong* n = new Pong;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pong::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.Pong)
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Pong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.Pong)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.Pong.msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.Pong)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.Pong)
  return false;
#undef DO_
}

void Pong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.Pong)
  // optional string msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Pong.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.Pong)
}

::google::protobuf::uint8* Pong::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.Pong)
  // optional string msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Pong.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.Pong)
  return target;
}

size_t Pong::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.Pong)
  size_t total_size = 0;

  // optional string msg = 1;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pong::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.Pong)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Pong* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pong>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.Pong)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.Pong)
    UnsafeMergeFrom(*source);
  }
}

void Pong::MergeFrom(const Pong& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.Pong)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Pong::UnsafeMergeFrom(const Pong& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void Pong::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.Pong)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pong::CopyFrom(const Pong& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.Pong)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Pong::IsInitialized() const {

  return true;
}

void Pong::Swap(Pong* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pong::InternalSwap(Pong* other) {
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pong_descriptor_;
  metadata.reflection = Pong_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pong

// optional string msg = 1;
void Pong::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Pong::msg() const {
  // @@protoc_insertion_point(field_get:chat.Pong.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Pong::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Pong.msg)
}
void Pong::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Pong.msg)
}
void Pong::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Pong.msg)
}
::std::string* Pong::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:chat.Pong.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Pong::release_msg() {
  // @@protoc_insertion_point(field_release:chat.Pong.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Pong::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:chat.Pong.msg)
}

inline const Pong* Pong::internal_default_instance() {
  return &Pong_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeSelfDevice::NodeSelfDevice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.NodeSelfDevice)
}

void NodeSelfDevice::InitAsDefaultInstance() {
}

NodeSelfDevice::NodeSelfDevice(const NodeSelfDevice& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.NodeSelfDevice)
}

void NodeSelfDevice::SharedCtor() {
  _cached_size_ = 0;
}

NodeSelfDevice::~NodeSelfDevice() {
  // @@protoc_insertion_point(destructor:chat.NodeSelfDevice)
  SharedDtor();
}

void NodeSelfDevice::SharedDtor() {
}

void NodeSelfDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeSelfDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeSelfDevice_descriptor_;
}

const NodeSelfDevice& NodeSelfDevice::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NodeSelfDevice> NodeSelfDevice_default_instance_;

NodeSelfDevice* NodeSelfDevice::New(::google::protobuf::Arena* arena) const {
  NodeSelfDevice* n = new NodeSelfDevice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeSelfDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.NodeSelfDevice)
}

bool NodeSelfDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.NodeSelfDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:chat.NodeSelfDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.NodeSelfDevice)
  return false;
#undef DO_
}

void NodeSelfDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.NodeSelfDevice)
  // @@protoc_insertion_point(serialize_end:chat.NodeSelfDevice)
}

::google::protobuf::uint8* NodeSelfDevice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.NodeSelfDevice)
  // @@protoc_insertion_point(serialize_to_array_end:chat.NodeSelfDevice)
  return target;
}

size_t NodeSelfDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.NodeSelfDevice)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeSelfDevice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.NodeSelfDevice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NodeSelfDevice* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeSelfDevice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.NodeSelfDevice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.NodeSelfDevice)
    UnsafeMergeFrom(*source);
  }
}

void NodeSelfDevice::MergeFrom(const NodeSelfDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.NodeSelfDevice)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NodeSelfDevice::UnsafeMergeFrom(const NodeSelfDevice& from) {
  GOOGLE_DCHECK(&from != this);
}

void NodeSelfDevice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.NodeSelfDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeSelfDevice::CopyFrom(const NodeSelfDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.NodeSelfDevice)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NodeSelfDevice::IsInitialized() const {

  return true;
}

void NodeSelfDevice::Swap(NodeSelfDevice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeSelfDevice::InternalSwap(NodeSelfDevice* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeSelfDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeSelfDevice_descriptor_;
  metadata.reflection = NodeSelfDevice_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeSelfDevice

inline const NodeSelfDevice* NodeSelfDevice::internal_default_instance() {
  return &NodeSelfDevice_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodePeerServer::NodePeerServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.NodePeerServer)
}

void NodePeerServer::InitAsDefaultInstance() {
}

NodePeerServer::NodePeerServer(const NodePeerServer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.NodePeerServer)
}

void NodePeerServer::SharedCtor() {
  _cached_size_ = 0;
}

NodePeerServer::~NodePeerServer() {
  // @@protoc_insertion_point(destructor:chat.NodePeerServer)
  SharedDtor();
}

void NodePeerServer::SharedDtor() {
}

void NodePeerServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodePeerServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodePeerServer_descriptor_;
}

const NodePeerServer& NodePeerServer::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NodePeerServer> NodePeerServer_default_instance_;

NodePeerServer* NodePeerServer::New(::google::protobuf::Arena* arena) const {
  NodePeerServer* n = new NodePeerServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodePeerServer::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.NodePeerServer)
}

bool NodePeerServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.NodePeerServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:chat.NodePeerServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.NodePeerServer)
  return false;
#undef DO_
}

void NodePeerServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.NodePeerServer)
  // @@protoc_insertion_point(serialize_end:chat.NodePeerServer)
}

::google::protobuf::uint8* NodePeerServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.NodePeerServer)
  // @@protoc_insertion_point(serialize_to_array_end:chat.NodePeerServer)
  return target;
}

size_t NodePeerServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.NodePeerServer)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodePeerServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.NodePeerServer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NodePeerServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodePeerServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.NodePeerServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.NodePeerServer)
    UnsafeMergeFrom(*source);
  }
}

void NodePeerServer::MergeFrom(const NodePeerServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.NodePeerServer)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NodePeerServer::UnsafeMergeFrom(const NodePeerServer& from) {
  GOOGLE_DCHECK(&from != this);
}

void NodePeerServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.NodePeerServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodePeerServer::CopyFrom(const NodePeerServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.NodePeerServer)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NodePeerServer::IsInitialized() const {

  return true;
}

void NodePeerServer::Swap(NodePeerServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodePeerServer::InternalSwap(NodePeerServer* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodePeerServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodePeerServer_descriptor_;
  metadata.reflection = NodePeerServer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodePeerServer

inline const NodePeerServer* NodePeerServer::internal_default_instance() {
  return &NodePeerServer_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeSpecifiy::kToNodeIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeSpecifiy::NodeSpecifiy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.NodeSpecifiy)
}

void NodeSpecifiy::InitAsDefaultInstance() {
}

NodeSpecifiy::NodeSpecifiy(const NodeSpecifiy& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.NodeSpecifiy)
}

void NodeSpecifiy::SharedCtor() {
  tonodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

NodeSpecifiy::~NodeSpecifiy() {
  // @@protoc_insertion_point(destructor:chat.NodeSpecifiy)
  SharedDtor();
}

void NodeSpecifiy::SharedDtor() {
  tonodeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NodeSpecifiy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeSpecifiy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeSpecifiy_descriptor_;
}

const NodeSpecifiy& NodeSpecifiy::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NodeSpecifiy> NodeSpecifiy_default_instance_;

NodeSpecifiy* NodeSpecifiy::New(::google::protobuf::Arena* arena) const {
  NodeSpecifiy* n = new NodeSpecifiy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeSpecifiy::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.NodeSpecifiy)
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool NodeSpecifiy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.NodeSpecifiy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string toNodeID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tonodeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tonodeid().data(), this->tonodeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.NodeSpecifiy.toNodeID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.NodeSpecifiy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.NodeSpecifiy)
  return false;
#undef DO_
}

void NodeSpecifiy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.NodeSpecifiy)
  // optional string toNodeID = 1;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.NodeSpecifiy.toNodeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tonodeid(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.NodeSpecifiy)
}

::google::protobuf::uint8* NodeSpecifiy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.NodeSpecifiy)
  // optional string toNodeID = 1;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.NodeSpecifiy.toNodeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tonodeid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.NodeSpecifiy)
  return target;
}

size_t NodeSpecifiy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.NodeSpecifiy)
  size_t total_size = 0;

  // optional string toNodeID = 1;
  if (this->tonodeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tonodeid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeSpecifiy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.NodeSpecifiy)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NodeSpecifiy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeSpecifiy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.NodeSpecifiy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.NodeSpecifiy)
    UnsafeMergeFrom(*source);
  }
}

void NodeSpecifiy::MergeFrom(const NodeSpecifiy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.NodeSpecifiy)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NodeSpecifiy::UnsafeMergeFrom(const NodeSpecifiy& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.tonodeid().size() > 0) {

    tonodeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tonodeid_);
  }
}

void NodeSpecifiy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.NodeSpecifiy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeSpecifiy::CopyFrom(const NodeSpecifiy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.NodeSpecifiy)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NodeSpecifiy::IsInitialized() const {

  return true;
}

void NodeSpecifiy::Swap(NodeSpecifiy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeSpecifiy::InternalSwap(NodeSpecifiy* other) {
  tonodeid_.Swap(&other->tonodeid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeSpecifiy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeSpecifiy_descriptor_;
  metadata.reflection = NodeSpecifiy_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeSpecifiy

// optional string toNodeID = 1;
void NodeSpecifiy::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NodeSpecifiy::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.NodeSpecifiy.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeSpecifiy::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.NodeSpecifiy.toNodeID)
}
void NodeSpecifiy::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.NodeSpecifiy.toNodeID)
}
void NodeSpecifiy::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.NodeSpecifiy.toNodeID)
}
::std::string* NodeSpecifiy::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.NodeSpecifiy.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NodeSpecifiy::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.NodeSpecifiy.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeSpecifiy::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.NodeSpecifiy.toNodeID)
}

inline const NodeSpecifiy* NodeSpecifiy::internal_default_instance() {
  return &NodeSpecifiy_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeUser::kToUserIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeUser::NodeUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.NodeUser)
}

void NodeUser::InitAsDefaultInstance() {
}

NodeUser::NodeUser(const NodeUser& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.NodeUser)
}

void NodeUser::SharedCtor() {
  touserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

NodeUser::~NodeUser() {
  // @@protoc_insertion_point(destructor:chat.NodeUser)
  SharedDtor();
}

void NodeUser::SharedDtor() {
  touserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NodeUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeUser_descriptor_;
}

const NodeUser& NodeUser::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NodeUser> NodeUser_default_instance_;

NodeUser* NodeUser::New(::google::protobuf::Arena* arena) const {
  NodeUser* n = new NodeUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeUser::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.NodeUser)
  touserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool NodeUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.NodeUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string toUserID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_touserid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->touserid().data(), this->touserid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.NodeUser.toUserID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.NodeUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.NodeUser)
  return false;
#undef DO_
}

void NodeUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.NodeUser)
  // optional string toUserID = 1;
  if (this->touserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->touserid().data(), this->touserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.NodeUser.toUserID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->touserid(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.NodeUser)
}

::google::protobuf::uint8* NodeUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.NodeUser)
  // optional string toUserID = 1;
  if (this->touserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->touserid().data(), this->touserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.NodeUser.toUserID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->touserid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.NodeUser)
  return target;
}

size_t NodeUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.NodeUser)
  size_t total_size = 0;

  // optional string toUserID = 1;
  if (this->touserid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->touserid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.NodeUser)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NodeUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.NodeUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.NodeUser)
    UnsafeMergeFrom(*source);
  }
}

void NodeUser::MergeFrom(const NodeUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.NodeUser)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NodeUser::UnsafeMergeFrom(const NodeUser& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.touserid().size() > 0) {

    touserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.touserid_);
  }
}

void NodeUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.NodeUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeUser::CopyFrom(const NodeUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.NodeUser)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NodeUser::IsInitialized() const {

  return true;
}

void NodeUser::Swap(NodeUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeUser::InternalSwap(NodeUser* other) {
  touserid_.Swap(&other->touserid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeUser_descriptor_;
  metadata.reflection = NodeUser_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeUser

// optional string toUserID = 1;
void NodeUser::clear_touserid() {
  touserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NodeUser::touserid() const {
  // @@protoc_insertion_point(field_get:chat.NodeUser.toUserID)
  return touserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeUser::set_touserid(const ::std::string& value) {
  
  touserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.NodeUser.toUserID)
}
void NodeUser::set_touserid(const char* value) {
  
  touserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.NodeUser.toUserID)
}
void NodeUser::set_touserid(const char* value, size_t size) {
  
  touserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.NodeUser.toUserID)
}
::std::string* NodeUser::mutable_touserid() {
  
  // @@protoc_insertion_point(field_mutable:chat.NodeUser.toUserID)
  return touserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NodeUser::release_touserid() {
  // @@protoc_insertion_point(field_release:chat.NodeUser.toUserID)
  
  return touserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeUser::set_allocated_touserid(::std::string* touserid) {
  if (touserid != NULL) {
    
  } else {
    
  }
  touserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), touserid);
  // @@protoc_insertion_point(field_set_allocated:chat.NodeUser.toUserID)
}

inline const NodeUser* NodeUser::internal_default_instance() {
  return &NodeUser_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kErrnumFieldNumber;
const int Error::kErrmsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.Error)
}

void Error::InitAsDefaultInstance() {
}

Error::Error(const Error& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.Error)
}

void Error::SharedCtor() {
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errnum_ = 0;
  _cached_size_ = 0;
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:chat.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Error> Error_default_instance_;

Error* Error::New(::google::protobuf::Arena* arena) const {
  Error* n = new Error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.Error)
  errnum_ = 0;
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 errnum = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errnum_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // optional string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.Error.errmsg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.Error)
  // optional int32 errnum = 1;
  if (this->errnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errnum(), output);
  }

  // optional string errmsg = 2;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Error.errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.Error)
}

::google::protobuf::uint8* Error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.Error)
  // optional int32 errnum = 1;
  if (this->errnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errnum(), target);
  }

  // optional string errmsg = 2;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Error.errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.Error)
  size_t total_size = 0;

  // optional int32 errnum = 1;
  if (this->errnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errnum());
  }

  // optional string errmsg = 2;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.Error)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Error* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.Error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.Error)
    UnsafeMergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.Error)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Error::UnsafeMergeFrom(const Error& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.errnum() != 0) {
    set_errnum(from.errnum());
  }
  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.Error)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Error::IsInitialized() const {

  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  std::swap(errnum_, other->errnum_);
  errmsg_.Swap(&other->errmsg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error

// optional int32 errnum = 1;
void Error::clear_errnum() {
  errnum_ = 0;
}
::google::protobuf::int32 Error::errnum() const {
  // @@protoc_insertion_point(field_get:chat.Error.errnum)
  return errnum_;
}
void Error::set_errnum(::google::protobuf::int32 value) {
  
  errnum_ = value;
  // @@protoc_insertion_point(field_set:chat.Error.errnum)
}

// optional string errmsg = 2;
void Error::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Error::errmsg() const {
  // @@protoc_insertion_point(field_get:chat.Error.errmsg)
  return errmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Error::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Error.errmsg)
}
void Error::set_errmsg(const char* value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Error.errmsg)
}
void Error::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Error.errmsg)
}
::std::string* Error::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:chat.Error.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Error::release_errmsg() {
  // @@protoc_insertion_point(field_release:chat.Error.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Error::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:chat.Error.errmsg)
}

inline const Error* Error::internal_default_instance() {
  return &Error_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Device_OperatingSystem_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Device_OperatingSystem_descriptor_;
}
bool Device_OperatingSystem_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Device_OperatingSystem Device::iOS;
const Device_OperatingSystem Device::Android;
const Device_OperatingSystem Device::OperatingSystem_MIN;
const Device_OperatingSystem Device::OperatingSystem_MAX;
const int Device::OperatingSystem_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Device::kOSFieldNumber;
const int Device::kDeviceModelFieldNumber;
const int Device::kDeviceNicknameFieldNumber;
const int Device::kUUIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Device::Device()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.Device)
}

void Device::InitAsDefaultInstance() {
}

Device::Device(const Device& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.Device)
}

void Device::SharedCtor() {
  devicemodel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicenickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_ = 0;
  _cached_size_ = 0;
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:chat.Device)
  SharedDtor();
}

void Device::SharedDtor() {
  devicemodel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicenickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Device::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Device_descriptor_;
}

const Device& Device::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Device> Device_default_instance_;

Device* Device::New(::google::protobuf::Arena* arena) const {
  Device* n = new Device;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.Device)
  os_ = 0;
  devicemodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicenickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.Device)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .chat.Device.OperatingSystem OS = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_os(static_cast< ::chat::Device_OperatingSystem >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_deviceModel;
        break;
      }

      // optional string deviceModel = 2;
      case 2: {
        if (tag == 18) {
         parse_deviceModel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicemodel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->devicemodel().data(), this->devicemodel().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.Device.deviceModel"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_deviceNickname;
        break;
      }

      // optional string deviceNickname = 3;
      case 3: {
        if (tag == 26) {
         parse_deviceNickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicenickname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->devicenickname().data(), this->devicenickname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.Device.deviceNickname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_UUID;
        break;
      }

      // optional string UUID = 4;
      case 4: {
        if (tag == 34) {
         parse_UUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.Device.UUID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.Device)
  return false;
#undef DO_
}

void Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.Device)
  // optional .chat.Device.OperatingSystem OS = 1;
  if (this->os() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->os(), output);
  }

  // optional string deviceModel = 2;
  if (this->devicemodel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicemodel().data(), this->devicemodel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Device.deviceModel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->devicemodel(), output);
  }

  // optional string deviceNickname = 3;
  if (this->devicenickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicenickname().data(), this->devicenickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Device.deviceNickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->devicenickname(), output);
  }

  // optional string UUID = 4;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Device.UUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uuid(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.Device)
}

::google::protobuf::uint8* Device::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.Device)
  // optional .chat.Device.OperatingSystem OS = 1;
  if (this->os() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->os(), target);
  }

  // optional string deviceModel = 2;
  if (this->devicemodel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicemodel().data(), this->devicemodel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Device.deviceModel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->devicemodel(), target);
  }

  // optional string deviceNickname = 3;
  if (this->devicenickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->devicenickname().data(), this->devicenickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Device.deviceNickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->devicenickname(), target);
  }

  // optional string UUID = 4;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Device.UUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uuid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.Device)
  return target;
}

size_t Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.Device)
  size_t total_size = 0;

  // optional .chat.Device.OperatingSystem OS = 1;
  if (this->os() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->os());
  }

  // optional string deviceModel = 2;
  if (this->devicemodel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->devicemodel());
  }

  // optional string deviceNickname = 3;
  if (this->devicenickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->devicenickname());
  }

  // optional string UUID = 4;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Device::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.Device)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Device* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Device>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.Device)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.Device)
    UnsafeMergeFrom(*source);
  }
}

void Device::MergeFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.Device)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Device::UnsafeMergeFrom(const Device& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.os() != 0) {
    set_os(from.os());
  }
  if (from.devicemodel().size() > 0) {

    devicemodel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicemodel_);
  }
  if (from.devicenickname().size() > 0) {

    devicenickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicenickname_);
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
}

void Device::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.Device)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Device::IsInitialized() const {

  return true;
}

void Device::Swap(Device* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Device::InternalSwap(Device* other) {
  std::swap(os_, other->os_);
  devicemodel_.Swap(&other->devicemodel_);
  devicenickname_.Swap(&other->devicenickname_);
  uuid_.Swap(&other->uuid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Device::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Device_descriptor_;
  metadata.reflection = Device_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Device

// optional .chat.Device.OperatingSystem OS = 1;
void Device::clear_os() {
  os_ = 0;
}
::chat::Device_OperatingSystem Device::os() const {
  // @@protoc_insertion_point(field_get:chat.Device.OS)
  return static_cast< ::chat::Device_OperatingSystem >(os_);
}
void Device::set_os(::chat::Device_OperatingSystem value) {
  
  os_ = value;
  // @@protoc_insertion_point(field_set:chat.Device.OS)
}

// optional string deviceModel = 2;
void Device::clear_devicemodel() {
  devicemodel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Device::devicemodel() const {
  // @@protoc_insertion_point(field_get:chat.Device.deviceModel)
  return devicemodel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Device::set_devicemodel(const ::std::string& value) {
  
  devicemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Device.deviceModel)
}
void Device::set_devicemodel(const char* value) {
  
  devicemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Device.deviceModel)
}
void Device::set_devicemodel(const char* value, size_t size) {
  
  devicemodel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Device.deviceModel)
}
::std::string* Device::mutable_devicemodel() {
  
  // @@protoc_insertion_point(field_mutable:chat.Device.deviceModel)
  return devicemodel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Device::release_devicemodel() {
  // @@protoc_insertion_point(field_release:chat.Device.deviceModel)
  
  return devicemodel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Device::set_allocated_devicemodel(::std::string* devicemodel) {
  if (devicemodel != NULL) {
    
  } else {
    
  }
  devicemodel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicemodel);
  // @@protoc_insertion_point(field_set_allocated:chat.Device.deviceModel)
}

// optional string deviceNickname = 3;
void Device::clear_devicenickname() {
  devicenickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Device::devicenickname() const {
  // @@protoc_insertion_point(field_get:chat.Device.deviceNickname)
  return devicenickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Device::set_devicenickname(const ::std::string& value) {
  
  devicenickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Device.deviceNickname)
}
void Device::set_devicenickname(const char* value) {
  
  devicenickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Device.deviceNickname)
}
void Device::set_devicenickname(const char* value, size_t size) {
  
  devicenickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Device.deviceNickname)
}
::std::string* Device::mutable_devicenickname() {
  
  // @@protoc_insertion_point(field_mutable:chat.Device.deviceNickname)
  return devicenickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Device::release_devicenickname() {
  // @@protoc_insertion_point(field_release:chat.Device.deviceNickname)
  
  return devicenickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Device::set_allocated_devicenickname(::std::string* devicenickname) {
  if (devicenickname != NULL) {
    
  } else {
    
  }
  devicenickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), devicenickname);
  // @@protoc_insertion_point(field_set_allocated:chat.Device.deviceNickname)
}

// optional string UUID = 4;
void Device::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Device::uuid() const {
  // @@protoc_insertion_point(field_get:chat.Device.UUID)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Device::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Device.UUID)
}
void Device::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Device.UUID)
}
void Device::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Device.UUID)
}
::std::string* Device::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:chat.Device.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Device::release_uuid() {
  // @@protoc_insertion_point(field_release:chat.Device.UUID)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Device::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:chat.Device.UUID)
}

inline const Device* Device::internal_default_instance() {
  return &Device_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* MessageNode_Authorize_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageNode_Authorize_descriptor_;
}
bool MessageNode_Authorize_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MessageNode_Authorize MessageNode::creator;
const MessageNode_Authorize MessageNode::manager;
const MessageNode_Authorize MessageNode::member;
const MessageNode_Authorize MessageNode::peer;
const MessageNode_Authorize MessageNode::Authorize_MIN;
const MessageNode_Authorize MessageNode::Authorize_MAX;
const int MessageNode::Authorize_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageNode::kIdFieldNumber;
const int MessageNode::kAuthorizeFieldNumber;
const int MessageNode::kCreatorIDFieldNumber;
const int MessageNode::kNicknameFieldNumber;
const int MessageNode::kVersionFieldNumber;
const int MessageNode::kManagerIDsFieldNumber;
const int MessageNode::kMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageNode::MessageNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.MessageNode)
}

void MessageNode::InitAsDefaultInstance() {
}

MessageNode::MessageNode(const MessageNode& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.MessageNode)
}

void MessageNode::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creatorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&authorize_, 0, reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&authorize_) + sizeof(version_));
  _cached_size_ = 0;
}

MessageNode::~MessageNode() {
  // @@protoc_insertion_point(destructor:chat.MessageNode)
  SharedDtor();
}

void MessageNode::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creatorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MessageNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageNode_descriptor_;
}

const MessageNode& MessageNode::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MessageNode> MessageNode_default_instance_;

MessageNode* MessageNode::New(::google::protobuf::Arena* arena) const {
  MessageNode* n = new MessageNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageNode::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.MessageNode)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MessageNode, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MessageNode*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(authorize_, version_);
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  creatorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  managerids_.Clear();
  members_.Clear();
}

bool MessageNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.MessageNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.MessageNode.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_authorize;
        break;
      }

      // optional .chat.MessageNode.Authorize authorize = 2;
      case 2: {
        if (tag == 16) {
         parse_authorize:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_authorize(static_cast< ::chat::MessageNode_Authorize >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_creatorID;
        break;
      }

      // optional string creatorID = 3;
      case 3: {
        if (tag == 26) {
         parse_creatorID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creatorid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->creatorid().data(), this->creatorid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.MessageNode.creatorID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nickname;
        break;
      }

      // optional string nickname = 4;
      case 4: {
        if (tag == 34) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.MessageNode.nickname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_version;
        break;
      }

      // optional int32 version = 5;
      case 5: {
        if (tag == 40) {
         parse_version:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_managerIDs;
        break;
      }

      // repeated string managerIDs = 6;
      case 6: {
        if (tag == 50) {
         parse_managerIDs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_managerids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->managerids(this->managerids_size() - 1).data(),
            this->managerids(this->managerids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.MessageNode.managerIDs"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_managerIDs;
        if (input->ExpectTag(58)) goto parse_members;
        break;
      }

      // repeated string members = 7;
      case 7: {
        if (tag == 58) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_members()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->members(this->members_size() - 1).data(),
            this->members(this->members_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.MessageNode.members"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_members;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.MessageNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.MessageNode)
  return false;
#undef DO_
}

void MessageNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.MessageNode)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.MessageNode.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional .chat.MessageNode.Authorize authorize = 2;
  if (this->authorize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->authorize(), output);
  }

  // optional string creatorID = 3;
  if (this->creatorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->creatorid().data(), this->creatorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.MessageNode.creatorID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->creatorid(), output);
  }

  // optional string nickname = 4;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.MessageNode.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nickname(), output);
  }

  // optional int32 version = 5;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->version(), output);
  }

  // repeated string managerIDs = 6;
  for (int i = 0; i < this->managerids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->managerids(i).data(), this->managerids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.MessageNode.managerIDs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->managerids(i), output);
  }

  // repeated string members = 7;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->members(i).data(), this->members(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.MessageNode.members");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->members(i), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.MessageNode)
}

::google::protobuf::uint8* MessageNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.MessageNode)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.MessageNode.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional .chat.MessageNode.Authorize authorize = 2;
  if (this->authorize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->authorize(), target);
  }

  // optional string creatorID = 3;
  if (this->creatorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->creatorid().data(), this->creatorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.MessageNode.creatorID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->creatorid(), target);
  }

  // optional string nickname = 4;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.MessageNode.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nickname(), target);
  }

  // optional int32 version = 5;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->version(), target);
  }

  // repeated string managerIDs = 6;
  for (int i = 0; i < this->managerids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->managerids(i).data(), this->managerids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.MessageNode.managerIDs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->managerids(i), target);
  }

  // repeated string members = 7;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->members(i).data(), this->members(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.MessageNode.members");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->members(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.MessageNode)
  return target;
}

size_t MessageNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.MessageNode)
  size_t total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional .chat.MessageNode.Authorize authorize = 2;
  if (this->authorize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->authorize());
  }

  // optional string creatorID = 3;
  if (this->creatorid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->creatorid());
  }

  // optional string nickname = 4;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  // optional int32 version = 5;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  // repeated string managerIDs = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->managerids_size());
  for (int i = 0; i < this->managerids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->managerids(i));
  }

  // repeated string members = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->members_size());
  for (int i = 0; i < this->members_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->members(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.MessageNode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MessageNode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.MessageNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.MessageNode)
    UnsafeMergeFrom(*source);
  }
}

void MessageNode::MergeFrom(const MessageNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.MessageNode)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MessageNode::UnsafeMergeFrom(const MessageNode& from) {
  GOOGLE_DCHECK(&from != this);
  managerids_.UnsafeMergeFrom(from.managerids_);
  members_.UnsafeMergeFrom(from.members_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.authorize() != 0) {
    set_authorize(from.authorize());
  }
  if (from.creatorid().size() > 0) {

    creatorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.creatorid_);
  }
  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void MessageNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.MessageNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageNode::CopyFrom(const MessageNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.MessageNode)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MessageNode::IsInitialized() const {

  return true;
}

void MessageNode::Swap(MessageNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageNode::InternalSwap(MessageNode* other) {
  id_.Swap(&other->id_);
  std::swap(authorize_, other->authorize_);
  creatorid_.Swap(&other->creatorid_);
  nickname_.Swap(&other->nickname_);
  std::swap(version_, other->version_);
  managerids_.UnsafeArenaSwap(&other->managerids_);
  members_.UnsafeArenaSwap(&other->members_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageNode_descriptor_;
  metadata.reflection = MessageNode_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageNode

// optional string id = 1;
void MessageNode::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MessageNode::id() const {
  // @@protoc_insertion_point(field_get:chat.MessageNode.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MessageNode::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.MessageNode.id)
}
void MessageNode::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.MessageNode.id)
}
void MessageNode::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.MessageNode.id)
}
::std::string* MessageNode::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:chat.MessageNode.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MessageNode::release_id() {
  // @@protoc_insertion_point(field_release:chat.MessageNode.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MessageNode::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:chat.MessageNode.id)
}

// optional .chat.MessageNode.Authorize authorize = 2;
void MessageNode::clear_authorize() {
  authorize_ = 0;
}
::chat::MessageNode_Authorize MessageNode::authorize() const {
  // @@protoc_insertion_point(field_get:chat.MessageNode.authorize)
  return static_cast< ::chat::MessageNode_Authorize >(authorize_);
}
void MessageNode::set_authorize(::chat::MessageNode_Authorize value) {
  
  authorize_ = value;
  // @@protoc_insertion_point(field_set:chat.MessageNode.authorize)
}

// optional string creatorID = 3;
void MessageNode::clear_creatorid() {
  creatorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MessageNode::creatorid() const {
  // @@protoc_insertion_point(field_get:chat.MessageNode.creatorID)
  return creatorid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MessageNode::set_creatorid(const ::std::string& value) {
  
  creatorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.MessageNode.creatorID)
}
void MessageNode::set_creatorid(const char* value) {
  
  creatorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.MessageNode.creatorID)
}
void MessageNode::set_creatorid(const char* value, size_t size) {
  
  creatorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.MessageNode.creatorID)
}
::std::string* MessageNode::mutable_creatorid() {
  
  // @@protoc_insertion_point(field_mutable:chat.MessageNode.creatorID)
  return creatorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MessageNode::release_creatorid() {
  // @@protoc_insertion_point(field_release:chat.MessageNode.creatorID)
  
  return creatorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MessageNode::set_allocated_creatorid(::std::string* creatorid) {
  if (creatorid != NULL) {
    
  } else {
    
  }
  creatorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), creatorid);
  // @@protoc_insertion_point(field_set_allocated:chat.MessageNode.creatorID)
}

// optional string nickname = 4;
void MessageNode::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MessageNode::nickname() const {
  // @@protoc_insertion_point(field_get:chat.MessageNode.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MessageNode::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.MessageNode.nickname)
}
void MessageNode::set_nickname(const char* value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.MessageNode.nickname)
}
void MessageNode::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.MessageNode.nickname)
}
::std::string* MessageNode::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:chat.MessageNode.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MessageNode::release_nickname() {
  // @@protoc_insertion_point(field_release:chat.MessageNode.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MessageNode::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:chat.MessageNode.nickname)
}

// optional int32 version = 5;
void MessageNode::clear_version() {
  version_ = 0;
}
::google::protobuf::int32 MessageNode::version() const {
  // @@protoc_insertion_point(field_get:chat.MessageNode.version)
  return version_;
}
void MessageNode::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:chat.MessageNode.version)
}

// repeated string managerIDs = 6;
int MessageNode::managerids_size() const {
  return managerids_.size();
}
void MessageNode::clear_managerids() {
  managerids_.Clear();
}
const ::std::string& MessageNode::managerids(int index) const {
  // @@protoc_insertion_point(field_get:chat.MessageNode.managerIDs)
  return managerids_.Get(index);
}
::std::string* MessageNode::mutable_managerids(int index) {
  // @@protoc_insertion_point(field_mutable:chat.MessageNode.managerIDs)
  return managerids_.Mutable(index);
}
void MessageNode::set_managerids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chat.MessageNode.managerIDs)
  managerids_.Mutable(index)->assign(value);
}
void MessageNode::set_managerids(int index, const char* value) {
  managerids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.MessageNode.managerIDs)
}
void MessageNode::set_managerids(int index, const char* value, size_t size) {
  managerids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.MessageNode.managerIDs)
}
::std::string* MessageNode::add_managerids() {
  // @@protoc_insertion_point(field_add_mutable:chat.MessageNode.managerIDs)
  return managerids_.Add();
}
void MessageNode::add_managerids(const ::std::string& value) {
  managerids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chat.MessageNode.managerIDs)
}
void MessageNode::add_managerids(const char* value) {
  managerids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chat.MessageNode.managerIDs)
}
void MessageNode::add_managerids(const char* value, size_t size) {
  managerids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chat.MessageNode.managerIDs)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
MessageNode::managerids() const {
  // @@protoc_insertion_point(field_list:chat.MessageNode.managerIDs)
  return managerids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
MessageNode::mutable_managerids() {
  // @@protoc_insertion_point(field_mutable_list:chat.MessageNode.managerIDs)
  return &managerids_;
}

// repeated string members = 7;
int MessageNode::members_size() const {
  return members_.size();
}
void MessageNode::clear_members() {
  members_.Clear();
}
const ::std::string& MessageNode::members(int index) const {
  // @@protoc_insertion_point(field_get:chat.MessageNode.members)
  return members_.Get(index);
}
::std::string* MessageNode::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:chat.MessageNode.members)
  return members_.Mutable(index);
}
void MessageNode::set_members(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chat.MessageNode.members)
  members_.Mutable(index)->assign(value);
}
void MessageNode::set_members(int index, const char* value) {
  members_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.MessageNode.members)
}
void MessageNode::set_members(int index, const char* value, size_t size) {
  members_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.MessageNode.members)
}
::std::string* MessageNode::add_members() {
  // @@protoc_insertion_point(field_add_mutable:chat.MessageNode.members)
  return members_.Add();
}
void MessageNode::add_members(const ::std::string& value) {
  members_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chat.MessageNode.members)
}
void MessageNode::add_members(const char* value) {
  members_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chat.MessageNode.members)
}
void MessageNode::add_members(const char* value, size_t size) {
  members_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chat.MessageNode.members)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
MessageNode::members() const {
  // @@protoc_insertion_point(field_list:chat.MessageNode.members)
  return members_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
MessageNode::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:chat.MessageNode.members)
  return &members_;
}

inline const MessageNode* MessageNode::internal_default_instance() {
  return &MessageNode_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserInfo::kToNodeIDFieldNumber;
const int UserInfo::kUserIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserInfo::UserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.UserInfo)
}

void UserInfo::InitAsDefaultInstance() {
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.UserInfo)
}

void UserInfo::SharedCtor() {
  tonodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:chat.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  tonodeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<UserInfo> UserInfo_default_instance_;

UserInfo* UserInfo::New(::google::protobuf::Arena* arena) const {
  UserInfo* n = new UserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.UserInfo)
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string toNodeID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tonodeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tonodeid().data(), this->tonodeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.UserInfo.toNodeID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userID;
        break;
      }

      // optional string userID = 2;
      case 2: {
        if (tag == 18) {
         parse_userID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.UserInfo.userID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.UserInfo)
  return false;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.UserInfo)
  // optional string toNodeID = 1;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.UserInfo.toNodeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tonodeid(), output);
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.UserInfo.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.UserInfo)
}

::google::protobuf::uint8* UserInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.UserInfo)
  // optional string toNodeID = 1;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.UserInfo.toNodeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tonodeid(), target);
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.UserInfo.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.UserInfo)
  size_t total_size = 0;

  // optional string toNodeID = 1;
  if (this->tonodeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tonodeid());
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.UserInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.UserInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.UserInfo)
    UnsafeMergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.UserInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void UserInfo::UnsafeMergeFrom(const UserInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.tonodeid().size() > 0) {

    tonodeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tonodeid_);
  }
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.UserInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool UserInfo::IsInitialized() const {

  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserInfo::InternalSwap(UserInfo* other) {
  tonodeid_.Swap(&other->tonodeid_);
  userid_.Swap(&other->userid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserInfo

// optional string toNodeID = 1;
void UserInfo::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserInfo::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.UserInfo.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfo::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.UserInfo.toNodeID)
}
void UserInfo::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.UserInfo.toNodeID)
}
void UserInfo::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.UserInfo.toNodeID)
}
::std::string* UserInfo::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.UserInfo.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfo::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.UserInfo.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfo::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.UserInfo.toNodeID)
}

// optional string userID = 2;
void UserInfo::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserInfo::userid() const {
  // @@protoc_insertion_point(field_get:chat.UserInfo.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfo::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.UserInfo.userID)
}
void UserInfo::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.UserInfo.userID)
}
void UserInfo::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.UserInfo.userID)
}
::std::string* UserInfo::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:chat.UserInfo.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfo::release_userid() {
  // @@protoc_insertion_point(field_release:chat.UserInfo.userID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfo::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:chat.UserInfo.userID)
}

inline const UserInfo* UserInfo::internal_default_instance() {
  return &UserInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int User::kIdFieldNumber;
const int User::kRealnameFieldNumber;
const int User::kNicknameFieldNumber;
const int User::kIconFieldNumber;
const int User::kDescriptionFieldNumber;
const int User::kIsMaleFieldNumber;
const int User::kPhoneNoFieldNumber;
const int User::kCountryCodeFieldNumber;
const int User::kPasswordFieldNumber;
const int User::kBirthdayFieldNumber;
const int User::kVersionFieldNumber;
const int User::kFriendsFieldNumber;
const int User::kBlacklistFieldNumber;
const int User::kGroupNodeIDsFieldNumber;
const int User::kDevicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

User::User()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.User)
}

void User::InitAsDefaultInstance() {
}

User::User(const User& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.User)
}

void User::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  realname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phoneno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  countrycode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ismale_, 0, reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&ismale_) + sizeof(version_));
  _cached_size_ = 0;
}

User::~User() {
  // @@protoc_insertion_point(destructor:chat.User)
  SharedDtor();
}

void User::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  realname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phoneno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  countrycode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_descriptor_;
}

const User& User::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<User> User_default_instance_;

User* User::New(::google::protobuf::Arena* arena) const {
  User* n = new User;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void User::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.User)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(User, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<User*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  realname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ismale_ = false;
  phoneno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  countrycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(birthday_, version_);
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  friends_.Clear();
  blacklist_.Clear();
  groupnodeids_.Clear();
  devices_.Clear();
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.User.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_realname;
        break;
      }

      // optional string realname = 2;
      case 2: {
        if (tag == 18) {
         parse_realname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_realname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->realname().data(), this->realname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.User.realname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nickname;
        break;
      }

      // optional string nickname = 3;
      case 3: {
        if (tag == 26) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.User.nickname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_icon;
        break;
      }

      // optional string icon = 4;
      case 4: {
        if (tag == 34) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.User.icon"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_description;
        break;
      }

      // optional string description = 5;
      case 5: {
        if (tag == 42) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.User.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_isMale;
        break;
      }

      // optional bool isMale = 6;
      case 6: {
        if (tag == 48) {
         parse_isMale:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismale_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_phoneNo;
        break;
      }

      // optional string phoneNo = 7;
      case 7: {
        if (tag == 58) {
         parse_phoneNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phoneno()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phoneno().data(), this->phoneno().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.User.phoneNo"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_countryCode;
        break;
      }

      // optional string countryCode = 8;
      case 8: {
        if (tag == 66) {
         parse_countryCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_countrycode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->countrycode().data(), this->countrycode().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.User.countryCode"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_password;
        break;
      }

      // optional string password = 9;
      case 9: {
        if (tag == 74) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.User.password"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_birthday;
        break;
      }

      // optional int32 birthday = 10;
      case 10: {
        if (tag == 80) {
         parse_birthday:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &birthday_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_version;
        break;
      }

      // optional int32 version = 11;
      case 11: {
        if (tag == 88) {
         parse_version:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_friends;
        break;
      }

      // repeated .chat.UserInfo friends = 12;
      case 12: {
        if (tag == 98) {
         parse_friends:
          DO_(input->IncrementRecursionDepth());
         parse_loop_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_friends()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_loop_friends;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(106)) goto parse_blacklist;
        break;
      }

      // repeated string blacklist = 13;
      case 13: {
        if (tag == 106) {
         parse_blacklist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_blacklist()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->blacklist(this->blacklist_size() - 1).data(),
            this->blacklist(this->blacklist_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.User.blacklist"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_blacklist;
        if (input->ExpectTag(114)) goto parse_groupNodeIDs;
        break;
      }

      // repeated string groupNodeIDs = 14;
      case 14: {
        if (tag == 114) {
         parse_groupNodeIDs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_groupnodeids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->groupnodeids(this->groupnodeids_size() - 1).data(),
            this->groupnodeids(this->groupnodeids_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.User.groupNodeIDs"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_groupNodeIDs;
        if (input->ExpectTag(122)) goto parse_devices;
        break;
      }

      // repeated .chat.Device devices = 15;
      case 15: {
        if (tag == 122) {
         parse_devices:
          DO_(input->IncrementRecursionDepth());
         parse_loop_devices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_devices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_loop_devices;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.User)
  return false;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.User)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.User.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string realname = 2;
  if (this->realname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->realname().data(), this->realname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.User.realname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->realname(), output);
  }

  // optional string nickname = 3;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.User.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nickname(), output);
  }

  // optional string icon = 4;
  if (this->icon().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.User.icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->icon(), output);
  }

  // optional string description = 5;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.User.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->description(), output);
  }

  // optional bool isMale = 6;
  if (this->ismale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->ismale(), output);
  }

  // optional string phoneNo = 7;
  if (this->phoneno().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phoneno().data(), this->phoneno().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.User.phoneNo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->phoneno(), output);
  }

  // optional string countryCode = 8;
  if (this->countrycode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->countrycode().data(), this->countrycode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.User.countryCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->countrycode(), output);
  }

  // optional string password = 9;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.User.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->password(), output);
  }

  // optional int32 birthday = 10;
  if (this->birthday() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->birthday(), output);
  }

  // optional int32 version = 11;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->version(), output);
  }

  // repeated .chat.UserInfo friends = 12;
  for (unsigned int i = 0, n = this->friends_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->friends(i), output);
  }

  // repeated string blacklist = 13;
  for (int i = 0; i < this->blacklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->blacklist(i).data(), this->blacklist(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.User.blacklist");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->blacklist(i), output);
  }

  // repeated string groupNodeIDs = 14;
  for (int i = 0; i < this->groupnodeids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->groupnodeids(i).data(), this->groupnodeids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.User.groupNodeIDs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->groupnodeids(i), output);
  }

  // repeated .chat.Device devices = 15;
  for (unsigned int i = 0, n = this->devices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->devices(i), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.User)
}

::google::protobuf::uint8* User::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.User)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.User.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string realname = 2;
  if (this->realname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->realname().data(), this->realname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.User.realname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->realname(), target);
  }

  // optional string nickname = 3;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.User.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nickname(), target);
  }

  // optional string icon = 4;
  if (this->icon().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.User.icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->icon(), target);
  }

  // optional string description = 5;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.User.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  // optional bool isMale = 6;
  if (this->ismale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->ismale(), target);
  }

  // optional string phoneNo = 7;
  if (this->phoneno().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phoneno().data(), this->phoneno().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.User.phoneNo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->phoneno(), target);
  }

  // optional string countryCode = 8;
  if (this->countrycode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->countrycode().data(), this->countrycode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.User.countryCode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->countrycode(), target);
  }

  // optional string password = 9;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.User.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->password(), target);
  }

  // optional int32 birthday = 10;
  if (this->birthday() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->birthday(), target);
  }

  // optional int32 version = 11;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->version(), target);
  }

  // repeated .chat.UserInfo friends = 12;
  for (unsigned int i = 0, n = this->friends_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->friends(i), false, target);
  }

  // repeated string blacklist = 13;
  for (int i = 0; i < this->blacklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->blacklist(i).data(), this->blacklist(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.User.blacklist");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->blacklist(i), target);
  }

  // repeated string groupNodeIDs = 14;
  for (int i = 0; i < this->groupnodeids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->groupnodeids(i).data(), this->groupnodeids(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.User.groupNodeIDs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(14, this->groupnodeids(i), target);
  }

  // repeated .chat.Device devices = 15;
  for (unsigned int i = 0, n = this->devices_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->devices(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.User)
  return target;
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.User)
  size_t total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string realname = 2;
  if (this->realname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->realname());
  }

  // optional string nickname = 3;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  // optional string icon = 4;
  if (this->icon().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->icon());
  }

  // optional string description = 5;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional bool isMale = 6;
  if (this->ismale() != 0) {
    total_size += 1 + 1;
  }

  // optional string phoneNo = 7;
  if (this->phoneno().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->phoneno());
  }

  // optional string countryCode = 8;
  if (this->countrycode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->countrycode());
  }

  // optional string password = 9;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // optional int32 birthday = 10;
  if (this->birthday() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->birthday());
  }

  // optional int32 version = 11;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  // repeated .chat.UserInfo friends = 12;
  {
    unsigned int count = this->friends_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friends(i));
    }
  }

  // repeated string blacklist = 13;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->blacklist_size());
  for (int i = 0; i < this->blacklist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->blacklist(i));
  }

  // repeated string groupNodeIDs = 14;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->groupnodeids_size());
  for (int i = 0; i < this->groupnodeids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->groupnodeids(i));
  }

  // repeated .chat.Device devices = 15;
  {
    unsigned int count = this->devices_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->devices(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.User)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const User* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const User>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.User)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.User)
    UnsafeMergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.User)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void User::UnsafeMergeFrom(const User& from) {
  GOOGLE_DCHECK(&from != this);
  friends_.MergeFrom(from.friends_);
  blacklist_.UnsafeMergeFrom(from.blacklist_);
  groupnodeids_.UnsafeMergeFrom(from.groupnodeids_);
  devices_.MergeFrom(from.devices_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.realname().size() > 0) {

    realname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.realname_);
  }
  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.icon().size() > 0) {

    icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.ismale() != 0) {
    set_ismale(from.ismale());
  }
  if (from.phoneno().size() > 0) {

    phoneno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phoneno_);
  }
  if (from.countrycode().size() > 0) {

    countrycode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.countrycode_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.birthday() != 0) {
    set_birthday(from.birthday());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.User)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool User::IsInitialized() const {

  return true;
}

void User::Swap(User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void User::InternalSwap(User* other) {
  id_.Swap(&other->id_);
  realname_.Swap(&other->realname_);
  nickname_.Swap(&other->nickname_);
  icon_.Swap(&other->icon_);
  description_.Swap(&other->description_);
  std::swap(ismale_, other->ismale_);
  phoneno_.Swap(&other->phoneno_);
  countrycode_.Swap(&other->countrycode_);
  password_.Swap(&other->password_);
  std::swap(birthday_, other->birthday_);
  std::swap(version_, other->version_);
  friends_.UnsafeArenaSwap(&other->friends_);
  blacklist_.UnsafeArenaSwap(&other->blacklist_);
  groupnodeids_.UnsafeArenaSwap(&other->groupnodeids_);
  devices_.UnsafeArenaSwap(&other->devices_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = User_descriptor_;
  metadata.reflection = User_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// User

// optional string id = 1;
void User::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& User::id() const {
  // @@protoc_insertion_point(field_get:chat.User.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.User.id)
}
void User::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.User.id)
}
void User::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.User.id)
}
::std::string* User::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:chat.User.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_id() {
  // @@protoc_insertion_point(field_release:chat.User.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:chat.User.id)
}

// optional string realname = 2;
void User::clear_realname() {
  realname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& User::realname() const {
  // @@protoc_insertion_point(field_get:chat.User.realname)
  return realname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_realname(const ::std::string& value) {
  
  realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.User.realname)
}
void User::set_realname(const char* value) {
  
  realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.User.realname)
}
void User::set_realname(const char* value, size_t size) {
  
  realname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.User.realname)
}
::std::string* User::mutable_realname() {
  
  // @@protoc_insertion_point(field_mutable:chat.User.realname)
  return realname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_realname() {
  // @@protoc_insertion_point(field_release:chat.User.realname)
  
  return realname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_realname(::std::string* realname) {
  if (realname != NULL) {
    
  } else {
    
  }
  realname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), realname);
  // @@protoc_insertion_point(field_set_allocated:chat.User.realname)
}

// optional string nickname = 3;
void User::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& User::nickname() const {
  // @@protoc_insertion_point(field_get:chat.User.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.User.nickname)
}
void User::set_nickname(const char* value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.User.nickname)
}
void User::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.User.nickname)
}
::std::string* User::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:chat.User.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_nickname() {
  // @@protoc_insertion_point(field_release:chat.User.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:chat.User.nickname)
}

// optional string icon = 4;
void User::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& User::icon() const {
  // @@protoc_insertion_point(field_get:chat.User.icon)
  return icon_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_icon(const ::std::string& value) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.User.icon)
}
void User::set_icon(const char* value) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.User.icon)
}
void User::set_icon(const char* value, size_t size) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.User.icon)
}
::std::string* User::mutable_icon() {
  
  // @@protoc_insertion_point(field_mutable:chat.User.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_icon() {
  // @@protoc_insertion_point(field_release:chat.User.icon)
  
  return icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_icon(::std::string* icon) {
  if (icon != NULL) {
    
  } else {
    
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:chat.User.icon)
}

// optional string description = 5;
void User::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& User::description() const {
  // @@protoc_insertion_point(field_get:chat.User.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.User.description)
}
void User::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.User.description)
}
void User::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.User.description)
}
::std::string* User::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:chat.User.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_description() {
  // @@protoc_insertion_point(field_release:chat.User.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:chat.User.description)
}

// optional bool isMale = 6;
void User::clear_ismale() {
  ismale_ = false;
}
bool User::ismale() const {
  // @@protoc_insertion_point(field_get:chat.User.isMale)
  return ismale_;
}
void User::set_ismale(bool value) {
  
  ismale_ = value;
  // @@protoc_insertion_point(field_set:chat.User.isMale)
}

// optional string phoneNo = 7;
void User::clear_phoneno() {
  phoneno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& User::phoneno() const {
  // @@protoc_insertion_point(field_get:chat.User.phoneNo)
  return phoneno_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_phoneno(const ::std::string& value) {
  
  phoneno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.User.phoneNo)
}
void User::set_phoneno(const char* value) {
  
  phoneno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.User.phoneNo)
}
void User::set_phoneno(const char* value, size_t size) {
  
  phoneno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.User.phoneNo)
}
::std::string* User::mutable_phoneno() {
  
  // @@protoc_insertion_point(field_mutable:chat.User.phoneNo)
  return phoneno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_phoneno() {
  // @@protoc_insertion_point(field_release:chat.User.phoneNo)
  
  return phoneno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_phoneno(::std::string* phoneno) {
  if (phoneno != NULL) {
    
  } else {
    
  }
  phoneno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phoneno);
  // @@protoc_insertion_point(field_set_allocated:chat.User.phoneNo)
}

// optional string countryCode = 8;
void User::clear_countrycode() {
  countrycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& User::countrycode() const {
  // @@protoc_insertion_point(field_get:chat.User.countryCode)
  return countrycode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_countrycode(const ::std::string& value) {
  
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.User.countryCode)
}
void User::set_countrycode(const char* value) {
  
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.User.countryCode)
}
void User::set_countrycode(const char* value, size_t size) {
  
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.User.countryCode)
}
::std::string* User::mutable_countrycode() {
  
  // @@protoc_insertion_point(field_mutable:chat.User.countryCode)
  return countrycode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_countrycode() {
  // @@protoc_insertion_point(field_release:chat.User.countryCode)
  
  return countrycode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_countrycode(::std::string* countrycode) {
  if (countrycode != NULL) {
    
  } else {
    
  }
  countrycode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), countrycode);
  // @@protoc_insertion_point(field_set_allocated:chat.User.countryCode)
}

// optional string password = 9;
void User::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& User::password() const {
  // @@protoc_insertion_point(field_get:chat.User.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.User.password)
}
void User::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.User.password)
}
void User::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.User.password)
}
::std::string* User::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:chat.User.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_password() {
  // @@protoc_insertion_point(field_release:chat.User.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:chat.User.password)
}

// optional int32 birthday = 10;
void User::clear_birthday() {
  birthday_ = 0;
}
::google::protobuf::int32 User::birthday() const {
  // @@protoc_insertion_point(field_get:chat.User.birthday)
  return birthday_;
}
void User::set_birthday(::google::protobuf::int32 value) {
  
  birthday_ = value;
  // @@protoc_insertion_point(field_set:chat.User.birthday)
}

// optional int32 version = 11;
void User::clear_version() {
  version_ = 0;
}
::google::protobuf::int32 User::version() const {
  // @@protoc_insertion_point(field_get:chat.User.version)
  return version_;
}
void User::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:chat.User.version)
}

// repeated .chat.UserInfo friends = 12;
int User::friends_size() const {
  return friends_.size();
}
void User::clear_friends() {
  friends_.Clear();
}
const ::chat::UserInfo& User::friends(int index) const {
  // @@protoc_insertion_point(field_get:chat.User.friends)
  return friends_.Get(index);
}
::chat::UserInfo* User::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:chat.User.friends)
  return friends_.Mutable(index);
}
::chat::UserInfo* User::add_friends() {
  // @@protoc_insertion_point(field_add:chat.User.friends)
  return friends_.Add();
}
::google::protobuf::RepeatedPtrField< ::chat::UserInfo >*
User::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:chat.User.friends)
  return &friends_;
}
const ::google::protobuf::RepeatedPtrField< ::chat::UserInfo >&
User::friends() const {
  // @@protoc_insertion_point(field_list:chat.User.friends)
  return friends_;
}

// repeated string blacklist = 13;
int User::blacklist_size() const {
  return blacklist_.size();
}
void User::clear_blacklist() {
  blacklist_.Clear();
}
const ::std::string& User::blacklist(int index) const {
  // @@protoc_insertion_point(field_get:chat.User.blacklist)
  return blacklist_.Get(index);
}
::std::string* User::mutable_blacklist(int index) {
  // @@protoc_insertion_point(field_mutable:chat.User.blacklist)
  return blacklist_.Mutable(index);
}
void User::set_blacklist(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chat.User.blacklist)
  blacklist_.Mutable(index)->assign(value);
}
void User::set_blacklist(int index, const char* value) {
  blacklist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.User.blacklist)
}
void User::set_blacklist(int index, const char* value, size_t size) {
  blacklist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.User.blacklist)
}
::std::string* User::add_blacklist() {
  // @@protoc_insertion_point(field_add_mutable:chat.User.blacklist)
  return blacklist_.Add();
}
void User::add_blacklist(const ::std::string& value) {
  blacklist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chat.User.blacklist)
}
void User::add_blacklist(const char* value) {
  blacklist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chat.User.blacklist)
}
void User::add_blacklist(const char* value, size_t size) {
  blacklist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chat.User.blacklist)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
User::blacklist() const {
  // @@protoc_insertion_point(field_list:chat.User.blacklist)
  return blacklist_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
User::mutable_blacklist() {
  // @@protoc_insertion_point(field_mutable_list:chat.User.blacklist)
  return &blacklist_;
}

// repeated string groupNodeIDs = 14;
int User::groupnodeids_size() const {
  return groupnodeids_.size();
}
void User::clear_groupnodeids() {
  groupnodeids_.Clear();
}
const ::std::string& User::groupnodeids(int index) const {
  // @@protoc_insertion_point(field_get:chat.User.groupNodeIDs)
  return groupnodeids_.Get(index);
}
::std::string* User::mutable_groupnodeids(int index) {
  // @@protoc_insertion_point(field_mutable:chat.User.groupNodeIDs)
  return groupnodeids_.Mutable(index);
}
void User::set_groupnodeids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chat.User.groupNodeIDs)
  groupnodeids_.Mutable(index)->assign(value);
}
void User::set_groupnodeids(int index, const char* value) {
  groupnodeids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.User.groupNodeIDs)
}
void User::set_groupnodeids(int index, const char* value, size_t size) {
  groupnodeids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.User.groupNodeIDs)
}
::std::string* User::add_groupnodeids() {
  // @@protoc_insertion_point(field_add_mutable:chat.User.groupNodeIDs)
  return groupnodeids_.Add();
}
void User::add_groupnodeids(const ::std::string& value) {
  groupnodeids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chat.User.groupNodeIDs)
}
void User::add_groupnodeids(const char* value) {
  groupnodeids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chat.User.groupNodeIDs)
}
void User::add_groupnodeids(const char* value, size_t size) {
  groupnodeids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chat.User.groupNodeIDs)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
User::groupnodeids() const {
  // @@protoc_insertion_point(field_list:chat.User.groupNodeIDs)
  return groupnodeids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
User::mutable_groupnodeids() {
  // @@protoc_insertion_point(field_mutable_list:chat.User.groupNodeIDs)
  return &groupnodeids_;
}

// repeated .chat.Device devices = 15;
int User::devices_size() const {
  return devices_.size();
}
void User::clear_devices() {
  devices_.Clear();
}
const ::chat::Device& User::devices(int index) const {
  // @@protoc_insertion_point(field_get:chat.User.devices)
  return devices_.Get(index);
}
::chat::Device* User::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:chat.User.devices)
  return devices_.Mutable(index);
}
::chat::Device* User::add_devices() {
  // @@protoc_insertion_point(field_add:chat.User.devices)
  return devices_.Add();
}
::google::protobuf::RepeatedPtrField< ::chat::Device >*
User::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:chat.User.devices)
  return &devices_;
}
const ::google::protobuf::RepeatedPtrField< ::chat::Device >&
User::devices() const {
  // @@protoc_insertion_point(field_list:chat.User.devices)
  return devices_;
}

inline const User* User::internal_default_instance() {
  return &User_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryUser::kUserIDFieldNumber;
const int QueryUser::kCountryCodeFieldNumber;
const int QueryUser::kPhoneNoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryUser::QueryUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.QueryUser)
}

void QueryUser::InitAsDefaultInstance() {
}

QueryUser::QueryUser(const QueryUser& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.QueryUser)
}

void QueryUser::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  countrycode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phoneno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

QueryUser::~QueryUser() {
  // @@protoc_insertion_point(destructor:chat.QueryUser)
  SharedDtor();
}

void QueryUser::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  countrycode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phoneno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QueryUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryUser_descriptor_;
}

const QueryUser& QueryUser::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QueryUser> QueryUser_default_instance_;

QueryUser* QueryUser::New(::google::protobuf::Arena* arena) const {
  QueryUser* n = new QueryUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryUser::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.QueryUser)
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  countrycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phoneno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool QueryUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.QueryUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.QueryUser.userID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_countryCode;
        break;
      }

      // optional string countryCode = 2;
      case 2: {
        if (tag == 18) {
         parse_countryCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_countrycode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->countrycode().data(), this->countrycode().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.QueryUser.countryCode"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_phoneNo;
        break;
      }

      // optional string phoneNo = 3;
      case 3: {
        if (tag == 26) {
         parse_phoneNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phoneno()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phoneno().data(), this->phoneno().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.QueryUser.phoneNo"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.QueryUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.QueryUser)
  return false;
#undef DO_
}

void QueryUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.QueryUser)
  // optional string userID = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryUser.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // optional string countryCode = 2;
  if (this->countrycode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->countrycode().data(), this->countrycode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryUser.countryCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->countrycode(), output);
  }

  // optional string phoneNo = 3;
  if (this->phoneno().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phoneno().data(), this->phoneno().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryUser.phoneNo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->phoneno(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.QueryUser)
}

::google::protobuf::uint8* QueryUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.QueryUser)
  // optional string userID = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryUser.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // optional string countryCode = 2;
  if (this->countrycode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->countrycode().data(), this->countrycode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryUser.countryCode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->countrycode(), target);
  }

  // optional string phoneNo = 3;
  if (this->phoneno().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phoneno().data(), this->phoneno().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryUser.phoneNo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->phoneno(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.QueryUser)
  return target;
}

size_t QueryUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.QueryUser)
  size_t total_size = 0;

  // optional string userID = 1;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // optional string countryCode = 2;
  if (this->countrycode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->countrycode());
  }

  // optional string phoneNo = 3;
  if (this->phoneno().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->phoneno());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.QueryUser)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.QueryUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.QueryUser)
    UnsafeMergeFrom(*source);
  }
}

void QueryUser::MergeFrom(const QueryUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.QueryUser)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QueryUser::UnsafeMergeFrom(const QueryUser& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.countrycode().size() > 0) {

    countrycode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.countrycode_);
  }
  if (from.phoneno().size() > 0) {

    phoneno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phoneno_);
  }
}

void QueryUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.QueryUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryUser::CopyFrom(const QueryUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.QueryUser)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QueryUser::IsInitialized() const {

  return true;
}

void QueryUser::Swap(QueryUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryUser::InternalSwap(QueryUser* other) {
  userid_.Swap(&other->userid_);
  countrycode_.Swap(&other->countrycode_);
  phoneno_.Swap(&other->phoneno_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryUser_descriptor_;
  metadata.reflection = QueryUser_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryUser

// optional string userID = 1;
void QueryUser::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QueryUser::userid() const {
  // @@protoc_insertion_point(field_get:chat.QueryUser.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryUser::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryUser.userID)
}
void QueryUser::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryUser.userID)
}
void QueryUser::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryUser.userID)
}
::std::string* QueryUser::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryUser.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryUser::release_userid() {
  // @@protoc_insertion_point(field_release:chat.QueryUser.userID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryUser::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryUser.userID)
}

// optional string countryCode = 2;
void QueryUser::clear_countrycode() {
  countrycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QueryUser::countrycode() const {
  // @@protoc_insertion_point(field_get:chat.QueryUser.countryCode)
  return countrycode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryUser::set_countrycode(const ::std::string& value) {
  
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryUser.countryCode)
}
void QueryUser::set_countrycode(const char* value) {
  
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryUser.countryCode)
}
void QueryUser::set_countrycode(const char* value, size_t size) {
  
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryUser.countryCode)
}
::std::string* QueryUser::mutable_countrycode() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryUser.countryCode)
  return countrycode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryUser::release_countrycode() {
  // @@protoc_insertion_point(field_release:chat.QueryUser.countryCode)
  
  return countrycode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryUser::set_allocated_countrycode(::std::string* countrycode) {
  if (countrycode != NULL) {
    
  } else {
    
  }
  countrycode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), countrycode);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryUser.countryCode)
}

// optional string phoneNo = 3;
void QueryUser::clear_phoneno() {
  phoneno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QueryUser::phoneno() const {
  // @@protoc_insertion_point(field_get:chat.QueryUser.phoneNo)
  return phoneno_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryUser::set_phoneno(const ::std::string& value) {
  
  phoneno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryUser.phoneNo)
}
void QueryUser::set_phoneno(const char* value) {
  
  phoneno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryUser.phoneNo)
}
void QueryUser::set_phoneno(const char* value, size_t size) {
  
  phoneno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryUser.phoneNo)
}
::std::string* QueryUser::mutable_phoneno() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryUser.phoneNo)
  return phoneno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryUser::release_phoneno() {
  // @@protoc_insertion_point(field_release:chat.QueryUser.phoneNo)
  
  return phoneno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryUser::set_allocated_phoneno(::std::string* phoneno) {
  if (phoneno != NULL) {
    
  } else {
    
  }
  phoneno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phoneno);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryUser.phoneNo)
}

inline const QueryUser* QueryUser::internal_default_instance() {
  return &QueryUser_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryUserRes::kToUserIDOuterFieldNumber;
const int QueryUserRes::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryUserRes::QueryUserRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.QueryUserRes)
}

void QueryUserRes::InitAsDefaultInstance() {
  user_ = const_cast< ::chat::User*>(
      ::chat::User::internal_default_instance());
}

QueryUserRes::QueryUserRes(const QueryUserRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.QueryUserRes)
}

void QueryUserRes::SharedCtor() {
  touserid_outer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_ = NULL;
  _cached_size_ = 0;
}

QueryUserRes::~QueryUserRes() {
  // @@protoc_insertion_point(destructor:chat.QueryUserRes)
  SharedDtor();
}

void QueryUserRes::SharedDtor() {
  touserid_outer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &QueryUserRes_default_instance_.get()) {
    delete user_;
  }
}

void QueryUserRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryUserRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryUserRes_descriptor_;
}

const QueryUserRes& QueryUserRes::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QueryUserRes> QueryUserRes_default_instance_;

QueryUserRes* QueryUserRes::New(::google::protobuf::Arena* arena) const {
  QueryUserRes* n = new QueryUserRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryUserRes::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.QueryUserRes)
  touserid_outer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
}

bool QueryUserRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.QueryUserRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string toUserID_outer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_touserid_outer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->touserid_outer().data(), this->touserid_outer().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.QueryUserRes.toUserID_outer"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }

      // optional .chat.User user = 2;
      case 2: {
        if (tag == 18) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.QueryUserRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.QueryUserRes)
  return false;
#undef DO_
}

void QueryUserRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.QueryUserRes)
  // optional string toUserID_outer = 1;
  if (this->touserid_outer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->touserid_outer().data(), this->touserid_outer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryUserRes.toUserID_outer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->touserid_outer(), output);
  }

  // optional .chat.User user = 2;
  if (this->has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->user_, output);
  }

  // @@protoc_insertion_point(serialize_end:chat.QueryUserRes)
}

::google::protobuf::uint8* QueryUserRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.QueryUserRes)
  // optional string toUserID_outer = 1;
  if (this->touserid_outer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->touserid_outer().data(), this->touserid_outer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryUserRes.toUserID_outer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->touserid_outer(), target);
  }

  // optional .chat.User user = 2;
  if (this->has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->user_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.QueryUserRes)
  return target;
}

size_t QueryUserRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.QueryUserRes)
  size_t total_size = 0;

  // optional string toUserID_outer = 1;
  if (this->touserid_outer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->touserid_outer());
  }

  // optional .chat.User user = 2;
  if (this->has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryUserRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.QueryUserRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryUserRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryUserRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.QueryUserRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.QueryUserRes)
    UnsafeMergeFrom(*source);
  }
}

void QueryUserRes::MergeFrom(const QueryUserRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.QueryUserRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QueryUserRes::UnsafeMergeFrom(const QueryUserRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.touserid_outer().size() > 0) {

    touserid_outer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.touserid_outer_);
  }
  if (from.has_user()) {
    mutable_user()->::chat::User::MergeFrom(from.user());
  }
}

void QueryUserRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.QueryUserRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryUserRes::CopyFrom(const QueryUserRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.QueryUserRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QueryUserRes::IsInitialized() const {

  return true;
}

void QueryUserRes::Swap(QueryUserRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryUserRes::InternalSwap(QueryUserRes* other) {
  touserid_outer_.Swap(&other->touserid_outer_);
  std::swap(user_, other->user_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryUserRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryUserRes_descriptor_;
  metadata.reflection = QueryUserRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryUserRes

// optional string toUserID_outer = 1;
void QueryUserRes::clear_touserid_outer() {
  touserid_outer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QueryUserRes::touserid_outer() const {
  // @@protoc_insertion_point(field_get:chat.QueryUserRes.toUserID_outer)
  return touserid_outer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryUserRes::set_touserid_outer(const ::std::string& value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryUserRes.toUserID_outer)
}
void QueryUserRes::set_touserid_outer(const char* value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryUserRes.toUserID_outer)
}
void QueryUserRes::set_touserid_outer(const char* value, size_t size) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryUserRes.toUserID_outer)
}
::std::string* QueryUserRes::mutable_touserid_outer() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryUserRes.toUserID_outer)
  return touserid_outer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryUserRes::release_touserid_outer() {
  // @@protoc_insertion_point(field_release:chat.QueryUserRes.toUserID_outer)
  
  return touserid_outer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryUserRes::set_allocated_touserid_outer(::std::string* touserid_outer) {
  if (touserid_outer != NULL) {
    
  } else {
    
  }
  touserid_outer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), touserid_outer);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryUserRes.toUserID_outer)
}

// optional .chat.User user = 2;
bool QueryUserRes::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
void QueryUserRes::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
}
const ::chat::User& QueryUserRes::user() const {
  // @@protoc_insertion_point(field_get:chat.QueryUserRes.user)
  return user_ != NULL ? *user_
                         : *::chat::User::internal_default_instance();
}
::chat::User* QueryUserRes::mutable_user() {
  
  if (user_ == NULL) {
    user_ = new ::chat::User;
  }
  // @@protoc_insertion_point(field_mutable:chat.QueryUserRes.user)
  return user_;
}
::chat::User* QueryUserRes::release_user() {
  // @@protoc_insertion_point(field_release:chat.QueryUserRes.user)
  
  ::chat::User* temp = user_;
  user_ = NULL;
  return temp;
}
void QueryUserRes::set_allocated_user(::chat::User* user) {
  delete user_;
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chat.QueryUserRes.user)
}

inline const QueryUserRes* QueryUserRes::internal_default_instance() {
  return &QueryUserRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryUserVersion::kUserIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryUserVersion::QueryUserVersion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.QueryUserVersion)
}

void QueryUserVersion::InitAsDefaultInstance() {
}

QueryUserVersion::QueryUserVersion(const QueryUserVersion& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.QueryUserVersion)
}

void QueryUserVersion::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

QueryUserVersion::~QueryUserVersion() {
  // @@protoc_insertion_point(destructor:chat.QueryUserVersion)
  SharedDtor();
}

void QueryUserVersion::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QueryUserVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryUserVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryUserVersion_descriptor_;
}

const QueryUserVersion& QueryUserVersion::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QueryUserVersion> QueryUserVersion_default_instance_;

QueryUserVersion* QueryUserVersion::New(::google::protobuf::Arena* arena) const {
  QueryUserVersion* n = new QueryUserVersion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryUserVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.QueryUserVersion)
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool QueryUserVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.QueryUserVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.QueryUserVersion.userID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.QueryUserVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.QueryUserVersion)
  return false;
#undef DO_
}

void QueryUserVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.QueryUserVersion)
  // optional string userID = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryUserVersion.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.QueryUserVersion)
}

::google::protobuf::uint8* QueryUserVersion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.QueryUserVersion)
  // optional string userID = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryUserVersion.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.QueryUserVersion)
  return target;
}

size_t QueryUserVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.QueryUserVersion)
  size_t total_size = 0;

  // optional string userID = 1;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryUserVersion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.QueryUserVersion)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryUserVersion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryUserVersion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.QueryUserVersion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.QueryUserVersion)
    UnsafeMergeFrom(*source);
  }
}

void QueryUserVersion::MergeFrom(const QueryUserVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.QueryUserVersion)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QueryUserVersion::UnsafeMergeFrom(const QueryUserVersion& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
}

void QueryUserVersion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.QueryUserVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryUserVersion::CopyFrom(const QueryUserVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.QueryUserVersion)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QueryUserVersion::IsInitialized() const {

  return true;
}

void QueryUserVersion::Swap(QueryUserVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryUserVersion::InternalSwap(QueryUserVersion* other) {
  userid_.Swap(&other->userid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryUserVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryUserVersion_descriptor_;
  metadata.reflection = QueryUserVersion_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryUserVersion

// optional string userID = 1;
void QueryUserVersion::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QueryUserVersion::userid() const {
  // @@protoc_insertion_point(field_get:chat.QueryUserVersion.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryUserVersion::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryUserVersion.userID)
}
void QueryUserVersion::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryUserVersion.userID)
}
void QueryUserVersion::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryUserVersion.userID)
}
::std::string* QueryUserVersion::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryUserVersion.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryUserVersion::release_userid() {
  // @@protoc_insertion_point(field_release:chat.QueryUserVersion.userID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryUserVersion::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryUserVersion.userID)
}

inline const QueryUserVersion* QueryUserVersion::internal_default_instance() {
  return &QueryUserVersion_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryUserVersionRes::kUserIDFieldNumber;
const int QueryUserVersionRes::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryUserVersionRes::QueryUserVersionRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.QueryUserVersionRes)
}

void QueryUserVersionRes::InitAsDefaultInstance() {
}

QueryUserVersionRes::QueryUserVersionRes(const QueryUserVersionRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.QueryUserVersionRes)
}

void QueryUserVersionRes::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  _cached_size_ = 0;
}

QueryUserVersionRes::~QueryUserVersionRes() {
  // @@protoc_insertion_point(destructor:chat.QueryUserVersionRes)
  SharedDtor();
}

void QueryUserVersionRes::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QueryUserVersionRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryUserVersionRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryUserVersionRes_descriptor_;
}

const QueryUserVersionRes& QueryUserVersionRes::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QueryUserVersionRes> QueryUserVersionRes_default_instance_;

QueryUserVersionRes* QueryUserVersionRes::New(::google::protobuf::Arena* arena) const {
  QueryUserVersionRes* n = new QueryUserVersionRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryUserVersionRes::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.QueryUserVersionRes)
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
}

bool QueryUserVersionRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.QueryUserVersionRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.QueryUserVersionRes.userID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional int32 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.QueryUserVersionRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.QueryUserVersionRes)
  return false;
#undef DO_
}

void QueryUserVersionRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.QueryUserVersionRes)
  // optional string userID = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryUserVersionRes.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // optional int32 version = 2;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->version(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.QueryUserVersionRes)
}

::google::protobuf::uint8* QueryUserVersionRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.QueryUserVersionRes)
  // optional string userID = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryUserVersionRes.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // optional int32 version = 2;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.QueryUserVersionRes)
  return target;
}

size_t QueryUserVersionRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.QueryUserVersionRes)
  size_t total_size = 0;

  // optional string userID = 1;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // optional int32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryUserVersionRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.QueryUserVersionRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryUserVersionRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryUserVersionRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.QueryUserVersionRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.QueryUserVersionRes)
    UnsafeMergeFrom(*source);
  }
}

void QueryUserVersionRes::MergeFrom(const QueryUserVersionRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.QueryUserVersionRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QueryUserVersionRes::UnsafeMergeFrom(const QueryUserVersionRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void QueryUserVersionRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.QueryUserVersionRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryUserVersionRes::CopyFrom(const QueryUserVersionRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.QueryUserVersionRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QueryUserVersionRes::IsInitialized() const {

  return true;
}

void QueryUserVersionRes::Swap(QueryUserVersionRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryUserVersionRes::InternalSwap(QueryUserVersionRes* other) {
  userid_.Swap(&other->userid_);
  std::swap(version_, other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryUserVersionRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryUserVersionRes_descriptor_;
  metadata.reflection = QueryUserVersionRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryUserVersionRes

// optional string userID = 1;
void QueryUserVersionRes::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QueryUserVersionRes::userid() const {
  // @@protoc_insertion_point(field_get:chat.QueryUserVersionRes.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryUserVersionRes::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryUserVersionRes.userID)
}
void QueryUserVersionRes::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryUserVersionRes.userID)
}
void QueryUserVersionRes::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryUserVersionRes.userID)
}
::std::string* QueryUserVersionRes::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryUserVersionRes.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryUserVersionRes::release_userid() {
  // @@protoc_insertion_point(field_release:chat.QueryUserVersionRes.userID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryUserVersionRes::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryUserVersionRes.userID)
}

// optional int32 version = 2;
void QueryUserVersionRes::clear_version() {
  version_ = 0;
}
::google::protobuf::int32 QueryUserVersionRes::version() const {
  // @@protoc_insertion_point(field_get:chat.QueryUserVersionRes.version)
  return version_;
}
void QueryUserVersionRes::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:chat.QueryUserVersionRes.version)
}

inline const QueryUserVersionRes* QueryUserVersionRes::internal_default_instance() {
  return &QueryUserVersionRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryNode::kToNodeIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryNode::QueryNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.QueryNode)
}

void QueryNode::InitAsDefaultInstance() {
}

QueryNode::QueryNode(const QueryNode& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.QueryNode)
}

void QueryNode::SharedCtor() {
  tonodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

QueryNode::~QueryNode() {
  // @@protoc_insertion_point(destructor:chat.QueryNode)
  SharedDtor();
}

void QueryNode::SharedDtor() {
  tonodeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QueryNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryNode_descriptor_;
}

const QueryNode& QueryNode::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QueryNode> QueryNode_default_instance_;

QueryNode* QueryNode::New(::google::protobuf::Arena* arena) const {
  QueryNode* n = new QueryNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryNode::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.QueryNode)
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool QueryNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.QueryNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string toNodeID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tonodeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tonodeid().data(), this->tonodeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.QueryNode.toNodeID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.QueryNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.QueryNode)
  return false;
#undef DO_
}

void QueryNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.QueryNode)
  // optional string toNodeID = 1;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryNode.toNodeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tonodeid(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.QueryNode)
}

::google::protobuf::uint8* QueryNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.QueryNode)
  // optional string toNodeID = 1;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryNode.toNodeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tonodeid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.QueryNode)
  return target;
}

size_t QueryNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.QueryNode)
  size_t total_size = 0;

  // optional string toNodeID = 1;
  if (this->tonodeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tonodeid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.QueryNode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryNode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.QueryNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.QueryNode)
    UnsafeMergeFrom(*source);
  }
}

void QueryNode::MergeFrom(const QueryNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.QueryNode)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QueryNode::UnsafeMergeFrom(const QueryNode& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.tonodeid().size() > 0) {

    tonodeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tonodeid_);
  }
}

void QueryNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.QueryNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryNode::CopyFrom(const QueryNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.QueryNode)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QueryNode::IsInitialized() const {

  return true;
}

void QueryNode::Swap(QueryNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryNode::InternalSwap(QueryNode* other) {
  tonodeid_.Swap(&other->tonodeid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryNode_descriptor_;
  metadata.reflection = QueryNode_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryNode

// optional string toNodeID = 1;
void QueryNode::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QueryNode::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.QueryNode.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryNode::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryNode.toNodeID)
}
void QueryNode::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryNode.toNodeID)
}
void QueryNode::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryNode.toNodeID)
}
::std::string* QueryNode::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryNode.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryNode::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.QueryNode.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryNode::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryNode.toNodeID)
}

inline const QueryNode* QueryNode::internal_default_instance() {
  return &QueryNode_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryNodeRes::kToUserIDOuterFieldNumber;
const int QueryNodeRes::kNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryNodeRes::QueryNodeRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.QueryNodeRes)
}

void QueryNodeRes::InitAsDefaultInstance() {
  node_ = const_cast< ::chat::MessageNode*>(
      ::chat::MessageNode::internal_default_instance());
}

QueryNodeRes::QueryNodeRes(const QueryNodeRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.QueryNodeRes)
}

void QueryNodeRes::SharedCtor() {
  touserid_outer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_ = NULL;
  _cached_size_ = 0;
}

QueryNodeRes::~QueryNodeRes() {
  // @@protoc_insertion_point(destructor:chat.QueryNodeRes)
  SharedDtor();
}

void QueryNodeRes::SharedDtor() {
  touserid_outer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &QueryNodeRes_default_instance_.get()) {
    delete node_;
  }
}

void QueryNodeRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryNodeRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryNodeRes_descriptor_;
}

const QueryNodeRes& QueryNodeRes::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QueryNodeRes> QueryNodeRes_default_instance_;

QueryNodeRes* QueryNodeRes::New(::google::protobuf::Arena* arena) const {
  QueryNodeRes* n = new QueryNodeRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryNodeRes::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.QueryNodeRes)
  touserid_outer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
}

bool QueryNodeRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.QueryNodeRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string toUserID_outer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_touserid_outer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->touserid_outer().data(), this->touserid_outer().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.QueryNodeRes.toUserID_outer"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_node;
        break;
      }

      // optional .chat.MessageNode node = 2;
      case 2: {
        if (tag == 18) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.QueryNodeRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.QueryNodeRes)
  return false;
#undef DO_
}

void QueryNodeRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.QueryNodeRes)
  // optional string toUserID_outer = 1;
  if (this->touserid_outer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->touserid_outer().data(), this->touserid_outer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryNodeRes.toUserID_outer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->touserid_outer(), output);
  }

  // optional .chat.MessageNode node = 2;
  if (this->has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->node_, output);
  }

  // @@protoc_insertion_point(serialize_end:chat.QueryNodeRes)
}

::google::protobuf::uint8* QueryNodeRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.QueryNodeRes)
  // optional string toUserID_outer = 1;
  if (this->touserid_outer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->touserid_outer().data(), this->touserid_outer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryNodeRes.toUserID_outer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->touserid_outer(), target);
  }

  // optional .chat.MessageNode node = 2;
  if (this->has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->node_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.QueryNodeRes)
  return target;
}

size_t QueryNodeRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.QueryNodeRes)
  size_t total_size = 0;

  // optional string toUserID_outer = 1;
  if (this->touserid_outer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->touserid_outer());
  }

  // optional .chat.MessageNode node = 2;
  if (this->has_node()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->node_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryNodeRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.QueryNodeRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryNodeRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryNodeRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.QueryNodeRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.QueryNodeRes)
    UnsafeMergeFrom(*source);
  }
}

void QueryNodeRes::MergeFrom(const QueryNodeRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.QueryNodeRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QueryNodeRes::UnsafeMergeFrom(const QueryNodeRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.touserid_outer().size() > 0) {

    touserid_outer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.touserid_outer_);
  }
  if (from.has_node()) {
    mutable_node()->::chat::MessageNode::MergeFrom(from.node());
  }
}

void QueryNodeRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.QueryNodeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryNodeRes::CopyFrom(const QueryNodeRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.QueryNodeRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QueryNodeRes::IsInitialized() const {

  return true;
}

void QueryNodeRes::Swap(QueryNodeRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryNodeRes::InternalSwap(QueryNodeRes* other) {
  touserid_outer_.Swap(&other->touserid_outer_);
  std::swap(node_, other->node_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryNodeRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryNodeRes_descriptor_;
  metadata.reflection = QueryNodeRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryNodeRes

// optional string toUserID_outer = 1;
void QueryNodeRes::clear_touserid_outer() {
  touserid_outer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QueryNodeRes::touserid_outer() const {
  // @@protoc_insertion_point(field_get:chat.QueryNodeRes.toUserID_outer)
  return touserid_outer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryNodeRes::set_touserid_outer(const ::std::string& value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryNodeRes.toUserID_outer)
}
void QueryNodeRes::set_touserid_outer(const char* value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryNodeRes.toUserID_outer)
}
void QueryNodeRes::set_touserid_outer(const char* value, size_t size) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryNodeRes.toUserID_outer)
}
::std::string* QueryNodeRes::mutable_touserid_outer() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryNodeRes.toUserID_outer)
  return touserid_outer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryNodeRes::release_touserid_outer() {
  // @@protoc_insertion_point(field_release:chat.QueryNodeRes.toUserID_outer)
  
  return touserid_outer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryNodeRes::set_allocated_touserid_outer(::std::string* touserid_outer) {
  if (touserid_outer != NULL) {
    
  } else {
    
  }
  touserid_outer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), touserid_outer);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryNodeRes.toUserID_outer)
}

// optional .chat.MessageNode node = 2;
bool QueryNodeRes::has_node() const {
  return this != internal_default_instance() && node_ != NULL;
}
void QueryNodeRes::clear_node() {
  if (GetArenaNoVirtual() == NULL && node_ != NULL) delete node_;
  node_ = NULL;
}
const ::chat::MessageNode& QueryNodeRes::node() const {
  // @@protoc_insertion_point(field_get:chat.QueryNodeRes.node)
  return node_ != NULL ? *node_
                         : *::chat::MessageNode::internal_default_instance();
}
::chat::MessageNode* QueryNodeRes::mutable_node() {
  
  if (node_ == NULL) {
    node_ = new ::chat::MessageNode;
  }
  // @@protoc_insertion_point(field_mutable:chat.QueryNodeRes.node)
  return node_;
}
::chat::MessageNode* QueryNodeRes::release_node() {
  // @@protoc_insertion_point(field_release:chat.QueryNodeRes.node)
  
  ::chat::MessageNode* temp = node_;
  node_ = NULL;
  return temp;
}
void QueryNodeRes::set_allocated_node(::chat::MessageNode* node) {
  delete node_;
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chat.QueryNodeRes.node)
}

inline const QueryNodeRes* QueryNodeRes::internal_default_instance() {
  return &QueryNodeRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryNodeVersion::kToNodeIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryNodeVersion::QueryNodeVersion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.QueryNodeVersion)
}

void QueryNodeVersion::InitAsDefaultInstance() {
}

QueryNodeVersion::QueryNodeVersion(const QueryNodeVersion& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.QueryNodeVersion)
}

void QueryNodeVersion::SharedCtor() {
  tonodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

QueryNodeVersion::~QueryNodeVersion() {
  // @@protoc_insertion_point(destructor:chat.QueryNodeVersion)
  SharedDtor();
}

void QueryNodeVersion::SharedDtor() {
  tonodeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QueryNodeVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryNodeVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryNodeVersion_descriptor_;
}

const QueryNodeVersion& QueryNodeVersion::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QueryNodeVersion> QueryNodeVersion_default_instance_;

QueryNodeVersion* QueryNodeVersion::New(::google::protobuf::Arena* arena) const {
  QueryNodeVersion* n = new QueryNodeVersion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryNodeVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.QueryNodeVersion)
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool QueryNodeVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.QueryNodeVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string toNodeID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tonodeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tonodeid().data(), this->tonodeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.QueryNodeVersion.toNodeID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.QueryNodeVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.QueryNodeVersion)
  return false;
#undef DO_
}

void QueryNodeVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.QueryNodeVersion)
  // optional string toNodeID = 1;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryNodeVersion.toNodeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tonodeid(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.QueryNodeVersion)
}

::google::protobuf::uint8* QueryNodeVersion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.QueryNodeVersion)
  // optional string toNodeID = 1;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryNodeVersion.toNodeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tonodeid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.QueryNodeVersion)
  return target;
}

size_t QueryNodeVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.QueryNodeVersion)
  size_t total_size = 0;

  // optional string toNodeID = 1;
  if (this->tonodeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tonodeid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryNodeVersion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.QueryNodeVersion)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryNodeVersion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryNodeVersion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.QueryNodeVersion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.QueryNodeVersion)
    UnsafeMergeFrom(*source);
  }
}

void QueryNodeVersion::MergeFrom(const QueryNodeVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.QueryNodeVersion)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QueryNodeVersion::UnsafeMergeFrom(const QueryNodeVersion& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.tonodeid().size() > 0) {

    tonodeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tonodeid_);
  }
}

void QueryNodeVersion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.QueryNodeVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryNodeVersion::CopyFrom(const QueryNodeVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.QueryNodeVersion)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QueryNodeVersion::IsInitialized() const {

  return true;
}

void QueryNodeVersion::Swap(QueryNodeVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryNodeVersion::InternalSwap(QueryNodeVersion* other) {
  tonodeid_.Swap(&other->tonodeid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryNodeVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryNodeVersion_descriptor_;
  metadata.reflection = QueryNodeVersion_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryNodeVersion

// optional string toNodeID = 1;
void QueryNodeVersion::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QueryNodeVersion::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.QueryNodeVersion.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryNodeVersion::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryNodeVersion.toNodeID)
}
void QueryNodeVersion::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryNodeVersion.toNodeID)
}
void QueryNodeVersion::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryNodeVersion.toNodeID)
}
::std::string* QueryNodeVersion::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryNodeVersion.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryNodeVersion::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.QueryNodeVersion.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryNodeVersion::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryNodeVersion.toNodeID)
}

inline const QueryNodeVersion* QueryNodeVersion::internal_default_instance() {
  return &QueryNodeVersion_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryNodeVersionRes::kToNodeIDFieldNumber;
const int QueryNodeVersionRes::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryNodeVersionRes::QueryNodeVersionRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.QueryNodeVersionRes)
}

void QueryNodeVersionRes::InitAsDefaultInstance() {
}

QueryNodeVersionRes::QueryNodeVersionRes(const QueryNodeVersionRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.QueryNodeVersionRes)
}

void QueryNodeVersionRes::SharedCtor() {
  tonodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  _cached_size_ = 0;
}

QueryNodeVersionRes::~QueryNodeVersionRes() {
  // @@protoc_insertion_point(destructor:chat.QueryNodeVersionRes)
  SharedDtor();
}

void QueryNodeVersionRes::SharedDtor() {
  tonodeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QueryNodeVersionRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryNodeVersionRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryNodeVersionRes_descriptor_;
}

const QueryNodeVersionRes& QueryNodeVersionRes::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QueryNodeVersionRes> QueryNodeVersionRes_default_instance_;

QueryNodeVersionRes* QueryNodeVersionRes::New(::google::protobuf::Arena* arena) const {
  QueryNodeVersionRes* n = new QueryNodeVersionRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryNodeVersionRes::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.QueryNodeVersionRes)
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
}

bool QueryNodeVersionRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.QueryNodeVersionRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string toNodeID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tonodeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tonodeid().data(), this->tonodeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.QueryNodeVersionRes.toNodeID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional int32 version = 2;
      case 2: {
        if (tag == 16) {
         parse_version:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.QueryNodeVersionRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.QueryNodeVersionRes)
  return false;
#undef DO_
}

void QueryNodeVersionRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.QueryNodeVersionRes)
  // optional string toNodeID = 1;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryNodeVersionRes.toNodeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tonodeid(), output);
  }

  // optional int32 version = 2;
  if (this->version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->version(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.QueryNodeVersionRes)
}

::google::protobuf::uint8* QueryNodeVersionRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.QueryNodeVersionRes)
  // optional string toNodeID = 1;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryNodeVersionRes.toNodeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tonodeid(), target);
  }

  // optional int32 version = 2;
  if (this->version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->version(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.QueryNodeVersionRes)
  return target;
}

size_t QueryNodeVersionRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.QueryNodeVersionRes)
  size_t total_size = 0;

  // optional string toNodeID = 1;
  if (this->tonodeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tonodeid());
  }

  // optional int32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryNodeVersionRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.QueryNodeVersionRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryNodeVersionRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryNodeVersionRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.QueryNodeVersionRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.QueryNodeVersionRes)
    UnsafeMergeFrom(*source);
  }
}

void QueryNodeVersionRes::MergeFrom(const QueryNodeVersionRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.QueryNodeVersionRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QueryNodeVersionRes::UnsafeMergeFrom(const QueryNodeVersionRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.tonodeid().size() > 0) {

    tonodeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tonodeid_);
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void QueryNodeVersionRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.QueryNodeVersionRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryNodeVersionRes::CopyFrom(const QueryNodeVersionRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.QueryNodeVersionRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QueryNodeVersionRes::IsInitialized() const {

  return true;
}

void QueryNodeVersionRes::Swap(QueryNodeVersionRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryNodeVersionRes::InternalSwap(QueryNodeVersionRes* other) {
  tonodeid_.Swap(&other->tonodeid_);
  std::swap(version_, other->version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryNodeVersionRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryNodeVersionRes_descriptor_;
  metadata.reflection = QueryNodeVersionRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryNodeVersionRes

// optional string toNodeID = 1;
void QueryNodeVersionRes::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QueryNodeVersionRes::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.QueryNodeVersionRes.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryNodeVersionRes::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryNodeVersionRes.toNodeID)
}
void QueryNodeVersionRes::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryNodeVersionRes.toNodeID)
}
void QueryNodeVersionRes::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryNodeVersionRes.toNodeID)
}
::std::string* QueryNodeVersionRes::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryNodeVersionRes.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryNodeVersionRes::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.QueryNodeVersionRes.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryNodeVersionRes::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryNodeVersionRes.toNodeID)
}

// optional int32 version = 2;
void QueryNodeVersionRes::clear_version() {
  version_ = 0;
}
::google::protobuf::int32 QueryNodeVersionRes::version() const {
  // @@protoc_insertion_point(field_get:chat.QueryNodeVersionRes.version)
  return version_;
}
void QueryNodeVersionRes::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:chat.QueryNodeVersionRes.version)
}

inline const QueryNodeVersionRes* QueryNodeVersionRes::internal_default_instance() {
  return &QueryNodeVersionRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Register::kPhoneNoFieldNumber;
const int Register::kCountryCodeFieldNumber;
const int Register::kPasswordFieldNumber;
const int Register::kNicknameFieldNumber;
const int Register::kVerifycodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Register::Register()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.Register)
}

void Register::InitAsDefaultInstance() {
}

Register::Register(const Register& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.Register)
}

void Register::SharedCtor() {
  phoneno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  countrycode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifycode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Register::~Register() {
  // @@protoc_insertion_point(destructor:chat.Register)
  SharedDtor();
}

void Register::SharedDtor() {
  phoneno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  countrycode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifycode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Register::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Register_descriptor_;
}

const Register& Register::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Register> Register_default_instance_;

Register* Register::New(::google::protobuf::Arena* arena) const {
  Register* n = new Register;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Register::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.Register)
  phoneno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  countrycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.Register)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string phoneNo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phoneno()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phoneno().data(), this->phoneno().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.Register.phoneNo"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_countryCode;
        break;
      }

      // optional string countryCode = 2;
      case 2: {
        if (tag == 18) {
         parse_countryCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_countrycode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->countrycode().data(), this->countrycode().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.Register.countryCode"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional string password = 3;
      case 3: {
        if (tag == 26) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.Register.password"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_nickname;
        break;
      }

      // optional string nickname = 4;
      case 4: {
        if (tag == 34) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.Register.nickname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_verifycode;
        break;
      }

      // optional string verifycode = 5;
      case 5: {
        if (tag == 42) {
         parse_verifycode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verifycode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->verifycode().data(), this->verifycode().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.Register.verifycode"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.Register)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.Register)
  return false;
#undef DO_
}

void Register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.Register)
  // optional string phoneNo = 1;
  if (this->phoneno().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phoneno().data(), this->phoneno().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Register.phoneNo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->phoneno(), output);
  }

  // optional string countryCode = 2;
  if (this->countrycode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->countrycode().data(), this->countrycode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Register.countryCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->countrycode(), output);
  }

  // optional string password = 3;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Register.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // optional string nickname = 4;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Register.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->nickname(), output);
  }

  // optional string verifycode = 5;
  if (this->verifycode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verifycode().data(), this->verifycode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Register.verifycode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->verifycode(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.Register)
}

::google::protobuf::uint8* Register::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.Register)
  // optional string phoneNo = 1;
  if (this->phoneno().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phoneno().data(), this->phoneno().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Register.phoneNo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->phoneno(), target);
  }

  // optional string countryCode = 2;
  if (this->countrycode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->countrycode().data(), this->countrycode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Register.countryCode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->countrycode(), target);
  }

  // optional string password = 3;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Register.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional string nickname = 4;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Register.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nickname(), target);
  }

  // optional string verifycode = 5;
  if (this->verifycode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->verifycode().data(), this->verifycode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Register.verifycode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->verifycode(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.Register)
  return target;
}

size_t Register::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.Register)
  size_t total_size = 0;

  // optional string phoneNo = 1;
  if (this->phoneno().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->phoneno());
  }

  // optional string countryCode = 2;
  if (this->countrycode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->countrycode());
  }

  // optional string password = 3;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // optional string nickname = 4;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  // optional string verifycode = 5;
  if (this->verifycode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->verifycode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Register::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.Register)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Register* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Register>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.Register)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.Register)
    UnsafeMergeFrom(*source);
  }
}

void Register::MergeFrom(const Register& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.Register)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Register::UnsafeMergeFrom(const Register& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.phoneno().size() > 0) {

    phoneno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phoneno_);
  }
  if (from.countrycode().size() > 0) {

    countrycode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.countrycode_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.verifycode().size() > 0) {

    verifycode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifycode_);
  }
}

void Register::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.Register)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Register::CopyFrom(const Register& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.Register)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Register::IsInitialized() const {

  return true;
}

void Register::Swap(Register* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Register::InternalSwap(Register* other) {
  phoneno_.Swap(&other->phoneno_);
  countrycode_.Swap(&other->countrycode_);
  password_.Swap(&other->password_);
  nickname_.Swap(&other->nickname_);
  verifycode_.Swap(&other->verifycode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Register::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Register_descriptor_;
  metadata.reflection = Register_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Register

// optional string phoneNo = 1;
void Register::clear_phoneno() {
  phoneno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Register::phoneno() const {
  // @@protoc_insertion_point(field_get:chat.Register.phoneNo)
  return phoneno_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Register::set_phoneno(const ::std::string& value) {
  
  phoneno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Register.phoneNo)
}
void Register::set_phoneno(const char* value) {
  
  phoneno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Register.phoneNo)
}
void Register::set_phoneno(const char* value, size_t size) {
  
  phoneno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Register.phoneNo)
}
::std::string* Register::mutable_phoneno() {
  
  // @@protoc_insertion_point(field_mutable:chat.Register.phoneNo)
  return phoneno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Register::release_phoneno() {
  // @@protoc_insertion_point(field_release:chat.Register.phoneNo)
  
  return phoneno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Register::set_allocated_phoneno(::std::string* phoneno) {
  if (phoneno != NULL) {
    
  } else {
    
  }
  phoneno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phoneno);
  // @@protoc_insertion_point(field_set_allocated:chat.Register.phoneNo)
}

// optional string countryCode = 2;
void Register::clear_countrycode() {
  countrycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Register::countrycode() const {
  // @@protoc_insertion_point(field_get:chat.Register.countryCode)
  return countrycode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Register::set_countrycode(const ::std::string& value) {
  
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Register.countryCode)
}
void Register::set_countrycode(const char* value) {
  
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Register.countryCode)
}
void Register::set_countrycode(const char* value, size_t size) {
  
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Register.countryCode)
}
::std::string* Register::mutable_countrycode() {
  
  // @@protoc_insertion_point(field_mutable:chat.Register.countryCode)
  return countrycode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Register::release_countrycode() {
  // @@protoc_insertion_point(field_release:chat.Register.countryCode)
  
  return countrycode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Register::set_allocated_countrycode(::std::string* countrycode) {
  if (countrycode != NULL) {
    
  } else {
    
  }
  countrycode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), countrycode);
  // @@protoc_insertion_point(field_set_allocated:chat.Register.countryCode)
}

// optional string password = 3;
void Register::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Register::password() const {
  // @@protoc_insertion_point(field_get:chat.Register.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Register::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Register.password)
}
void Register::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Register.password)
}
void Register::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Register.password)
}
::std::string* Register::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:chat.Register.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Register::release_password() {
  // @@protoc_insertion_point(field_release:chat.Register.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Register::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:chat.Register.password)
}

// optional string nickname = 4;
void Register::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Register::nickname() const {
  // @@protoc_insertion_point(field_get:chat.Register.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Register::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Register.nickname)
}
void Register::set_nickname(const char* value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Register.nickname)
}
void Register::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Register.nickname)
}
::std::string* Register::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:chat.Register.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Register::release_nickname() {
  // @@protoc_insertion_point(field_release:chat.Register.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Register::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:chat.Register.nickname)
}

// optional string verifycode = 5;
void Register::clear_verifycode() {
  verifycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Register::verifycode() const {
  // @@protoc_insertion_point(field_get:chat.Register.verifycode)
  return verifycode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Register::set_verifycode(const ::std::string& value) {
  
  verifycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Register.verifycode)
}
void Register::set_verifycode(const char* value) {
  
  verifycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Register.verifycode)
}
void Register::set_verifycode(const char* value, size_t size) {
  
  verifycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Register.verifycode)
}
::std::string* Register::mutable_verifycode() {
  
  // @@protoc_insertion_point(field_mutable:chat.Register.verifycode)
  return verifycode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Register::release_verifycode() {
  // @@protoc_insertion_point(field_release:chat.Register.verifycode)
  
  return verifycode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Register::set_allocated_verifycode(::std::string* verifycode) {
  if (verifycode != NULL) {
    
  } else {
    
  }
  verifycode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifycode);
  // @@protoc_insertion_point(field_set_allocated:chat.Register.verifycode)
}

inline const Register* Register::internal_default_instance() {
  return &Register_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterRes::kUserIDFieldNumber;
const int RegisterRes::kIsSuccessFieldNumber;
const int RegisterRes::kEMsgFieldNumber;
const int RegisterRes::kENoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterRes::RegisterRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.RegisterRes)
}

void RegisterRes::InitAsDefaultInstance() {
}

RegisterRes::RegisterRes(const RegisterRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.RegisterRes)
}

void RegisterRes::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  e_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&issuccess_, 0, reinterpret_cast<char*>(&e_no_) -
    reinterpret_cast<char*>(&issuccess_) + sizeof(e_no_));
  _cached_size_ = 0;
}

RegisterRes::~RegisterRes() {
  // @@protoc_insertion_point(destructor:chat.RegisterRes)
  SharedDtor();
}

void RegisterRes::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  e_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RegisterRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterRes_descriptor_;
}

const RegisterRes& RegisterRes::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RegisterRes> RegisterRes_default_instance_;

RegisterRes* RegisterRes::New(::google::protobuf::Arena* arena) const {
  RegisterRes* n = new RegisterRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterRes::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.RegisterRes)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RegisterRes, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RegisterRes*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(issuccess_, e_no_);
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  e_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool RegisterRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.RegisterRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.RegisterRes.userID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isSuccess;
        break;
      }

      // optional bool isSuccess = 2;
      case 2: {
        if (tag == 16) {
         parse_isSuccess:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issuccess_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_e_msg;
        break;
      }

      // optional string e_msg = 3;
      case 3: {
        if (tag == 26) {
         parse_e_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_e_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->e_msg().data(), this->e_msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.RegisterRes.e_msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_e_no;
        break;
      }

      // optional int32 e_no = 4;
      case 4: {
        if (tag == 32) {
         parse_e_no:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &e_no_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.RegisterRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.RegisterRes)
  return false;
#undef DO_
}

void RegisterRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.RegisterRes)
  // optional string userID = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.RegisterRes.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // optional bool isSuccess = 2;
  if (this->issuccess() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->issuccess(), output);
  }

  // optional string e_msg = 3;
  if (this->e_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->e_msg().data(), this->e_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.RegisterRes.e_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->e_msg(), output);
  }

  // optional int32 e_no = 4;
  if (this->e_no() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->e_no(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.RegisterRes)
}

::google::protobuf::uint8* RegisterRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.RegisterRes)
  // optional string userID = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.RegisterRes.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // optional bool isSuccess = 2;
  if (this->issuccess() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->issuccess(), target);
  }

  // optional string e_msg = 3;
  if (this->e_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->e_msg().data(), this->e_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.RegisterRes.e_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->e_msg(), target);
  }

  // optional int32 e_no = 4;
  if (this->e_no() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->e_no(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.RegisterRes)
  return target;
}

size_t RegisterRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.RegisterRes)
  size_t total_size = 0;

  // optional string userID = 1;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // optional bool isSuccess = 2;
  if (this->issuccess() != 0) {
    total_size += 1 + 1;
  }

  // optional string e_msg = 3;
  if (this->e_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->e_msg());
  }

  // optional int32 e_no = 4;
  if (this->e_no() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->e_no());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.RegisterRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RegisterRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.RegisterRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.RegisterRes)
    UnsafeMergeFrom(*source);
  }
}

void RegisterRes::MergeFrom(const RegisterRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.RegisterRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RegisterRes::UnsafeMergeFrom(const RegisterRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.issuccess() != 0) {
    set_issuccess(from.issuccess());
  }
  if (from.e_msg().size() > 0) {

    e_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.e_msg_);
  }
  if (from.e_no() != 0) {
    set_e_no(from.e_no());
  }
}

void RegisterRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.RegisterRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRes::CopyFrom(const RegisterRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.RegisterRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RegisterRes::IsInitialized() const {

  return true;
}

void RegisterRes::Swap(RegisterRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterRes::InternalSwap(RegisterRes* other) {
  userid_.Swap(&other->userid_);
  std::swap(issuccess_, other->issuccess_);
  e_msg_.Swap(&other->e_msg_);
  std::swap(e_no_, other->e_no_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterRes_descriptor_;
  metadata.reflection = RegisterRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterRes

// optional string userID = 1;
void RegisterRes::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegisterRes::userid() const {
  // @@protoc_insertion_point(field_get:chat.RegisterRes.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegisterRes::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.RegisterRes.userID)
}
void RegisterRes::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.RegisterRes.userID)
}
void RegisterRes::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.RegisterRes.userID)
}
::std::string* RegisterRes::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:chat.RegisterRes.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegisterRes::release_userid() {
  // @@protoc_insertion_point(field_release:chat.RegisterRes.userID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegisterRes::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:chat.RegisterRes.userID)
}

// optional bool isSuccess = 2;
void RegisterRes::clear_issuccess() {
  issuccess_ = false;
}
bool RegisterRes::issuccess() const {
  // @@protoc_insertion_point(field_get:chat.RegisterRes.isSuccess)
  return issuccess_;
}
void RegisterRes::set_issuccess(bool value) {
  
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:chat.RegisterRes.isSuccess)
}

// optional string e_msg = 3;
void RegisterRes::clear_e_msg() {
  e_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RegisterRes::e_msg() const {
  // @@protoc_insertion_point(field_get:chat.RegisterRes.e_msg)
  return e_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegisterRes::set_e_msg(const ::std::string& value) {
  
  e_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.RegisterRes.e_msg)
}
void RegisterRes::set_e_msg(const char* value) {
  
  e_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.RegisterRes.e_msg)
}
void RegisterRes::set_e_msg(const char* value, size_t size) {
  
  e_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.RegisterRes.e_msg)
}
::std::string* RegisterRes::mutable_e_msg() {
  
  // @@protoc_insertion_point(field_mutable:chat.RegisterRes.e_msg)
  return e_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RegisterRes::release_e_msg() {
  // @@protoc_insertion_point(field_release:chat.RegisterRes.e_msg)
  
  return e_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RegisterRes::set_allocated_e_msg(::std::string* e_msg) {
  if (e_msg != NULL) {
    
  } else {
    
  }
  e_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), e_msg);
  // @@protoc_insertion_point(field_set_allocated:chat.RegisterRes.e_msg)
}

// optional int32 e_no = 4;
void RegisterRes::clear_e_no() {
  e_no_ = 0;
}
::google::protobuf::int32 RegisterRes::e_no() const {
  // @@protoc_insertion_point(field_get:chat.RegisterRes.e_no)
  return e_no_;
}
void RegisterRes::set_e_no(::google::protobuf::int32 value) {
  
  e_no_ = value;
  // @@protoc_insertion_point(field_set:chat.RegisterRes.e_no)
}

inline const RegisterRes* RegisterRes::internal_default_instance() {
  return &RegisterRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Login::kPhoneNoFieldNumber;
const int Login::kCountryCodeFieldNumber;
const int Login::kPasswordFieldNumber;
const int Login::kDeviceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Login::Login()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.Login)
}

void Login::InitAsDefaultInstance() {
  device_ = const_cast< ::chat::Device*>(
      ::chat::Device::internal_default_instance());
}

Login::Login(const Login& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.Login)
}

void Login::SharedCtor() {
  phoneno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  countrycode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_ = NULL;
  _cached_size_ = 0;
}

Login::~Login() {
  // @@protoc_insertion_point(destructor:chat.Login)
  SharedDtor();
}

void Login::SharedDtor() {
  phoneno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  countrycode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &Login_default_instance_.get()) {
    delete device_;
  }
}

void Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_descriptor_;
}

const Login& Login::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Login> Login_default_instance_;

Login* Login::New(::google::protobuf::Arena* arena) const {
  Login* n = new Login;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Login::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.Login)
  phoneno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  countrycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && device_ != NULL) delete device_;
  device_ = NULL;
}

bool Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.Login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string phoneNo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phoneno()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->phoneno().data(), this->phoneno().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.Login.phoneNo"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_countryCode;
        break;
      }

      // optional string countryCode = 2;
      case 2: {
        if (tag == 18) {
         parse_countryCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_countrycode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->countrycode().data(), this->countrycode().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.Login.countryCode"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional string password = 3;
      case 3: {
        if (tag == 26) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.Login.password"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_device;
        break;
      }

      // optional .chat.Device device = 4;
      case 4: {
        if (tag == 34) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.Login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.Login)
  return false;
#undef DO_
}

void Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.Login)
  // optional string phoneNo = 1;
  if (this->phoneno().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phoneno().data(), this->phoneno().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Login.phoneNo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->phoneno(), output);
  }

  // optional string countryCode = 2;
  if (this->countrycode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->countrycode().data(), this->countrycode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Login.countryCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->countrycode(), output);
  }

  // optional string password = 3;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Login.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // optional .chat.Device device = 4;
  if (this->has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->device_, output);
  }

  // @@protoc_insertion_point(serialize_end:chat.Login)
}

::google::protobuf::uint8* Login::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.Login)
  // optional string phoneNo = 1;
  if (this->phoneno().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->phoneno().data(), this->phoneno().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Login.phoneNo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->phoneno(), target);
  }

  // optional string countryCode = 2;
  if (this->countrycode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->countrycode().data(), this->countrycode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Login.countryCode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->countrycode(), target);
  }

  // optional string password = 3;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Login.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional .chat.Device device = 4;
  if (this->has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->device_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.Login)
  return target;
}

size_t Login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.Login)
  size_t total_size = 0;

  // optional string phoneNo = 1;
  if (this->phoneno().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->phoneno());
  }

  // optional string countryCode = 2;
  if (this->countrycode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->countrycode());
  }

  // optional string password = 3;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // optional .chat.Device device = 4;
  if (this->has_device()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->device_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.Login)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Login* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Login>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.Login)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.Login)
    UnsafeMergeFrom(*source);
  }
}

void Login::MergeFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.Login)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Login::UnsafeMergeFrom(const Login& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.phoneno().size() > 0) {

    phoneno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phoneno_);
  }
  if (from.countrycode().size() > 0) {

    countrycode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.countrycode_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.has_device()) {
    mutable_device()->::chat::Device::MergeFrom(from.device());
  }
}

void Login::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login::CopyFrom(const Login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.Login)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Login::IsInitialized() const {

  return true;
}

void Login::Swap(Login* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Login::InternalSwap(Login* other) {
  phoneno_.Swap(&other->phoneno_);
  countrycode_.Swap(&other->countrycode_);
  password_.Swap(&other->password_);
  std::swap(device_, other->device_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_descriptor_;
  metadata.reflection = Login_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Login

// optional string phoneNo = 1;
void Login::clear_phoneno() {
  phoneno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Login::phoneno() const {
  // @@protoc_insertion_point(field_get:chat.Login.phoneNo)
  return phoneno_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Login::set_phoneno(const ::std::string& value) {
  
  phoneno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Login.phoneNo)
}
void Login::set_phoneno(const char* value) {
  
  phoneno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Login.phoneNo)
}
void Login::set_phoneno(const char* value, size_t size) {
  
  phoneno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Login.phoneNo)
}
::std::string* Login::mutable_phoneno() {
  
  // @@protoc_insertion_point(field_mutable:chat.Login.phoneNo)
  return phoneno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Login::release_phoneno() {
  // @@protoc_insertion_point(field_release:chat.Login.phoneNo)
  
  return phoneno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Login::set_allocated_phoneno(::std::string* phoneno) {
  if (phoneno != NULL) {
    
  } else {
    
  }
  phoneno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phoneno);
  // @@protoc_insertion_point(field_set_allocated:chat.Login.phoneNo)
}

// optional string countryCode = 2;
void Login::clear_countrycode() {
  countrycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Login::countrycode() const {
  // @@protoc_insertion_point(field_get:chat.Login.countryCode)
  return countrycode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Login::set_countrycode(const ::std::string& value) {
  
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Login.countryCode)
}
void Login::set_countrycode(const char* value) {
  
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Login.countryCode)
}
void Login::set_countrycode(const char* value, size_t size) {
  
  countrycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Login.countryCode)
}
::std::string* Login::mutable_countrycode() {
  
  // @@protoc_insertion_point(field_mutable:chat.Login.countryCode)
  return countrycode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Login::release_countrycode() {
  // @@protoc_insertion_point(field_release:chat.Login.countryCode)
  
  return countrycode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Login::set_allocated_countrycode(::std::string* countrycode) {
  if (countrycode != NULL) {
    
  } else {
    
  }
  countrycode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), countrycode);
  // @@protoc_insertion_point(field_set_allocated:chat.Login.countryCode)
}

// optional string password = 3;
void Login::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Login::password() const {
  // @@protoc_insertion_point(field_get:chat.Login.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Login::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Login.password)
}
void Login::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Login.password)
}
void Login::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Login.password)
}
::std::string* Login::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:chat.Login.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Login::release_password() {
  // @@protoc_insertion_point(field_release:chat.Login.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Login::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:chat.Login.password)
}

// optional .chat.Device device = 4;
bool Login::has_device() const {
  return this != internal_default_instance() && device_ != NULL;
}
void Login::clear_device() {
  if (GetArenaNoVirtual() == NULL && device_ != NULL) delete device_;
  device_ = NULL;
}
const ::chat::Device& Login::device() const {
  // @@protoc_insertion_point(field_get:chat.Login.device)
  return device_ != NULL ? *device_
                         : *::chat::Device::internal_default_instance();
}
::chat::Device* Login::mutable_device() {
  
  if (device_ == NULL) {
    device_ = new ::chat::Device;
  }
  // @@protoc_insertion_point(field_mutable:chat.Login.device)
  return device_;
}
::chat::Device* Login::release_device() {
  // @@protoc_insertion_point(field_release:chat.Login.device)
  
  ::chat::Device* temp = device_;
  device_ = NULL;
  return temp;
}
void Login::set_allocated_device(::chat::Device* device) {
  delete device_;
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chat.Login.device)
}

inline const Login* Login::internal_default_instance() {
  return &Login_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRes::kIsSuccessFieldNumber;
const int LoginRes::kUserIDFieldNumber;
const int LoginRes::kENoFieldNumber;
const int LoginRes::kEMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRes::LoginRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.LoginRes)
}

void LoginRes::InitAsDefaultInstance() {
}

LoginRes::LoginRes(const LoginRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.LoginRes)
}

void LoginRes::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  e_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&issuccess_, 0, reinterpret_cast<char*>(&e_no_) -
    reinterpret_cast<char*>(&issuccess_) + sizeof(e_no_));
  _cached_size_ = 0;
}

LoginRes::~LoginRes() {
  // @@protoc_insertion_point(destructor:chat.LoginRes)
  SharedDtor();
}

void LoginRes::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  e_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRes_descriptor_;
}

const LoginRes& LoginRes::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LoginRes> LoginRes_default_instance_;

LoginRes* LoginRes::New(::google::protobuf::Arena* arena) const {
  LoginRes* n = new LoginRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRes::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.LoginRes)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LoginRes, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LoginRes*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(issuccess_, e_no_);
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  e_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool LoginRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.LoginRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isSuccess = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issuccess_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userID;
        break;
      }

      // optional string userID = 2;
      case 2: {
        if (tag == 18) {
         parse_userID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.LoginRes.userID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_e_no;
        break;
      }

      // optional int32 e_no = 3;
      case 3: {
        if (tag == 24) {
         parse_e_no:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &e_no_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_e_msg;
        break;
      }

      // optional string e_msg = 4;
      case 4: {
        if (tag == 34) {
         parse_e_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_e_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->e_msg().data(), this->e_msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.LoginRes.e_msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.LoginRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.LoginRes)
  return false;
#undef DO_
}

void LoginRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.LoginRes)
  // optional bool isSuccess = 1;
  if (this->issuccess() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->issuccess(), output);
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.LoginRes.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  // optional int32 e_no = 3;
  if (this->e_no() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->e_no(), output);
  }

  // optional string e_msg = 4;
  if (this->e_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->e_msg().data(), this->e_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.LoginRes.e_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->e_msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.LoginRes)
}

::google::protobuf::uint8* LoginRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.LoginRes)
  // optional bool isSuccess = 1;
  if (this->issuccess() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->issuccess(), target);
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.LoginRes.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  // optional int32 e_no = 3;
  if (this->e_no() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->e_no(), target);
  }

  // optional string e_msg = 4;
  if (this->e_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->e_msg().data(), this->e_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.LoginRes.e_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->e_msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.LoginRes)
  return target;
}

size_t LoginRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.LoginRes)
  size_t total_size = 0;

  // optional bool isSuccess = 1;
  if (this->issuccess() != 0) {
    total_size += 1 + 1;
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // optional int32 e_no = 3;
  if (this->e_no() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->e_no());
  }

  // optional string e_msg = 4;
  if (this->e_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->e_msg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.LoginRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LoginRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.LoginRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.LoginRes)
    UnsafeMergeFrom(*source);
  }
}

void LoginRes::MergeFrom(const LoginRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.LoginRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LoginRes::UnsafeMergeFrom(const LoginRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.issuccess() != 0) {
    set_issuccess(from.issuccess());
  }
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.e_no() != 0) {
    set_e_no(from.e_no());
  }
  if (from.e_msg().size() > 0) {

    e_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.e_msg_);
  }
}

void LoginRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.LoginRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRes::CopyFrom(const LoginRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.LoginRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LoginRes::IsInitialized() const {

  return true;
}

void LoginRes::Swap(LoginRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRes::InternalSwap(LoginRes* other) {
  std::swap(issuccess_, other->issuccess_);
  userid_.Swap(&other->userid_);
  std::swap(e_no_, other->e_no_);
  e_msg_.Swap(&other->e_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRes_descriptor_;
  metadata.reflection = LoginRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginRes

// optional bool isSuccess = 1;
void LoginRes::clear_issuccess() {
  issuccess_ = false;
}
bool LoginRes::issuccess() const {
  // @@protoc_insertion_point(field_get:chat.LoginRes.isSuccess)
  return issuccess_;
}
void LoginRes::set_issuccess(bool value) {
  
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:chat.LoginRes.isSuccess)
}

// optional string userID = 2;
void LoginRes::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginRes::userid() const {
  // @@protoc_insertion_point(field_get:chat.LoginRes.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRes::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.LoginRes.userID)
}
void LoginRes::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.LoginRes.userID)
}
void LoginRes::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.LoginRes.userID)
}
::std::string* LoginRes::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:chat.LoginRes.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginRes::release_userid() {
  // @@protoc_insertion_point(field_release:chat.LoginRes.userID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRes::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:chat.LoginRes.userID)
}

// optional int32 e_no = 3;
void LoginRes::clear_e_no() {
  e_no_ = 0;
}
::google::protobuf::int32 LoginRes::e_no() const {
  // @@protoc_insertion_point(field_get:chat.LoginRes.e_no)
  return e_no_;
}
void LoginRes::set_e_no(::google::protobuf::int32 value) {
  
  e_no_ = value;
  // @@protoc_insertion_point(field_set:chat.LoginRes.e_no)
}

// optional string e_msg = 4;
void LoginRes::clear_e_msg() {
  e_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginRes::e_msg() const {
  // @@protoc_insertion_point(field_get:chat.LoginRes.e_msg)
  return e_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRes::set_e_msg(const ::std::string& value) {
  
  e_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.LoginRes.e_msg)
}
void LoginRes::set_e_msg(const char* value) {
  
  e_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.LoginRes.e_msg)
}
void LoginRes::set_e_msg(const char* value, size_t size) {
  
  e_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.LoginRes.e_msg)
}
::std::string* LoginRes::mutable_e_msg() {
  
  // @@protoc_insertion_point(field_mutable:chat.LoginRes.e_msg)
  return e_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginRes::release_e_msg() {
  // @@protoc_insertion_point(field_release:chat.LoginRes.e_msg)
  
  return e_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRes::set_allocated_e_msg(::std::string* e_msg) {
  if (e_msg != NULL) {
    
  } else {
    
  }
  e_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), e_msg);
  // @@protoc_insertion_point(field_set_allocated:chat.LoginRes.e_msg)
}

inline const LoginRes* LoginRes::internal_default_instance() {
  return &LoginRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginNoti::kToUserIDOuterFieldNumber;
const int LoginNoti::kUUIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginNoti::LoginNoti()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.LoginNoti)
}

void LoginNoti::InitAsDefaultInstance() {
}

LoginNoti::LoginNoti(const LoginNoti& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.LoginNoti)
}

void LoginNoti::SharedCtor() {
  touserid_outer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

LoginNoti::~LoginNoti() {
  // @@protoc_insertion_point(destructor:chat.LoginNoti)
  SharedDtor();
}

void LoginNoti::SharedDtor() {
  touserid_outer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginNoti::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginNoti::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginNoti_descriptor_;
}

const LoginNoti& LoginNoti::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LoginNoti> LoginNoti_default_instance_;

LoginNoti* LoginNoti::New(::google::protobuf::Arena* arena) const {
  LoginNoti* n = new LoginNoti;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginNoti::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.LoginNoti)
  touserid_outer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LoginNoti::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.LoginNoti)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string toUserID_outer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_touserid_outer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->touserid_outer().data(), this->touserid_outer().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.LoginNoti.toUserID_outer"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UUID;
        break;
      }

      // optional string UUID = 2;
      case 2: {
        if (tag == 18) {
         parse_UUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.LoginNoti.UUID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.LoginNoti)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.LoginNoti)
  return false;
#undef DO_
}

void LoginNoti::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.LoginNoti)
  // optional string toUserID_outer = 1;
  if (this->touserid_outer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->touserid_outer().data(), this->touserid_outer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.LoginNoti.toUserID_outer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->touserid_outer(), output);
  }

  // optional string UUID = 2;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.LoginNoti.UUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uuid(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.LoginNoti)
}

::google::protobuf::uint8* LoginNoti::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.LoginNoti)
  // optional string toUserID_outer = 1;
  if (this->touserid_outer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->touserid_outer().data(), this->touserid_outer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.LoginNoti.toUserID_outer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->touserid_outer(), target);
  }

  // optional string UUID = 2;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.LoginNoti.UUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uuid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.LoginNoti)
  return target;
}

size_t LoginNoti::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.LoginNoti)
  size_t total_size = 0;

  // optional string toUserID_outer = 1;
  if (this->touserid_outer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->touserid_outer());
  }

  // optional string UUID = 2;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginNoti::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.LoginNoti)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LoginNoti* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginNoti>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.LoginNoti)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.LoginNoti)
    UnsafeMergeFrom(*source);
  }
}

void LoginNoti::MergeFrom(const LoginNoti& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.LoginNoti)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LoginNoti::UnsafeMergeFrom(const LoginNoti& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.touserid_outer().size() > 0) {

    touserid_outer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.touserid_outer_);
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
}

void LoginNoti::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.LoginNoti)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginNoti::CopyFrom(const LoginNoti& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.LoginNoti)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LoginNoti::IsInitialized() const {

  return true;
}

void LoginNoti::Swap(LoginNoti* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginNoti::InternalSwap(LoginNoti* other) {
  touserid_outer_.Swap(&other->touserid_outer_);
  uuid_.Swap(&other->uuid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginNoti::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginNoti_descriptor_;
  metadata.reflection = LoginNoti_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginNoti

// optional string toUserID_outer = 1;
void LoginNoti::clear_touserid_outer() {
  touserid_outer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginNoti::touserid_outer() const {
  // @@protoc_insertion_point(field_get:chat.LoginNoti.toUserID_outer)
  return touserid_outer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginNoti::set_touserid_outer(const ::std::string& value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.LoginNoti.toUserID_outer)
}
void LoginNoti::set_touserid_outer(const char* value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.LoginNoti.toUserID_outer)
}
void LoginNoti::set_touserid_outer(const char* value, size_t size) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.LoginNoti.toUserID_outer)
}
::std::string* LoginNoti::mutable_touserid_outer() {
  
  // @@protoc_insertion_point(field_mutable:chat.LoginNoti.toUserID_outer)
  return touserid_outer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginNoti::release_touserid_outer() {
  // @@protoc_insertion_point(field_release:chat.LoginNoti.toUserID_outer)
  
  return touserid_outer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginNoti::set_allocated_touserid_outer(::std::string* touserid_outer) {
  if (touserid_outer != NULL) {
    
  } else {
    
  }
  touserid_outer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), touserid_outer);
  // @@protoc_insertion_point(field_set_allocated:chat.LoginNoti.toUserID_outer)
}

// optional string UUID = 2;
void LoginNoti::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginNoti::uuid() const {
  // @@protoc_insertion_point(field_get:chat.LoginNoti.UUID)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginNoti::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.LoginNoti.UUID)
}
void LoginNoti::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.LoginNoti.UUID)
}
void LoginNoti::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.LoginNoti.UUID)
}
::std::string* LoginNoti::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:chat.LoginNoti.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginNoti::release_uuid() {
  // @@protoc_insertion_point(field_release:chat.LoginNoti.UUID)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginNoti::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:chat.LoginNoti.UUID)
}

inline const LoginNoti* LoginNoti::internal_default_instance() {
  return &LoginNoti_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientConnect::kUserIDFieldNumber;
const int ClientConnect::kUUIDFieldNumber;
const int ClientConnect::kIsReciveNotiFieldNumber;
const int ClientConnect::kOSVersionFieldNumber;
const int ClientConnect::kAppVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientConnect::ClientConnect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ClientConnect)
}

void ClientConnect::InitAsDefaultInstance() {
}

ClientConnect::ClientConnect(const ClientConnect& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.ClientConnect)
}

void ClientConnect::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  osversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isrecivenoti_ = false;
  _cached_size_ = 0;
}

ClientConnect::~ClientConnect() {
  // @@protoc_insertion_point(destructor:chat.ClientConnect)
  SharedDtor();
}

void ClientConnect::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  osversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClientConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientConnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientConnect_descriptor_;
}

const ClientConnect& ClientConnect::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ClientConnect> ClientConnect_default_instance_;

ClientConnect* ClientConnect::New(::google::protobuf::Arena* arena) const {
  ClientConnect* n = new ClientConnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ClientConnect)
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isrecivenoti_ = false;
  osversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ClientConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ClientConnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ClientConnect.userID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UUID;
        break;
      }

      // optional string UUID = 2;
      case 2: {
        if (tag == 18) {
         parse_UUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ClientConnect.UUID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isReciveNoti;
        break;
      }

      // optional bool isReciveNoti = 3;
      case 3: {
        if (tag == 24) {
         parse_isReciveNoti:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrecivenoti_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_OSVersion;
        break;
      }

      // optional string OSVersion = 4;
      case 4: {
        if (tag == 34) {
         parse_OSVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_osversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->osversion().data(), this->osversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ClientConnect.OSVersion"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_appVersion;
        break;
      }

      // optional string appVersion = 5;
      case 5: {
        if (tag == 42) {
         parse_appVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->appversion().data(), this->appversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ClientConnect.appVersion"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ClientConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ClientConnect)
  return false;
#undef DO_
}

void ClientConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ClientConnect)
  // optional string userID = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ClientConnect.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // optional string UUID = 2;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ClientConnect.UUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uuid(), output);
  }

  // optional bool isReciveNoti = 3;
  if (this->isrecivenoti() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isrecivenoti(), output);
  }

  // optional string OSVersion = 4;
  if (this->osversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->osversion().data(), this->osversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ClientConnect.OSVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->osversion(), output);
  }

  // optional string appVersion = 5;
  if (this->appversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appversion().data(), this->appversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ClientConnect.appVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->appversion(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.ClientConnect)
}

::google::protobuf::uint8* ClientConnect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.ClientConnect)
  // optional string userID = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ClientConnect.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // optional string UUID = 2;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ClientConnect.UUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uuid(), target);
  }

  // optional bool isReciveNoti = 3;
  if (this->isrecivenoti() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isrecivenoti(), target);
  }

  // optional string OSVersion = 4;
  if (this->osversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->osversion().data(), this->osversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ClientConnect.OSVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->osversion(), target);
  }

  // optional string appVersion = 5;
  if (this->appversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appversion().data(), this->appversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ClientConnect.appVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->appversion(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.ClientConnect)
  return target;
}

size_t ClientConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ClientConnect)
  size_t total_size = 0;

  // optional string userID = 1;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // optional string UUID = 2;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // optional bool isReciveNoti = 3;
  if (this->isrecivenoti() != 0) {
    total_size += 1 + 1;
  }

  // optional string OSVersion = 4;
  if (this->osversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->osversion());
  }

  // optional string appVersion = 5;
  if (this->appversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appversion());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientConnect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ClientConnect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClientConnect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientConnect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ClientConnect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ClientConnect)
    UnsafeMergeFrom(*source);
  }
}

void ClientConnect::MergeFrom(const ClientConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ClientConnect)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ClientConnect::UnsafeMergeFrom(const ClientConnect& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.isrecivenoti() != 0) {
    set_isrecivenoti(from.isrecivenoti());
  }
  if (from.osversion().size() > 0) {

    osversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.osversion_);
  }
  if (from.appversion().size() > 0) {

    appversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appversion_);
  }
}

void ClientConnect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ClientConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientConnect::CopyFrom(const ClientConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ClientConnect)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ClientConnect::IsInitialized() const {

  return true;
}

void ClientConnect::Swap(ClientConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientConnect::InternalSwap(ClientConnect* other) {
  userid_.Swap(&other->userid_);
  uuid_.Swap(&other->uuid_);
  std::swap(isrecivenoti_, other->isrecivenoti_);
  osversion_.Swap(&other->osversion_);
  appversion_.Swap(&other->appversion_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientConnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientConnect_descriptor_;
  metadata.reflection = ClientConnect_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientConnect

// optional string userID = 1;
void ClientConnect::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClientConnect::userid() const {
  // @@protoc_insertion_point(field_get:chat.ClientConnect.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientConnect::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ClientConnect.userID)
}
void ClientConnect::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ClientConnect.userID)
}
void ClientConnect::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ClientConnect.userID)
}
::std::string* ClientConnect::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:chat.ClientConnect.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientConnect::release_userid() {
  // @@protoc_insertion_point(field_release:chat.ClientConnect.userID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientConnect::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:chat.ClientConnect.userID)
}

// optional string UUID = 2;
void ClientConnect::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClientConnect::uuid() const {
  // @@protoc_insertion_point(field_get:chat.ClientConnect.UUID)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientConnect::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ClientConnect.UUID)
}
void ClientConnect::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ClientConnect.UUID)
}
void ClientConnect::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ClientConnect.UUID)
}
::std::string* ClientConnect::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:chat.ClientConnect.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientConnect::release_uuid() {
  // @@protoc_insertion_point(field_release:chat.ClientConnect.UUID)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientConnect::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:chat.ClientConnect.UUID)
}

// optional bool isReciveNoti = 3;
void ClientConnect::clear_isrecivenoti() {
  isrecivenoti_ = false;
}
bool ClientConnect::isrecivenoti() const {
  // @@protoc_insertion_point(field_get:chat.ClientConnect.isReciveNoti)
  return isrecivenoti_;
}
void ClientConnect::set_isrecivenoti(bool value) {
  
  isrecivenoti_ = value;
  // @@protoc_insertion_point(field_set:chat.ClientConnect.isReciveNoti)
}

// optional string OSVersion = 4;
void ClientConnect::clear_osversion() {
  osversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClientConnect::osversion() const {
  // @@protoc_insertion_point(field_get:chat.ClientConnect.OSVersion)
  return osversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientConnect::set_osversion(const ::std::string& value) {
  
  osversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ClientConnect.OSVersion)
}
void ClientConnect::set_osversion(const char* value) {
  
  osversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ClientConnect.OSVersion)
}
void ClientConnect::set_osversion(const char* value, size_t size) {
  
  osversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ClientConnect.OSVersion)
}
::std::string* ClientConnect::mutable_osversion() {
  
  // @@protoc_insertion_point(field_mutable:chat.ClientConnect.OSVersion)
  return osversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientConnect::release_osversion() {
  // @@protoc_insertion_point(field_release:chat.ClientConnect.OSVersion)
  
  return osversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientConnect::set_allocated_osversion(::std::string* osversion) {
  if (osversion != NULL) {
    
  } else {
    
  }
  osversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), osversion);
  // @@protoc_insertion_point(field_set_allocated:chat.ClientConnect.OSVersion)
}

// optional string appVersion = 5;
void ClientConnect::clear_appversion() {
  appversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClientConnect::appversion() const {
  // @@protoc_insertion_point(field_get:chat.ClientConnect.appVersion)
  return appversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientConnect::set_appversion(const ::std::string& value) {
  
  appversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ClientConnect.appVersion)
}
void ClientConnect::set_appversion(const char* value) {
  
  appversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ClientConnect.appVersion)
}
void ClientConnect::set_appversion(const char* value, size_t size) {
  
  appversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ClientConnect.appVersion)
}
::std::string* ClientConnect::mutable_appversion() {
  
  // @@protoc_insertion_point(field_mutable:chat.ClientConnect.appVersion)
  return appversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientConnect::release_appversion() {
  // @@protoc_insertion_point(field_release:chat.ClientConnect.appVersion)
  
  return appversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientConnect::set_allocated_appversion(::std::string* appversion) {
  if (appversion != NULL) {
    
  } else {
    
  }
  appversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appversion);
  // @@protoc_insertion_point(field_set_allocated:chat.ClientConnect.appVersion)
}

inline const ClientConnect* ClientConnect::internal_default_instance() {
  return &ClientConnect_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientConnectRes::kUUIDFieldNumber;
const int ClientConnectRes::kUserIDFieldNumber;
const int ClientConnectRes::kSessionidFieldNumber;
const int ClientConnectRes::kIsSuccessFieldNumber;
const int ClientConnectRes::kEMsgFieldNumber;
const int ClientConnectRes::kENoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientConnectRes::ClientConnectRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ClientConnectRes)
}

void ClientConnectRes::InitAsDefaultInstance() {
}

ClientConnectRes::ClientConnectRes(const ClientConnectRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.ClientConnectRes)
}

void ClientConnectRes::SharedCtor() {
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  e_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sessionid_, 0, reinterpret_cast<char*>(&e_no_) -
    reinterpret_cast<char*>(&sessionid_) + sizeof(e_no_));
  _cached_size_ = 0;
}

ClientConnectRes::~ClientConnectRes() {
  // @@protoc_insertion_point(destructor:chat.ClientConnectRes)
  SharedDtor();
}

void ClientConnectRes::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  e_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClientConnectRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientConnectRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientConnectRes_descriptor_;
}

const ClientConnectRes& ClientConnectRes::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ClientConnectRes> ClientConnectRes_default_instance_;

ClientConnectRes* ClientConnectRes::New(::google::protobuf::Arena* arena) const {
  ClientConnectRes* n = new ClientConnectRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientConnectRes::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ClientConnectRes)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ClientConnectRes, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ClientConnectRes*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sessionid_, e_no_);
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  e_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ClientConnectRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ClientConnectRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UUID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ClientConnectRes.UUID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userID;
        break;
      }

      // optional string userID = 2;
      case 2: {
        if (tag == 18) {
         parse_userID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ClientConnectRes.userID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sessionid;
        break;
      }

      // optional int32 sessionid = 3;
      case 3: {
        if (tag == 24) {
         parse_sessionid:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_isSuccess;
        break;
      }

      // optional bool isSuccess = 4;
      case 4: {
        if (tag == 32) {
         parse_isSuccess:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issuccess_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_e_msg;
        break;
      }

      // optional string e_msg = 5;
      case 5: {
        if (tag == 42) {
         parse_e_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_e_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->e_msg().data(), this->e_msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ClientConnectRes.e_msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_e_no;
        break;
      }

      // optional int32 e_no = 6;
      case 6: {
        if (tag == 48) {
         parse_e_no:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &e_no_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ClientConnectRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ClientConnectRes)
  return false;
#undef DO_
}

void ClientConnectRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ClientConnectRes)
  // optional string UUID = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ClientConnectRes.UUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ClientConnectRes.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  // optional int32 sessionid = 3;
  if (this->sessionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sessionid(), output);
  }

  // optional bool isSuccess = 4;
  if (this->issuccess() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->issuccess(), output);
  }

  // optional string e_msg = 5;
  if (this->e_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->e_msg().data(), this->e_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ClientConnectRes.e_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->e_msg(), output);
  }

  // optional int32 e_no = 6;
  if (this->e_no() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->e_no(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.ClientConnectRes)
}

::google::protobuf::uint8* ClientConnectRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.ClientConnectRes)
  // optional string UUID = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ClientConnectRes.UUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ClientConnectRes.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  // optional int32 sessionid = 3;
  if (this->sessionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sessionid(), target);
  }

  // optional bool isSuccess = 4;
  if (this->issuccess() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->issuccess(), target);
  }

  // optional string e_msg = 5;
  if (this->e_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->e_msg().data(), this->e_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ClientConnectRes.e_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->e_msg(), target);
  }

  // optional int32 e_no = 6;
  if (this->e_no() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->e_no(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.ClientConnectRes)
  return target;
}

size_t ClientConnectRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ClientConnectRes)
  size_t total_size = 0;

  // optional string UUID = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // optional int32 sessionid = 3;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sessionid());
  }

  // optional bool isSuccess = 4;
  if (this->issuccess() != 0) {
    total_size += 1 + 1;
  }

  // optional string e_msg = 5;
  if (this->e_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->e_msg());
  }

  // optional int32 e_no = 6;
  if (this->e_no() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->e_no());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientConnectRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ClientConnectRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClientConnectRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientConnectRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ClientConnectRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ClientConnectRes)
    UnsafeMergeFrom(*source);
  }
}

void ClientConnectRes::MergeFrom(const ClientConnectRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ClientConnectRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ClientConnectRes::UnsafeMergeFrom(const ClientConnectRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.sessionid() != 0) {
    set_sessionid(from.sessionid());
  }
  if (from.issuccess() != 0) {
    set_issuccess(from.issuccess());
  }
  if (from.e_msg().size() > 0) {

    e_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.e_msg_);
  }
  if (from.e_no() != 0) {
    set_e_no(from.e_no());
  }
}

void ClientConnectRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ClientConnectRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientConnectRes::CopyFrom(const ClientConnectRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ClientConnectRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ClientConnectRes::IsInitialized() const {

  return true;
}

void ClientConnectRes::Swap(ClientConnectRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientConnectRes::InternalSwap(ClientConnectRes* other) {
  uuid_.Swap(&other->uuid_);
  userid_.Swap(&other->userid_);
  std::swap(sessionid_, other->sessionid_);
  std::swap(issuccess_, other->issuccess_);
  e_msg_.Swap(&other->e_msg_);
  std::swap(e_no_, other->e_no_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientConnectRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientConnectRes_descriptor_;
  metadata.reflection = ClientConnectRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientConnectRes

// optional string UUID = 1;
void ClientConnectRes::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClientConnectRes::uuid() const {
  // @@protoc_insertion_point(field_get:chat.ClientConnectRes.UUID)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientConnectRes::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ClientConnectRes.UUID)
}
void ClientConnectRes::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ClientConnectRes.UUID)
}
void ClientConnectRes::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ClientConnectRes.UUID)
}
::std::string* ClientConnectRes::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:chat.ClientConnectRes.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientConnectRes::release_uuid() {
  // @@protoc_insertion_point(field_release:chat.ClientConnectRes.UUID)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientConnectRes::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:chat.ClientConnectRes.UUID)
}

// optional string userID = 2;
void ClientConnectRes::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClientConnectRes::userid() const {
  // @@protoc_insertion_point(field_get:chat.ClientConnectRes.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientConnectRes::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ClientConnectRes.userID)
}
void ClientConnectRes::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ClientConnectRes.userID)
}
void ClientConnectRes::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ClientConnectRes.userID)
}
::std::string* ClientConnectRes::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:chat.ClientConnectRes.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientConnectRes::release_userid() {
  // @@protoc_insertion_point(field_release:chat.ClientConnectRes.userID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientConnectRes::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:chat.ClientConnectRes.userID)
}

// optional int32 sessionid = 3;
void ClientConnectRes::clear_sessionid() {
  sessionid_ = 0;
}
::google::protobuf::int32 ClientConnectRes::sessionid() const {
  // @@protoc_insertion_point(field_get:chat.ClientConnectRes.sessionid)
  return sessionid_;
}
void ClientConnectRes::set_sessionid(::google::protobuf::int32 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:chat.ClientConnectRes.sessionid)
}

// optional bool isSuccess = 4;
void ClientConnectRes::clear_issuccess() {
  issuccess_ = false;
}
bool ClientConnectRes::issuccess() const {
  // @@protoc_insertion_point(field_get:chat.ClientConnectRes.isSuccess)
  return issuccess_;
}
void ClientConnectRes::set_issuccess(bool value) {
  
  issuccess_ = value;
  // @@protoc_insertion_point(field_set:chat.ClientConnectRes.isSuccess)
}

// optional string e_msg = 5;
void ClientConnectRes::clear_e_msg() {
  e_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClientConnectRes::e_msg() const {
  // @@protoc_insertion_point(field_get:chat.ClientConnectRes.e_msg)
  return e_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientConnectRes::set_e_msg(const ::std::string& value) {
  
  e_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ClientConnectRes.e_msg)
}
void ClientConnectRes::set_e_msg(const char* value) {
  
  e_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ClientConnectRes.e_msg)
}
void ClientConnectRes::set_e_msg(const char* value, size_t size) {
  
  e_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ClientConnectRes.e_msg)
}
::std::string* ClientConnectRes::mutable_e_msg() {
  
  // @@protoc_insertion_point(field_mutable:chat.ClientConnectRes.e_msg)
  return e_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientConnectRes::release_e_msg() {
  // @@protoc_insertion_point(field_release:chat.ClientConnectRes.e_msg)
  
  return e_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientConnectRes::set_allocated_e_msg(::std::string* e_msg) {
  if (e_msg != NULL) {
    
  } else {
    
  }
  e_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), e_msg);
  // @@protoc_insertion_point(field_set_allocated:chat.ClientConnectRes.e_msg)
}

// optional int32 e_no = 6;
void ClientConnectRes::clear_e_no() {
  e_no_ = 0;
}
::google::protobuf::int32 ClientConnectRes::e_no() const {
  // @@protoc_insertion_point(field_get:chat.ClientConnectRes.e_no)
  return e_no_;
}
void ClientConnectRes::set_e_no(::google::protobuf::int32 value) {
  
  e_no_ = value;
  // @@protoc_insertion_point(field_set:chat.ClientConnectRes.e_no)
}

inline const ClientConnectRes* ClientConnectRes::internal_default_instance() {
  return &ClientConnectRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientDisConnect::kUserIDFieldNumber;
const int ClientDisConnect::kUUIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientDisConnect::ClientDisConnect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ClientDisConnect)
}

void ClientDisConnect::InitAsDefaultInstance() {
}

ClientDisConnect::ClientDisConnect(const ClientDisConnect& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.ClientDisConnect)
}

void ClientDisConnect::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ClientDisConnect::~ClientDisConnect() {
  // @@protoc_insertion_point(destructor:chat.ClientDisConnect)
  SharedDtor();
}

void ClientDisConnect::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClientDisConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientDisConnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientDisConnect_descriptor_;
}

const ClientDisConnect& ClientDisConnect::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ClientDisConnect> ClientDisConnect_default_instance_;

ClientDisConnect* ClientDisConnect::New(::google::protobuf::Arena* arena) const {
  ClientDisConnect* n = new ClientDisConnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientDisConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ClientDisConnect)
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ClientDisConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ClientDisConnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ClientDisConnect.userID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UUID;
        break;
      }

      // optional string UUID = 2;
      case 2: {
        if (tag == 18) {
         parse_UUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ClientDisConnect.UUID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ClientDisConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ClientDisConnect)
  return false;
#undef DO_
}

void ClientDisConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ClientDisConnect)
  // optional string userID = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ClientDisConnect.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // optional string UUID = 2;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ClientDisConnect.UUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uuid(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.ClientDisConnect)
}

::google::protobuf::uint8* ClientDisConnect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.ClientDisConnect)
  // optional string userID = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ClientDisConnect.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // optional string UUID = 2;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ClientDisConnect.UUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uuid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.ClientDisConnect)
  return target;
}

size_t ClientDisConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ClientDisConnect)
  size_t total_size = 0;

  // optional string userID = 1;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // optional string UUID = 2;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientDisConnect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ClientDisConnect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClientDisConnect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientDisConnect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ClientDisConnect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ClientDisConnect)
    UnsafeMergeFrom(*source);
  }
}

void ClientDisConnect::MergeFrom(const ClientDisConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ClientDisConnect)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ClientDisConnect::UnsafeMergeFrom(const ClientDisConnect& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
}

void ClientDisConnect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ClientDisConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientDisConnect::CopyFrom(const ClientDisConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ClientDisConnect)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ClientDisConnect::IsInitialized() const {

  return true;
}

void ClientDisConnect::Swap(ClientDisConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientDisConnect::InternalSwap(ClientDisConnect* other) {
  userid_.Swap(&other->userid_);
  uuid_.Swap(&other->uuid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientDisConnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientDisConnect_descriptor_;
  metadata.reflection = ClientDisConnect_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientDisConnect

// optional string userID = 1;
void ClientDisConnect::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClientDisConnect::userid() const {
  // @@protoc_insertion_point(field_get:chat.ClientDisConnect.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientDisConnect::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ClientDisConnect.userID)
}
void ClientDisConnect::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ClientDisConnect.userID)
}
void ClientDisConnect::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ClientDisConnect.userID)
}
::std::string* ClientDisConnect::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:chat.ClientDisConnect.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientDisConnect::release_userid() {
  // @@protoc_insertion_point(field_release:chat.ClientDisConnect.userID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientDisConnect::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:chat.ClientDisConnect.userID)
}

// optional string UUID = 2;
void ClientDisConnect::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClientDisConnect::uuid() const {
  // @@protoc_insertion_point(field_get:chat.ClientDisConnect.UUID)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientDisConnect::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ClientDisConnect.UUID)
}
void ClientDisConnect::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ClientDisConnect.UUID)
}
void ClientDisConnect::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ClientDisConnect.UUID)
}
::std::string* ClientDisConnect::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:chat.ClientDisConnect.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientDisConnect::release_uuid() {
  // @@protoc_insertion_point(field_release:chat.ClientDisConnect.UUID)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientDisConnect::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:chat.ClientDisConnect.UUID)
}

inline const ClientDisConnect* ClientDisConnect::internal_default_instance() {
  return &ClientDisConnect_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientDisConnectRes::kUUIDFieldNumber;
const int ClientDisConnectRes::kUserIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientDisConnectRes::ClientDisConnectRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ClientDisConnectRes)
}

void ClientDisConnectRes::InitAsDefaultInstance() {
}

ClientDisConnectRes::ClientDisConnectRes(const ClientDisConnectRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.ClientDisConnectRes)
}

void ClientDisConnectRes::SharedCtor() {
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ClientDisConnectRes::~ClientDisConnectRes() {
  // @@protoc_insertion_point(destructor:chat.ClientDisConnectRes)
  SharedDtor();
}

void ClientDisConnectRes::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClientDisConnectRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientDisConnectRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientDisConnectRes_descriptor_;
}

const ClientDisConnectRes& ClientDisConnectRes::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ClientDisConnectRes> ClientDisConnectRes_default_instance_;

ClientDisConnectRes* ClientDisConnectRes::New(::google::protobuf::Arena* arena) const {
  ClientDisConnectRes* n = new ClientDisConnectRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientDisConnectRes::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ClientDisConnectRes)
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ClientDisConnectRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ClientDisConnectRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UUID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ClientDisConnectRes.UUID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userID;
        break;
      }

      // optional string userID = 2;
      case 2: {
        if (tag == 18) {
         parse_userID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ClientDisConnectRes.userID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ClientDisConnectRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ClientDisConnectRes)
  return false;
#undef DO_
}

void ClientDisConnectRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ClientDisConnectRes)
  // optional string UUID = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ClientDisConnectRes.UUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ClientDisConnectRes.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.ClientDisConnectRes)
}

::google::protobuf::uint8* ClientDisConnectRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.ClientDisConnectRes)
  // optional string UUID = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ClientDisConnectRes.UUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ClientDisConnectRes.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.ClientDisConnectRes)
  return target;
}

size_t ClientDisConnectRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ClientDisConnectRes)
  size_t total_size = 0;

  // optional string UUID = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientDisConnectRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ClientDisConnectRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ClientDisConnectRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientDisConnectRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ClientDisConnectRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ClientDisConnectRes)
    UnsafeMergeFrom(*source);
  }
}

void ClientDisConnectRes::MergeFrom(const ClientDisConnectRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ClientDisConnectRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ClientDisConnectRes::UnsafeMergeFrom(const ClientDisConnectRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
}

void ClientDisConnectRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ClientDisConnectRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientDisConnectRes::CopyFrom(const ClientDisConnectRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ClientDisConnectRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ClientDisConnectRes::IsInitialized() const {

  return true;
}

void ClientDisConnectRes::Swap(ClientDisConnectRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientDisConnectRes::InternalSwap(ClientDisConnectRes* other) {
  uuid_.Swap(&other->uuid_);
  userid_.Swap(&other->userid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClientDisConnectRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientDisConnectRes_descriptor_;
  metadata.reflection = ClientDisConnectRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientDisConnectRes

// optional string UUID = 1;
void ClientDisConnectRes::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClientDisConnectRes::uuid() const {
  // @@protoc_insertion_point(field_get:chat.ClientDisConnectRes.UUID)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientDisConnectRes::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ClientDisConnectRes.UUID)
}
void ClientDisConnectRes::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ClientDisConnectRes.UUID)
}
void ClientDisConnectRes::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ClientDisConnectRes.UUID)
}
::std::string* ClientDisConnectRes::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:chat.ClientDisConnectRes.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientDisConnectRes::release_uuid() {
  // @@protoc_insertion_point(field_release:chat.ClientDisConnectRes.UUID)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientDisConnectRes::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:chat.ClientDisConnectRes.UUID)
}

// optional string userID = 2;
void ClientDisConnectRes::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClientDisConnectRes::userid() const {
  // @@protoc_insertion_point(field_get:chat.ClientDisConnectRes.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientDisConnectRes::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ClientDisConnectRes.userID)
}
void ClientDisConnectRes::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ClientDisConnectRes.userID)
}
void ClientDisConnectRes::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ClientDisConnectRes.userID)
}
::std::string* ClientDisConnectRes::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:chat.ClientDisConnectRes.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientDisConnectRes::release_userid() {
  // @@protoc_insertion_point(field_release:chat.ClientDisConnectRes.userID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientDisConnectRes::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:chat.ClientDisConnectRes.userID)
}

inline const ClientDisConnectRes* ClientDisConnectRes::internal_default_instance() {
  return &ClientDisConnectRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Logout::kUserIDFieldNumber;
const int Logout::kUUIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Logout::Logout()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.Logout)
}

void Logout::InitAsDefaultInstance() {
}

Logout::Logout(const Logout& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.Logout)
}

void Logout::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Logout::~Logout() {
  // @@protoc_insertion_point(destructor:chat.Logout)
  SharedDtor();
}

void Logout::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Logout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Logout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Logout_descriptor_;
}

const Logout& Logout::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Logout> Logout_default_instance_;

Logout* Logout::New(::google::protobuf::Arena* arena) const {
  Logout* n = new Logout;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Logout::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.Logout)
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Logout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.Logout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.Logout.userID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UUID;
        break;
      }

      // optional string UUID = 2;
      case 2: {
        if (tag == 18) {
         parse_UUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.Logout.UUID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.Logout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.Logout)
  return false;
#undef DO_
}

void Logout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.Logout)
  // optional string userID = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Logout.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // optional string UUID = 2;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Logout.UUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uuid(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.Logout)
}

::google::protobuf::uint8* Logout::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.Logout)
  // optional string userID = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Logout.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // optional string UUID = 2;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Logout.UUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uuid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.Logout)
  return target;
}

size_t Logout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.Logout)
  size_t total_size = 0;

  // optional string userID = 1;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // optional string UUID = 2;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Logout::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.Logout)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Logout* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Logout>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.Logout)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.Logout)
    UnsafeMergeFrom(*source);
  }
}

void Logout::MergeFrom(const Logout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.Logout)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Logout::UnsafeMergeFrom(const Logout& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
}

void Logout::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.Logout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logout::CopyFrom(const Logout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.Logout)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Logout::IsInitialized() const {

  return true;
}

void Logout::Swap(Logout* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Logout::InternalSwap(Logout* other) {
  userid_.Swap(&other->userid_);
  uuid_.Swap(&other->uuid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Logout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Logout_descriptor_;
  metadata.reflection = Logout_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Logout

// optional string userID = 1;
void Logout::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Logout::userid() const {
  // @@protoc_insertion_point(field_get:chat.Logout.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Logout::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Logout.userID)
}
void Logout::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Logout.userID)
}
void Logout::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Logout.userID)
}
::std::string* Logout::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:chat.Logout.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Logout::release_userid() {
  // @@protoc_insertion_point(field_release:chat.Logout.userID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Logout::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:chat.Logout.userID)
}

// optional string UUID = 2;
void Logout::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Logout::uuid() const {
  // @@protoc_insertion_point(field_get:chat.Logout.UUID)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Logout::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Logout.UUID)
}
void Logout::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Logout.UUID)
}
void Logout::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Logout.UUID)
}
::std::string* Logout::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:chat.Logout.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Logout::release_uuid() {
  // @@protoc_insertion_point(field_release:chat.Logout.UUID)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Logout::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:chat.Logout.UUID)
}

inline const Logout* Logout::internal_default_instance() {
  return &Logout_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogoutRes::kUUIDFieldNumber;
const int LogoutRes::kUserIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogoutRes::LogoutRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.LogoutRes)
}

void LogoutRes::InitAsDefaultInstance() {
}

LogoutRes::LogoutRes(const LogoutRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.LogoutRes)
}

void LogoutRes::SharedCtor() {
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

LogoutRes::~LogoutRes() {
  // @@protoc_insertion_point(destructor:chat.LogoutRes)
  SharedDtor();
}

void LogoutRes::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogoutRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutRes_descriptor_;
}

const LogoutRes& LogoutRes::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LogoutRes> LogoutRes_default_instance_;

LogoutRes* LogoutRes::New(::google::protobuf::Arena* arena) const {
  LogoutRes* n = new LogoutRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogoutRes::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.LogoutRes)
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool LogoutRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.LogoutRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UUID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.LogoutRes.UUID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userID;
        break;
      }

      // optional string userID = 2;
      case 2: {
        if (tag == 18) {
         parse_userID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.LogoutRes.userID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.LogoutRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.LogoutRes)
  return false;
#undef DO_
}

void LogoutRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.LogoutRes)
  // optional string UUID = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.LogoutRes.UUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.LogoutRes.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.LogoutRes)
}

::google::protobuf::uint8* LogoutRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.LogoutRes)
  // optional string UUID = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.LogoutRes.UUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.LogoutRes.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.LogoutRes)
  return target;
}

size_t LogoutRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.LogoutRes)
  size_t total_size = 0;

  // optional string UUID = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.LogoutRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LogoutRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogoutRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.LogoutRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.LogoutRes)
    UnsafeMergeFrom(*source);
  }
}

void LogoutRes::MergeFrom(const LogoutRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.LogoutRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LogoutRes::UnsafeMergeFrom(const LogoutRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
}

void LogoutRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.LogoutRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutRes::CopyFrom(const LogoutRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.LogoutRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LogoutRes::IsInitialized() const {

  return true;
}

void LogoutRes::Swap(LogoutRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogoutRes::InternalSwap(LogoutRes* other) {
  uuid_.Swap(&other->uuid_);
  userid_.Swap(&other->userid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogoutRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutRes_descriptor_;
  metadata.reflection = LogoutRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogoutRes

// optional string UUID = 1;
void LogoutRes::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogoutRes::uuid() const {
  // @@protoc_insertion_point(field_get:chat.LogoutRes.UUID)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogoutRes::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.LogoutRes.UUID)
}
void LogoutRes::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.LogoutRes.UUID)
}
void LogoutRes::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.LogoutRes.UUID)
}
::std::string* LogoutRes::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:chat.LogoutRes.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogoutRes::release_uuid() {
  // @@protoc_insertion_point(field_release:chat.LogoutRes.UUID)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogoutRes::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:chat.LogoutRes.UUID)
}

// optional string userID = 2;
void LogoutRes::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogoutRes::userid() const {
  // @@protoc_insertion_point(field_get:chat.LogoutRes.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogoutRes::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.LogoutRes.userID)
}
void LogoutRes::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.LogoutRes.userID)
}
void LogoutRes::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.LogoutRes.userID)
}
::std::string* LogoutRes::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:chat.LogoutRes.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogoutRes::release_userid() {
  // @@protoc_insertion_point(field_release:chat.LogoutRes.userID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogoutRes::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:chat.LogoutRes.userID)
}

inline const LogoutRes* LogoutRes::internal_default_instance() {
  return &LogoutRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddFriend::kInviteeIDFieldNumber;
const int AddFriend::kInviterIDFieldNumber;
const int AddFriend::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddFriend::AddFriend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.AddFriend)
}

void AddFriend::InitAsDefaultInstance() {
}

AddFriend::AddFriend(const AddFriend& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.AddFriend)
}

void AddFriend::SharedCtor() {
  inviteeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inviterid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AddFriend::~AddFriend() {
  // @@protoc_insertion_point(destructor:chat.AddFriend)
  SharedDtor();
}

void AddFriend::SharedDtor() {
  inviteeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inviterid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFriend_descriptor_;
}

const AddFriend& AddFriend::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AddFriend> AddFriend_default_instance_;

AddFriend* AddFriend::New(::google::protobuf::Arena* arena) const {
  AddFriend* n = new AddFriend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.AddFriend)
  inviteeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inviterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.AddFriend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string inviteeID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inviteeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->inviteeid().data(), this->inviteeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.AddFriend.inviteeID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_inviterID;
        break;
      }

      // optional string inviterID = 2;
      case 2: {
        if (tag == 18) {
         parse_inviterID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inviterid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->inviterid().data(), this->inviterid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.AddFriend.inviterID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // optional string msg = 3;
      case 3: {
        if (tag == 26) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.AddFriend.msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.AddFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.AddFriend)
  return false;
#undef DO_
}

void AddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.AddFriend)
  // optional string inviteeID = 1;
  if (this->inviteeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inviteeid().data(), this->inviteeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.AddFriend.inviteeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->inviteeid(), output);
  }

  // optional string inviterID = 2;
  if (this->inviterid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inviterid().data(), this->inviterid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.AddFriend.inviterID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->inviterid(), output);
  }

  // optional string msg = 3;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.AddFriend.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.AddFriend)
}

::google::protobuf::uint8* AddFriend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.AddFriend)
  // optional string inviteeID = 1;
  if (this->inviteeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inviteeid().data(), this->inviteeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.AddFriend.inviteeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->inviteeid(), target);
  }

  // optional string inviterID = 2;
  if (this->inviterid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inviterid().data(), this->inviterid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.AddFriend.inviterID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->inviterid(), target);
  }

  // optional string msg = 3;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.AddFriend.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.AddFriend)
  return target;
}

size_t AddFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.AddFriend)
  size_t total_size = 0;

  // optional string inviteeID = 1;
  if (this->inviteeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inviteeid());
  }

  // optional string inviterID = 2;
  if (this->inviterid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inviterid());
  }

  // optional string msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFriend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.AddFriend)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AddFriend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddFriend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.AddFriend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.AddFriend)
    UnsafeMergeFrom(*source);
  }
}

void AddFriend::MergeFrom(const AddFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.AddFriend)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AddFriend::UnsafeMergeFrom(const AddFriend& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.inviteeid().size() > 0) {

    inviteeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inviteeid_);
  }
  if (from.inviterid().size() > 0) {

    inviterid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inviterid_);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void AddFriend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.AddFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriend::CopyFrom(const AddFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.AddFriend)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AddFriend::IsInitialized() const {

  return true;
}

void AddFriend::Swap(AddFriend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddFriend::InternalSwap(AddFriend* other) {
  inviteeid_.Swap(&other->inviteeid_);
  inviterid_.Swap(&other->inviterid_);
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFriend_descriptor_;
  metadata.reflection = AddFriend_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddFriend

// optional string inviteeID = 1;
void AddFriend::clear_inviteeid() {
  inviteeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddFriend::inviteeid() const {
  // @@protoc_insertion_point(field_get:chat.AddFriend.inviteeID)
  return inviteeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddFriend::set_inviteeid(const ::std::string& value) {
  
  inviteeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.AddFriend.inviteeID)
}
void AddFriend::set_inviteeid(const char* value) {
  
  inviteeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.AddFriend.inviteeID)
}
void AddFriend::set_inviteeid(const char* value, size_t size) {
  
  inviteeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.AddFriend.inviteeID)
}
::std::string* AddFriend::mutable_inviteeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.AddFriend.inviteeID)
  return inviteeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddFriend::release_inviteeid() {
  // @@protoc_insertion_point(field_release:chat.AddFriend.inviteeID)
  
  return inviteeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddFriend::set_allocated_inviteeid(::std::string* inviteeid) {
  if (inviteeid != NULL) {
    
  } else {
    
  }
  inviteeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inviteeid);
  // @@protoc_insertion_point(field_set_allocated:chat.AddFriend.inviteeID)
}

// optional string inviterID = 2;
void AddFriend::clear_inviterid() {
  inviterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddFriend::inviterid() const {
  // @@protoc_insertion_point(field_get:chat.AddFriend.inviterID)
  return inviterid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddFriend::set_inviterid(const ::std::string& value) {
  
  inviterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.AddFriend.inviterID)
}
void AddFriend::set_inviterid(const char* value) {
  
  inviterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.AddFriend.inviterID)
}
void AddFriend::set_inviterid(const char* value, size_t size) {
  
  inviterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.AddFriend.inviterID)
}
::std::string* AddFriend::mutable_inviterid() {
  
  // @@protoc_insertion_point(field_mutable:chat.AddFriend.inviterID)
  return inviterid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddFriend::release_inviterid() {
  // @@protoc_insertion_point(field_release:chat.AddFriend.inviterID)
  
  return inviterid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddFriend::set_allocated_inviterid(::std::string* inviterid) {
  if (inviterid != NULL) {
    
  } else {
    
  }
  inviterid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inviterid);
  // @@protoc_insertion_point(field_set_allocated:chat.AddFriend.inviterID)
}

// optional string msg = 3;
void AddFriend::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddFriend::msg() const {
  // @@protoc_insertion_point(field_get:chat.AddFriend.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddFriend::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.AddFriend.msg)
}
void AddFriend::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.AddFriend.msg)
}
void AddFriend::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.AddFriend.msg)
}
::std::string* AddFriend::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:chat.AddFriend.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddFriend::release_msg() {
  // @@protoc_insertion_point(field_release:chat.AddFriend.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddFriend::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:chat.AddFriend.msg)
}

inline const AddFriend* AddFriend::internal_default_instance() {
  return &AddFriend_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddFriendRes::kInviterIDFieldNumber;
const int AddFriendRes::kInviteeIDFieldNumber;
const int AddFriendRes::kToNodeIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddFriendRes::AddFriendRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.AddFriendRes)
}

void AddFriendRes::InitAsDefaultInstance() {
}

AddFriendRes::AddFriendRes(const AddFriendRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.AddFriendRes)
}

void AddFriendRes::SharedCtor() {
  inviterid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inviteeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tonodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AddFriendRes::~AddFriendRes() {
  // @@protoc_insertion_point(destructor:chat.AddFriendRes)
  SharedDtor();
}

void AddFriendRes::SharedDtor() {
  inviterid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inviteeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tonodeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AddFriendRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFriendRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFriendRes_descriptor_;
}

const AddFriendRes& AddFriendRes::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AddFriendRes> AddFriendRes_default_instance_;

AddFriendRes* AddFriendRes::New(::google::protobuf::Arena* arena) const {
  AddFriendRes* n = new AddFriendRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddFriendRes::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.AddFriendRes)
  inviterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inviteeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AddFriendRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.AddFriendRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string inviterID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inviterid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->inviterid().data(), this->inviterid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.AddFriendRes.inviterID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_inviteeID;
        break;
      }

      // optional string inviteeID = 2;
      case 2: {
        if (tag == 18) {
         parse_inviteeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inviteeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->inviteeid().data(), this->inviteeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.AddFriendRes.inviteeID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_toNodeID;
        break;
      }

      // optional string toNodeID = 3;
      case 3: {
        if (tag == 26) {
         parse_toNodeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tonodeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tonodeid().data(), this->tonodeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.AddFriendRes.toNodeID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.AddFriendRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.AddFriendRes)
  return false;
#undef DO_
}

void AddFriendRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.AddFriendRes)
  // optional string inviterID = 1;
  if (this->inviterid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inviterid().data(), this->inviterid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.AddFriendRes.inviterID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->inviterid(), output);
  }

  // optional string inviteeID = 2;
  if (this->inviteeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inviteeid().data(), this->inviteeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.AddFriendRes.inviteeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->inviteeid(), output);
  }

  // optional string toNodeID = 3;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.AddFriendRes.toNodeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tonodeid(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.AddFriendRes)
}

::google::protobuf::uint8* AddFriendRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.AddFriendRes)
  // optional string inviterID = 1;
  if (this->inviterid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inviterid().data(), this->inviterid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.AddFriendRes.inviterID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->inviterid(), target);
  }

  // optional string inviteeID = 2;
  if (this->inviteeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inviteeid().data(), this->inviteeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.AddFriendRes.inviteeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->inviteeid(), target);
  }

  // optional string toNodeID = 3;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.AddFriendRes.toNodeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tonodeid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.AddFriendRes)
  return target;
}

size_t AddFriendRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.AddFriendRes)
  size_t total_size = 0;

  // optional string inviterID = 1;
  if (this->inviterid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inviterid());
  }

  // optional string inviteeID = 2;
  if (this->inviteeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inviteeid());
  }

  // optional string toNodeID = 3;
  if (this->tonodeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tonodeid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFriendRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.AddFriendRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AddFriendRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddFriendRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.AddFriendRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.AddFriendRes)
    UnsafeMergeFrom(*source);
  }
}

void AddFriendRes::MergeFrom(const AddFriendRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.AddFriendRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AddFriendRes::UnsafeMergeFrom(const AddFriendRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.inviterid().size() > 0) {

    inviterid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inviterid_);
  }
  if (from.inviteeid().size() > 0) {

    inviteeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inviteeid_);
  }
  if (from.tonodeid().size() > 0) {

    tonodeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tonodeid_);
  }
}

void AddFriendRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.AddFriendRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendRes::CopyFrom(const AddFriendRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.AddFriendRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AddFriendRes::IsInitialized() const {

  return true;
}

void AddFriendRes::Swap(AddFriendRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddFriendRes::InternalSwap(AddFriendRes* other) {
  inviterid_.Swap(&other->inviterid_);
  inviteeid_.Swap(&other->inviteeid_);
  tonodeid_.Swap(&other->tonodeid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddFriendRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFriendRes_descriptor_;
  metadata.reflection = AddFriendRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddFriendRes

// optional string inviterID = 1;
void AddFriendRes::clear_inviterid() {
  inviterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddFriendRes::inviterid() const {
  // @@protoc_insertion_point(field_get:chat.AddFriendRes.inviterID)
  return inviterid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddFriendRes::set_inviterid(const ::std::string& value) {
  
  inviterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.AddFriendRes.inviterID)
}
void AddFriendRes::set_inviterid(const char* value) {
  
  inviterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.AddFriendRes.inviterID)
}
void AddFriendRes::set_inviterid(const char* value, size_t size) {
  
  inviterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.AddFriendRes.inviterID)
}
::std::string* AddFriendRes::mutable_inviterid() {
  
  // @@protoc_insertion_point(field_mutable:chat.AddFriendRes.inviterID)
  return inviterid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddFriendRes::release_inviterid() {
  // @@protoc_insertion_point(field_release:chat.AddFriendRes.inviterID)
  
  return inviterid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddFriendRes::set_allocated_inviterid(::std::string* inviterid) {
  if (inviterid != NULL) {
    
  } else {
    
  }
  inviterid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inviterid);
  // @@protoc_insertion_point(field_set_allocated:chat.AddFriendRes.inviterID)
}

// optional string inviteeID = 2;
void AddFriendRes::clear_inviteeid() {
  inviteeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddFriendRes::inviteeid() const {
  // @@protoc_insertion_point(field_get:chat.AddFriendRes.inviteeID)
  return inviteeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddFriendRes::set_inviteeid(const ::std::string& value) {
  
  inviteeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.AddFriendRes.inviteeID)
}
void AddFriendRes::set_inviteeid(const char* value) {
  
  inviteeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.AddFriendRes.inviteeID)
}
void AddFriendRes::set_inviteeid(const char* value, size_t size) {
  
  inviteeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.AddFriendRes.inviteeID)
}
::std::string* AddFriendRes::mutable_inviteeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.AddFriendRes.inviteeID)
  return inviteeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddFriendRes::release_inviteeid() {
  // @@protoc_insertion_point(field_release:chat.AddFriendRes.inviteeID)
  
  return inviteeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddFriendRes::set_allocated_inviteeid(::std::string* inviteeid) {
  if (inviteeid != NULL) {
    
  } else {
    
  }
  inviteeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inviteeid);
  // @@protoc_insertion_point(field_set_allocated:chat.AddFriendRes.inviteeID)
}

// optional string toNodeID = 3;
void AddFriendRes::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddFriendRes::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.AddFriendRes.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddFriendRes::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.AddFriendRes.toNodeID)
}
void AddFriendRes::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.AddFriendRes.toNodeID)
}
void AddFriendRes::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.AddFriendRes.toNodeID)
}
::std::string* AddFriendRes::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.AddFriendRes.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddFriendRes::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.AddFriendRes.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddFriendRes::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.AddFriendRes.toNodeID)
}

inline const AddFriendRes* AddFriendRes::internal_default_instance() {
  return &AddFriendRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddFriendNoti::kToUserIDOuterFieldNumber;
const int AddFriendNoti::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddFriendNoti::AddFriendNoti()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.AddFriendNoti)
}

void AddFriendNoti::InitAsDefaultInstance() {
  response_ = const_cast< ::chat::AddFriendRes*>(
      ::chat::AddFriendRes::internal_default_instance());
}

AddFriendNoti::AddFriendNoti(const AddFriendNoti& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.AddFriendNoti)
}

void AddFriendNoti::SharedCtor() {
  touserid_outer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_ = NULL;
  _cached_size_ = 0;
}

AddFriendNoti::~AddFriendNoti() {
  // @@protoc_insertion_point(destructor:chat.AddFriendNoti)
  SharedDtor();
}

void AddFriendNoti::SharedDtor() {
  touserid_outer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &AddFriendNoti_default_instance_.get()) {
    delete response_;
  }
}

void AddFriendNoti::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFriendNoti::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFriendNoti_descriptor_;
}

const AddFriendNoti& AddFriendNoti::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AddFriendNoti> AddFriendNoti_default_instance_;

AddFriendNoti* AddFriendNoti::New(::google::protobuf::Arena* arena) const {
  AddFriendNoti* n = new AddFriendNoti;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddFriendNoti::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.AddFriendNoti)
  touserid_outer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}

bool AddFriendNoti::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.AddFriendNoti)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string toUserID_outer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_touserid_outer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->touserid_outer().data(), this->touserid_outer().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.AddFriendNoti.toUserID_outer"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .chat.AddFriendRes response = 2;
      case 2: {
        if (tag == 18) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.AddFriendNoti)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.AddFriendNoti)
  return false;
#undef DO_
}

void AddFriendNoti::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.AddFriendNoti)
  // optional string toUserID_outer = 1;
  if (this->touserid_outer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->touserid_outer().data(), this->touserid_outer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.AddFriendNoti.toUserID_outer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->touserid_outer(), output);
  }

  // optional .chat.AddFriendRes response = 2;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:chat.AddFriendNoti)
}

::google::protobuf::uint8* AddFriendNoti::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.AddFriendNoti)
  // optional string toUserID_outer = 1;
  if (this->touserid_outer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->touserid_outer().data(), this->touserid_outer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.AddFriendNoti.toUserID_outer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->touserid_outer(), target);
  }

  // optional .chat.AddFriendRes response = 2;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.AddFriendNoti)
  return target;
}

size_t AddFriendNoti::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.AddFriendNoti)
  size_t total_size = 0;

  // optional string toUserID_outer = 1;
  if (this->touserid_outer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->touserid_outer());
  }

  // optional .chat.AddFriendRes response = 2;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFriendNoti::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.AddFriendNoti)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AddFriendNoti* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddFriendNoti>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.AddFriendNoti)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.AddFriendNoti)
    UnsafeMergeFrom(*source);
  }
}

void AddFriendNoti::MergeFrom(const AddFriendNoti& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.AddFriendNoti)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AddFriendNoti::UnsafeMergeFrom(const AddFriendNoti& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.touserid_outer().size() > 0) {

    touserid_outer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.touserid_outer_);
  }
  if (from.has_response()) {
    mutable_response()->::chat::AddFriendRes::MergeFrom(from.response());
  }
}

void AddFriendNoti::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.AddFriendNoti)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendNoti::CopyFrom(const AddFriendNoti& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.AddFriendNoti)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AddFriendNoti::IsInitialized() const {

  return true;
}

void AddFriendNoti::Swap(AddFriendNoti* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddFriendNoti::InternalSwap(AddFriendNoti* other) {
  touserid_outer_.Swap(&other->touserid_outer_);
  std::swap(response_, other->response_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddFriendNoti::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFriendNoti_descriptor_;
  metadata.reflection = AddFriendNoti_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddFriendNoti

// optional string toUserID_outer = 1;
void AddFriendNoti::clear_touserid_outer() {
  touserid_outer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddFriendNoti::touserid_outer() const {
  // @@protoc_insertion_point(field_get:chat.AddFriendNoti.toUserID_outer)
  return touserid_outer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddFriendNoti::set_touserid_outer(const ::std::string& value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.AddFriendNoti.toUserID_outer)
}
void AddFriendNoti::set_touserid_outer(const char* value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.AddFriendNoti.toUserID_outer)
}
void AddFriendNoti::set_touserid_outer(const char* value, size_t size) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.AddFriendNoti.toUserID_outer)
}
::std::string* AddFriendNoti::mutable_touserid_outer() {
  
  // @@protoc_insertion_point(field_mutable:chat.AddFriendNoti.toUserID_outer)
  return touserid_outer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddFriendNoti::release_touserid_outer() {
  // @@protoc_insertion_point(field_release:chat.AddFriendNoti.toUserID_outer)
  
  return touserid_outer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddFriendNoti::set_allocated_touserid_outer(::std::string* touserid_outer) {
  if (touserid_outer != NULL) {
    
  } else {
    
  }
  touserid_outer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), touserid_outer);
  // @@protoc_insertion_point(field_set_allocated:chat.AddFriendNoti.toUserID_outer)
}

// optional .chat.AddFriendRes response = 2;
bool AddFriendNoti::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void AddFriendNoti::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::chat::AddFriendRes& AddFriendNoti::response() const {
  // @@protoc_insertion_point(field_get:chat.AddFriendNoti.response)
  return response_ != NULL ? *response_
                         : *::chat::AddFriendRes::internal_default_instance();
}
::chat::AddFriendRes* AddFriendNoti::mutable_response() {
  
  if (response_ == NULL) {
    response_ = new ::chat::AddFriendRes;
  }
  // @@protoc_insertion_point(field_mutable:chat.AddFriendNoti.response)
  return response_;
}
::chat::AddFriendRes* AddFriendNoti::release_response() {
  // @@protoc_insertion_point(field_release:chat.AddFriendNoti.response)
  
  ::chat::AddFriendRes* temp = response_;
  response_ = NULL;
  return temp;
}
void AddFriendNoti::set_allocated_response(::chat::AddFriendRes* response) {
  delete response_;
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chat.AddFriendNoti.response)
}

inline const AddFriendNoti* AddFriendNoti::internal_default_instance() {
  return &AddFriendNoti_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddFriendAuthorize::kInviterIDFieldNumber;
const int AddFriendAuthorize::kInviteeIDFieldNumber;
const int AddFriendAuthorize::kIsAgreeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddFriendAuthorize::AddFriendAuthorize()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.AddFriendAuthorize)
}

void AddFriendAuthorize::InitAsDefaultInstance() {
}

AddFriendAuthorize::AddFriendAuthorize(const AddFriendAuthorize& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.AddFriendAuthorize)
}

void AddFriendAuthorize::SharedCtor() {
  inviterid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inviteeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isagree_ = 0;
  _cached_size_ = 0;
}

AddFriendAuthorize::~AddFriendAuthorize() {
  // @@protoc_insertion_point(destructor:chat.AddFriendAuthorize)
  SharedDtor();
}

void AddFriendAuthorize::SharedDtor() {
  inviterid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inviteeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AddFriendAuthorize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFriendAuthorize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFriendAuthorize_descriptor_;
}

const AddFriendAuthorize& AddFriendAuthorize::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AddFriendAuthorize> AddFriendAuthorize_default_instance_;

AddFriendAuthorize* AddFriendAuthorize::New(::google::protobuf::Arena* arena) const {
  AddFriendAuthorize* n = new AddFriendAuthorize;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddFriendAuthorize::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.AddFriendAuthorize)
  inviterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inviteeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isagree_ = 0;
}

bool AddFriendAuthorize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.AddFriendAuthorize)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string inviterID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inviterid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->inviterid().data(), this->inviterid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.AddFriendAuthorize.inviterID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_inviteeID;
        break;
      }

      // optional string inviteeID = 2;
      case 2: {
        if (tag == 18) {
         parse_inviteeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inviteeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->inviteeid().data(), this->inviteeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.AddFriendAuthorize.inviteeID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isAgree;
        break;
      }

      // optional .chat.IsAgree isAgree = 3;
      case 3: {
        if (tag == 24) {
         parse_isAgree:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_isagree(static_cast< ::chat::IsAgree >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.AddFriendAuthorize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.AddFriendAuthorize)
  return false;
#undef DO_
}

void AddFriendAuthorize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.AddFriendAuthorize)
  // optional string inviterID = 1;
  if (this->inviterid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inviterid().data(), this->inviterid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.AddFriendAuthorize.inviterID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->inviterid(), output);
  }

  // optional string inviteeID = 2;
  if (this->inviteeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inviteeid().data(), this->inviteeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.AddFriendAuthorize.inviteeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->inviteeid(), output);
  }

  // optional .chat.IsAgree isAgree = 3;
  if (this->isagree() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->isagree(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.AddFriendAuthorize)
}

::google::protobuf::uint8* AddFriendAuthorize::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.AddFriendAuthorize)
  // optional string inviterID = 1;
  if (this->inviterid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inviterid().data(), this->inviterid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.AddFriendAuthorize.inviterID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->inviterid(), target);
  }

  // optional string inviteeID = 2;
  if (this->inviteeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inviteeid().data(), this->inviteeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.AddFriendAuthorize.inviteeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->inviteeid(), target);
  }

  // optional .chat.IsAgree isAgree = 3;
  if (this->isagree() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->isagree(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.AddFriendAuthorize)
  return target;
}

size_t AddFriendAuthorize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.AddFriendAuthorize)
  size_t total_size = 0;

  // optional string inviterID = 1;
  if (this->inviterid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inviterid());
  }

  // optional string inviteeID = 2;
  if (this->inviteeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inviteeid());
  }

  // optional .chat.IsAgree isAgree = 3;
  if (this->isagree() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->isagree());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFriendAuthorize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.AddFriendAuthorize)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AddFriendAuthorize* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddFriendAuthorize>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.AddFriendAuthorize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.AddFriendAuthorize)
    UnsafeMergeFrom(*source);
  }
}

void AddFriendAuthorize::MergeFrom(const AddFriendAuthorize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.AddFriendAuthorize)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AddFriendAuthorize::UnsafeMergeFrom(const AddFriendAuthorize& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.inviterid().size() > 0) {

    inviterid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inviterid_);
  }
  if (from.inviteeid().size() > 0) {

    inviteeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inviteeid_);
  }
  if (from.isagree() != 0) {
    set_isagree(from.isagree());
  }
}

void AddFriendAuthorize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.AddFriendAuthorize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendAuthorize::CopyFrom(const AddFriendAuthorize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.AddFriendAuthorize)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AddFriendAuthorize::IsInitialized() const {

  return true;
}

void AddFriendAuthorize::Swap(AddFriendAuthorize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddFriendAuthorize::InternalSwap(AddFriendAuthorize* other) {
  inviterid_.Swap(&other->inviterid_);
  inviteeid_.Swap(&other->inviteeid_);
  std::swap(isagree_, other->isagree_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddFriendAuthorize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFriendAuthorize_descriptor_;
  metadata.reflection = AddFriendAuthorize_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddFriendAuthorize

// optional string inviterID = 1;
void AddFriendAuthorize::clear_inviterid() {
  inviterid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddFriendAuthorize::inviterid() const {
  // @@protoc_insertion_point(field_get:chat.AddFriendAuthorize.inviterID)
  return inviterid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddFriendAuthorize::set_inviterid(const ::std::string& value) {
  
  inviterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.AddFriendAuthorize.inviterID)
}
void AddFriendAuthorize::set_inviterid(const char* value) {
  
  inviterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.AddFriendAuthorize.inviterID)
}
void AddFriendAuthorize::set_inviterid(const char* value, size_t size) {
  
  inviterid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.AddFriendAuthorize.inviterID)
}
::std::string* AddFriendAuthorize::mutable_inviterid() {
  
  // @@protoc_insertion_point(field_mutable:chat.AddFriendAuthorize.inviterID)
  return inviterid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddFriendAuthorize::release_inviterid() {
  // @@protoc_insertion_point(field_release:chat.AddFriendAuthorize.inviterID)
  
  return inviterid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddFriendAuthorize::set_allocated_inviterid(::std::string* inviterid) {
  if (inviterid != NULL) {
    
  } else {
    
  }
  inviterid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inviterid);
  // @@protoc_insertion_point(field_set_allocated:chat.AddFriendAuthorize.inviterID)
}

// optional string inviteeID = 2;
void AddFriendAuthorize::clear_inviteeid() {
  inviteeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddFriendAuthorize::inviteeid() const {
  // @@protoc_insertion_point(field_get:chat.AddFriendAuthorize.inviteeID)
  return inviteeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddFriendAuthorize::set_inviteeid(const ::std::string& value) {
  
  inviteeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.AddFriendAuthorize.inviteeID)
}
void AddFriendAuthorize::set_inviteeid(const char* value) {
  
  inviteeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.AddFriendAuthorize.inviteeID)
}
void AddFriendAuthorize::set_inviteeid(const char* value, size_t size) {
  
  inviteeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.AddFriendAuthorize.inviteeID)
}
::std::string* AddFriendAuthorize::mutable_inviteeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.AddFriendAuthorize.inviteeID)
  return inviteeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddFriendAuthorize::release_inviteeid() {
  // @@protoc_insertion_point(field_release:chat.AddFriendAuthorize.inviteeID)
  
  return inviteeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddFriendAuthorize::set_allocated_inviteeid(::std::string* inviteeid) {
  if (inviteeid != NULL) {
    
  } else {
    
  }
  inviteeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inviteeid);
  // @@protoc_insertion_point(field_set_allocated:chat.AddFriendAuthorize.inviteeID)
}

// optional .chat.IsAgree isAgree = 3;
void AddFriendAuthorize::clear_isagree() {
  isagree_ = 0;
}
::chat::IsAgree AddFriendAuthorize::isagree() const {
  // @@protoc_insertion_point(field_get:chat.AddFriendAuthorize.isAgree)
  return static_cast< ::chat::IsAgree >(isagree_);
}
void AddFriendAuthorize::set_isagree(::chat::IsAgree value) {
  
  isagree_ = value;
  // @@protoc_insertion_point(field_set:chat.AddFriendAuthorize.isAgree)
}

inline const AddFriendAuthorize* AddFriendAuthorize::internal_default_instance() {
  return &AddFriendAuthorize_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddFriendAuthorizeRes::kIsAgreeFieldNumber;
const int AddFriendAuthorizeRes::kToUserIDOuterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddFriendAuthorizeRes::AddFriendAuthorizeRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.AddFriendAuthorizeRes)
}

void AddFriendAuthorizeRes::InitAsDefaultInstance() {
}

AddFriendAuthorizeRes::AddFriendAuthorizeRes(const AddFriendAuthorizeRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.AddFriendAuthorizeRes)
}

void AddFriendAuthorizeRes::SharedCtor() {
  touserid_outer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isagree_ = 0;
  _cached_size_ = 0;
}

AddFriendAuthorizeRes::~AddFriendAuthorizeRes() {
  // @@protoc_insertion_point(destructor:chat.AddFriendAuthorizeRes)
  SharedDtor();
}

void AddFriendAuthorizeRes::SharedDtor() {
  touserid_outer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AddFriendAuthorizeRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFriendAuthorizeRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFriendAuthorizeRes_descriptor_;
}

const AddFriendAuthorizeRes& AddFriendAuthorizeRes::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AddFriendAuthorizeRes> AddFriendAuthorizeRes_default_instance_;

AddFriendAuthorizeRes* AddFriendAuthorizeRes::New(::google::protobuf::Arena* arena) const {
  AddFriendAuthorizeRes* n = new AddFriendAuthorizeRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddFriendAuthorizeRes::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.AddFriendAuthorizeRes)
  isagree_ = 0;
  touserid_outer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AddFriendAuthorizeRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.AddFriendAuthorizeRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .chat.IsAgree isAgree = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_isagree(static_cast< ::chat::IsAgree >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_toUserID_outer;
        break;
      }

      // optional string toUserID_outer = 2;
      case 2: {
        if (tag == 18) {
         parse_toUserID_outer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_touserid_outer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->touserid_outer().data(), this->touserid_outer().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.AddFriendAuthorizeRes.toUserID_outer"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.AddFriendAuthorizeRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.AddFriendAuthorizeRes)
  return false;
#undef DO_
}

void AddFriendAuthorizeRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.AddFriendAuthorizeRes)
  // optional .chat.IsAgree isAgree = 1;
  if (this->isagree() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->isagree(), output);
  }

  // optional string toUserID_outer = 2;
  if (this->touserid_outer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->touserid_outer().data(), this->touserid_outer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.AddFriendAuthorizeRes.toUserID_outer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->touserid_outer(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.AddFriendAuthorizeRes)
}

::google::protobuf::uint8* AddFriendAuthorizeRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.AddFriendAuthorizeRes)
  // optional .chat.IsAgree isAgree = 1;
  if (this->isagree() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->isagree(), target);
  }

  // optional string toUserID_outer = 2;
  if (this->touserid_outer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->touserid_outer().data(), this->touserid_outer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.AddFriendAuthorizeRes.toUserID_outer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->touserid_outer(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.AddFriendAuthorizeRes)
  return target;
}

size_t AddFriendAuthorizeRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.AddFriendAuthorizeRes)
  size_t total_size = 0;

  // optional .chat.IsAgree isAgree = 1;
  if (this->isagree() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->isagree());
  }

  // optional string toUserID_outer = 2;
  if (this->touserid_outer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->touserid_outer());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFriendAuthorizeRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.AddFriendAuthorizeRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AddFriendAuthorizeRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddFriendAuthorizeRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.AddFriendAuthorizeRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.AddFriendAuthorizeRes)
    UnsafeMergeFrom(*source);
  }
}

void AddFriendAuthorizeRes::MergeFrom(const AddFriendAuthorizeRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.AddFriendAuthorizeRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AddFriendAuthorizeRes::UnsafeMergeFrom(const AddFriendAuthorizeRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.isagree() != 0) {
    set_isagree(from.isagree());
  }
  if (from.touserid_outer().size() > 0) {

    touserid_outer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.touserid_outer_);
  }
}

void AddFriendAuthorizeRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.AddFriendAuthorizeRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendAuthorizeRes::CopyFrom(const AddFriendAuthorizeRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.AddFriendAuthorizeRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AddFriendAuthorizeRes::IsInitialized() const {

  return true;
}

void AddFriendAuthorizeRes::Swap(AddFriendAuthorizeRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddFriendAuthorizeRes::InternalSwap(AddFriendAuthorizeRes* other) {
  std::swap(isagree_, other->isagree_);
  touserid_outer_.Swap(&other->touserid_outer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddFriendAuthorizeRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFriendAuthorizeRes_descriptor_;
  metadata.reflection = AddFriendAuthorizeRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddFriendAuthorizeRes

// optional .chat.IsAgree isAgree = 1;
void AddFriendAuthorizeRes::clear_isagree() {
  isagree_ = 0;
}
::chat::IsAgree AddFriendAuthorizeRes::isagree() const {
  // @@protoc_insertion_point(field_get:chat.AddFriendAuthorizeRes.isAgree)
  return static_cast< ::chat::IsAgree >(isagree_);
}
void AddFriendAuthorizeRes::set_isagree(::chat::IsAgree value) {
  
  isagree_ = value;
  // @@protoc_insertion_point(field_set:chat.AddFriendAuthorizeRes.isAgree)
}

// optional string toUserID_outer = 2;
void AddFriendAuthorizeRes::clear_touserid_outer() {
  touserid_outer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddFriendAuthorizeRes::touserid_outer() const {
  // @@protoc_insertion_point(field_get:chat.AddFriendAuthorizeRes.toUserID_outer)
  return touserid_outer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddFriendAuthorizeRes::set_touserid_outer(const ::std::string& value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.AddFriendAuthorizeRes.toUserID_outer)
}
void AddFriendAuthorizeRes::set_touserid_outer(const char* value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.AddFriendAuthorizeRes.toUserID_outer)
}
void AddFriendAuthorizeRes::set_touserid_outer(const char* value, size_t size) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.AddFriendAuthorizeRes.toUserID_outer)
}
::std::string* AddFriendAuthorizeRes::mutable_touserid_outer() {
  
  // @@protoc_insertion_point(field_mutable:chat.AddFriendAuthorizeRes.toUserID_outer)
  return touserid_outer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddFriendAuthorizeRes::release_touserid_outer() {
  // @@protoc_insertion_point(field_release:chat.AddFriendAuthorizeRes.toUserID_outer)
  
  return touserid_outer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddFriendAuthorizeRes::set_allocated_touserid_outer(::std::string* touserid_outer) {
  if (touserid_outer != NULL) {
    
  } else {
    
  }
  touserid_outer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), touserid_outer);
  // @@protoc_insertion_point(field_set_allocated:chat.AddFriendAuthorizeRes.toUserID_outer)
}

inline const AddFriendAuthorizeRes* AddFriendAuthorizeRes::internal_default_instance() {
  return &AddFriendAuthorizeRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddFriendAuthorizeNoti::kToUserIDOuterFieldNumber;
const int AddFriendAuthorizeNoti::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddFriendAuthorizeNoti::AddFriendAuthorizeNoti()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.AddFriendAuthorizeNoti)
}

void AddFriendAuthorizeNoti::InitAsDefaultInstance() {
  response_ = const_cast< ::chat::AddFriendAuthorize*>(
      ::chat::AddFriendAuthorize::internal_default_instance());
}

AddFriendAuthorizeNoti::AddFriendAuthorizeNoti(const AddFriendAuthorizeNoti& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.AddFriendAuthorizeNoti)
}

void AddFriendAuthorizeNoti::SharedCtor() {
  touserid_outer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_ = NULL;
  _cached_size_ = 0;
}

AddFriendAuthorizeNoti::~AddFriendAuthorizeNoti() {
  // @@protoc_insertion_point(destructor:chat.AddFriendAuthorizeNoti)
  SharedDtor();
}

void AddFriendAuthorizeNoti::SharedDtor() {
  touserid_outer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &AddFriendAuthorizeNoti_default_instance_.get()) {
    delete response_;
  }
}

void AddFriendAuthorizeNoti::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFriendAuthorizeNoti::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFriendAuthorizeNoti_descriptor_;
}

const AddFriendAuthorizeNoti& AddFriendAuthorizeNoti::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AddFriendAuthorizeNoti> AddFriendAuthorizeNoti_default_instance_;

AddFriendAuthorizeNoti* AddFriendAuthorizeNoti::New(::google::protobuf::Arena* arena) const {
  AddFriendAuthorizeNoti* n = new AddFriendAuthorizeNoti;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddFriendAuthorizeNoti::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.AddFriendAuthorizeNoti)
  touserid_outer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}

bool AddFriendAuthorizeNoti::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.AddFriendAuthorizeNoti)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string toUserID_outer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_touserid_outer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->touserid_outer().data(), this->touserid_outer().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.AddFriendAuthorizeNoti.toUserID_outer"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .chat.AddFriendAuthorize response = 2;
      case 2: {
        if (tag == 18) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.AddFriendAuthorizeNoti)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.AddFriendAuthorizeNoti)
  return false;
#undef DO_
}

void AddFriendAuthorizeNoti::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.AddFriendAuthorizeNoti)
  // optional string toUserID_outer = 1;
  if (this->touserid_outer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->touserid_outer().data(), this->touserid_outer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.AddFriendAuthorizeNoti.toUserID_outer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->touserid_outer(), output);
  }

  // optional .chat.AddFriendAuthorize response = 2;
  if (this->has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->response_, output);
  }

  // @@protoc_insertion_point(serialize_end:chat.AddFriendAuthorizeNoti)
}

::google::protobuf::uint8* AddFriendAuthorizeNoti::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.AddFriendAuthorizeNoti)
  // optional string toUserID_outer = 1;
  if (this->touserid_outer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->touserid_outer().data(), this->touserid_outer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.AddFriendAuthorizeNoti.toUserID_outer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->touserid_outer(), target);
  }

  // optional .chat.AddFriendAuthorize response = 2;
  if (this->has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.AddFriendAuthorizeNoti)
  return target;
}

size_t AddFriendAuthorizeNoti::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.AddFriendAuthorizeNoti)
  size_t total_size = 0;

  // optional string toUserID_outer = 1;
  if (this->touserid_outer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->touserid_outer());
  }

  // optional .chat.AddFriendAuthorize response = 2;
  if (this->has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->response_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFriendAuthorizeNoti::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.AddFriendAuthorizeNoti)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AddFriendAuthorizeNoti* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddFriendAuthorizeNoti>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.AddFriendAuthorizeNoti)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.AddFriendAuthorizeNoti)
    UnsafeMergeFrom(*source);
  }
}

void AddFriendAuthorizeNoti::MergeFrom(const AddFriendAuthorizeNoti& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.AddFriendAuthorizeNoti)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AddFriendAuthorizeNoti::UnsafeMergeFrom(const AddFriendAuthorizeNoti& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.touserid_outer().size() > 0) {

    touserid_outer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.touserid_outer_);
  }
  if (from.has_response()) {
    mutable_response()->::chat::AddFriendAuthorize::MergeFrom(from.response());
  }
}

void AddFriendAuthorizeNoti::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.AddFriendAuthorizeNoti)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendAuthorizeNoti::CopyFrom(const AddFriendAuthorizeNoti& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.AddFriendAuthorizeNoti)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AddFriendAuthorizeNoti::IsInitialized() const {

  return true;
}

void AddFriendAuthorizeNoti::Swap(AddFriendAuthorizeNoti* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddFriendAuthorizeNoti::InternalSwap(AddFriendAuthorizeNoti* other) {
  touserid_outer_.Swap(&other->touserid_outer_);
  std::swap(response_, other->response_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddFriendAuthorizeNoti::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFriendAuthorizeNoti_descriptor_;
  metadata.reflection = AddFriendAuthorizeNoti_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddFriendAuthorizeNoti

// optional string toUserID_outer = 1;
void AddFriendAuthorizeNoti::clear_touserid_outer() {
  touserid_outer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AddFriendAuthorizeNoti::touserid_outer() const {
  // @@protoc_insertion_point(field_get:chat.AddFriendAuthorizeNoti.toUserID_outer)
  return touserid_outer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddFriendAuthorizeNoti::set_touserid_outer(const ::std::string& value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.AddFriendAuthorizeNoti.toUserID_outer)
}
void AddFriendAuthorizeNoti::set_touserid_outer(const char* value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.AddFriendAuthorizeNoti.toUserID_outer)
}
void AddFriendAuthorizeNoti::set_touserid_outer(const char* value, size_t size) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.AddFriendAuthorizeNoti.toUserID_outer)
}
::std::string* AddFriendAuthorizeNoti::mutable_touserid_outer() {
  
  // @@protoc_insertion_point(field_mutable:chat.AddFriendAuthorizeNoti.toUserID_outer)
  return touserid_outer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddFriendAuthorizeNoti::release_touserid_outer() {
  // @@protoc_insertion_point(field_release:chat.AddFriendAuthorizeNoti.toUserID_outer)
  
  return touserid_outer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddFriendAuthorizeNoti::set_allocated_touserid_outer(::std::string* touserid_outer) {
  if (touserid_outer != NULL) {
    
  } else {
    
  }
  touserid_outer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), touserid_outer);
  // @@protoc_insertion_point(field_set_allocated:chat.AddFriendAuthorizeNoti.toUserID_outer)
}

// optional .chat.AddFriendAuthorize response = 2;
bool AddFriendAuthorizeNoti::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
void AddFriendAuthorizeNoti::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) delete response_;
  response_ = NULL;
}
const ::chat::AddFriendAuthorize& AddFriendAuthorizeNoti::response() const {
  // @@protoc_insertion_point(field_get:chat.AddFriendAuthorizeNoti.response)
  return response_ != NULL ? *response_
                         : *::chat::AddFriendAuthorize::internal_default_instance();
}
::chat::AddFriendAuthorize* AddFriendAuthorizeNoti::mutable_response() {
  
  if (response_ == NULL) {
    response_ = new ::chat::AddFriendAuthorize;
  }
  // @@protoc_insertion_point(field_mutable:chat.AddFriendAuthorizeNoti.response)
  return response_;
}
::chat::AddFriendAuthorize* AddFriendAuthorizeNoti::release_response() {
  // @@protoc_insertion_point(field_release:chat.AddFriendAuthorizeNoti.response)
  
  ::chat::AddFriendAuthorize* temp = response_;
  response_ = NULL;
  return temp;
}
void AddFriendAuthorizeNoti::set_allocated_response(::chat::AddFriendAuthorize* response) {
  delete response_;
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:chat.AddFriendAuthorizeNoti.response)
}

inline const AddFriendAuthorizeNoti* AddFriendAuthorizeNoti::internal_default_instance() {
  return &AddFriendAuthorizeNoti_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryAddfriendInfo::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryAddfriendInfo::QueryAddfriendInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.QueryAddfriendInfo)
}

void QueryAddfriendInfo::InitAsDefaultInstance() {
}

QueryAddfriendInfo::QueryAddfriendInfo(const QueryAddfriendInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.QueryAddfriendInfo)
}

void QueryAddfriendInfo::SharedCtor() {
  count_ = 0;
  _cached_size_ = 0;
}

QueryAddfriendInfo::~QueryAddfriendInfo() {
  // @@protoc_insertion_point(destructor:chat.QueryAddfriendInfo)
  SharedDtor();
}

void QueryAddfriendInfo::SharedDtor() {
}

void QueryAddfriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryAddfriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryAddfriendInfo_descriptor_;
}

const QueryAddfriendInfo& QueryAddfriendInfo::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QueryAddfriendInfo> QueryAddfriendInfo_default_instance_;

QueryAddfriendInfo* QueryAddfriendInfo::New(::google::protobuf::Arena* arena) const {
  QueryAddfriendInfo* n = new QueryAddfriendInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryAddfriendInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.QueryAddfriendInfo)
  count_ = 0;
}

bool QueryAddfriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.QueryAddfriendInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 count = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.QueryAddfriendInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.QueryAddfriendInfo)
  return false;
#undef DO_
}

void QueryAddfriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.QueryAddfriendInfo)
  // optional int32 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.QueryAddfriendInfo)
}

::google::protobuf::uint8* QueryAddfriendInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.QueryAddfriendInfo)
  // optional int32 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.QueryAddfriendInfo)
  return target;
}

size_t QueryAddfriendInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.QueryAddfriendInfo)
  size_t total_size = 0;

  // optional int32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryAddfriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.QueryAddfriendInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryAddfriendInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryAddfriendInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.QueryAddfriendInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.QueryAddfriendInfo)
    UnsafeMergeFrom(*source);
  }
}

void QueryAddfriendInfo::MergeFrom(const QueryAddfriendInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.QueryAddfriendInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QueryAddfriendInfo::UnsafeMergeFrom(const QueryAddfriendInfo& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void QueryAddfriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.QueryAddfriendInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryAddfriendInfo::CopyFrom(const QueryAddfriendInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.QueryAddfriendInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QueryAddfriendInfo::IsInitialized() const {

  return true;
}

void QueryAddfriendInfo::Swap(QueryAddfriendInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryAddfriendInfo::InternalSwap(QueryAddfriendInfo* other) {
  std::swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryAddfriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryAddfriendInfo_descriptor_;
  metadata.reflection = QueryAddfriendInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryAddfriendInfo

// optional int32 count = 1;
void QueryAddfriendInfo::clear_count() {
  count_ = 0;
}
::google::protobuf::int32 QueryAddfriendInfo::count() const {
  // @@protoc_insertion_point(field_get:chat.QueryAddfriendInfo.count)
  return count_;
}
void QueryAddfriendInfo::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:chat.QueryAddfriendInfo.count)
}

inline const QueryAddfriendInfo* QueryAddfriendInfo::internal_default_instance() {
  return &QueryAddfriendInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryAddfriendInfoRes::kInviterFieldNumber;
const int QueryAddfriendInfoRes::kInviteeFieldNumber;
const int QueryAddfriendInfoRes::kToNodeIDFieldNumber;
const int QueryAddfriendInfoRes::kIsEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryAddfriendInfoRes::QueryAddfriendInfoRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.QueryAddfriendInfoRes)
}

void QueryAddfriendInfoRes::InitAsDefaultInstance() {
}

QueryAddfriendInfoRes::QueryAddfriendInfoRes(const QueryAddfriendInfoRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.QueryAddfriendInfoRes)
}

void QueryAddfriendInfoRes::SharedCtor() {
  inviter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invitee_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tonodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isend_ = false;
  _cached_size_ = 0;
}

QueryAddfriendInfoRes::~QueryAddfriendInfoRes() {
  // @@protoc_insertion_point(destructor:chat.QueryAddfriendInfoRes)
  SharedDtor();
}

void QueryAddfriendInfoRes::SharedDtor() {
  inviter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invitee_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tonodeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QueryAddfriendInfoRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryAddfriendInfoRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryAddfriendInfoRes_descriptor_;
}

const QueryAddfriendInfoRes& QueryAddfriendInfoRes::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QueryAddfriendInfoRes> QueryAddfriendInfoRes_default_instance_;

QueryAddfriendInfoRes* QueryAddfriendInfoRes::New(::google::protobuf::Arena* arena) const {
  QueryAddfriendInfoRes* n = new QueryAddfriendInfoRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryAddfriendInfoRes::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.QueryAddfriendInfoRes)
  inviter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invitee_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isend_ = false;
}

bool QueryAddfriendInfoRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.QueryAddfriendInfoRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string inviter = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inviter()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->inviter().data(), this->inviter().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.QueryAddfriendInfoRes.inviter"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_invitee;
        break;
      }

      // optional string invitee = 2;
      case 2: {
        if (tag == 18) {
         parse_invitee:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invitee()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->invitee().data(), this->invitee().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.QueryAddfriendInfoRes.invitee"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_toNodeID;
        break;
      }

      // optional string toNodeID = 3;
      case 3: {
        if (tag == 26) {
         parse_toNodeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tonodeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tonodeid().data(), this->tonodeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.QueryAddfriendInfoRes.toNodeID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_isEnd;
        break;
      }

      // optional bool isEnd = 4;
      case 4: {
        if (tag == 32) {
         parse_isEnd:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isend_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.QueryAddfriendInfoRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.QueryAddfriendInfoRes)
  return false;
#undef DO_
}

void QueryAddfriendInfoRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.QueryAddfriendInfoRes)
  // optional string inviter = 1;
  if (this->inviter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inviter().data(), this->inviter().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryAddfriendInfoRes.inviter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->inviter(), output);
  }

  // optional string invitee = 2;
  if (this->invitee().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->invitee().data(), this->invitee().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryAddfriendInfoRes.invitee");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->invitee(), output);
  }

  // optional string toNodeID = 3;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryAddfriendInfoRes.toNodeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tonodeid(), output);
  }

  // optional bool isEnd = 4;
  if (this->isend() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isend(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.QueryAddfriendInfoRes)
}

::google::protobuf::uint8* QueryAddfriendInfoRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.QueryAddfriendInfoRes)
  // optional string inviter = 1;
  if (this->inviter().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->inviter().data(), this->inviter().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryAddfriendInfoRes.inviter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->inviter(), target);
  }

  // optional string invitee = 2;
  if (this->invitee().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->invitee().data(), this->invitee().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryAddfriendInfoRes.invitee");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->invitee(), target);
  }

  // optional string toNodeID = 3;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryAddfriendInfoRes.toNodeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tonodeid(), target);
  }

  // optional bool isEnd = 4;
  if (this->isend() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isend(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.QueryAddfriendInfoRes)
  return target;
}

size_t QueryAddfriendInfoRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.QueryAddfriendInfoRes)
  size_t total_size = 0;

  // optional string inviter = 1;
  if (this->inviter().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->inviter());
  }

  // optional string invitee = 2;
  if (this->invitee().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->invitee());
  }

  // optional string toNodeID = 3;
  if (this->tonodeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tonodeid());
  }

  // optional bool isEnd = 4;
  if (this->isend() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryAddfriendInfoRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.QueryAddfriendInfoRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryAddfriendInfoRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryAddfriendInfoRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.QueryAddfriendInfoRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.QueryAddfriendInfoRes)
    UnsafeMergeFrom(*source);
  }
}

void QueryAddfriendInfoRes::MergeFrom(const QueryAddfriendInfoRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.QueryAddfriendInfoRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QueryAddfriendInfoRes::UnsafeMergeFrom(const QueryAddfriendInfoRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.inviter().size() > 0) {

    inviter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inviter_);
  }
  if (from.invitee().size() > 0) {

    invitee_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.invitee_);
  }
  if (from.tonodeid().size() > 0) {

    tonodeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tonodeid_);
  }
  if (from.isend() != 0) {
    set_isend(from.isend());
  }
}

void QueryAddfriendInfoRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.QueryAddfriendInfoRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryAddfriendInfoRes::CopyFrom(const QueryAddfriendInfoRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.QueryAddfriendInfoRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QueryAddfriendInfoRes::IsInitialized() const {

  return true;
}

void QueryAddfriendInfoRes::Swap(QueryAddfriendInfoRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryAddfriendInfoRes::InternalSwap(QueryAddfriendInfoRes* other) {
  inviter_.Swap(&other->inviter_);
  invitee_.Swap(&other->invitee_);
  tonodeid_.Swap(&other->tonodeid_);
  std::swap(isend_, other->isend_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryAddfriendInfoRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryAddfriendInfoRes_descriptor_;
  metadata.reflection = QueryAddfriendInfoRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryAddfriendInfoRes

// optional string inviter = 1;
void QueryAddfriendInfoRes::clear_inviter() {
  inviter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QueryAddfriendInfoRes::inviter() const {
  // @@protoc_insertion_point(field_get:chat.QueryAddfriendInfoRes.inviter)
  return inviter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryAddfriendInfoRes::set_inviter(const ::std::string& value) {
  
  inviter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryAddfriendInfoRes.inviter)
}
void QueryAddfriendInfoRes::set_inviter(const char* value) {
  
  inviter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryAddfriendInfoRes.inviter)
}
void QueryAddfriendInfoRes::set_inviter(const char* value, size_t size) {
  
  inviter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryAddfriendInfoRes.inviter)
}
::std::string* QueryAddfriendInfoRes::mutable_inviter() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryAddfriendInfoRes.inviter)
  return inviter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryAddfriendInfoRes::release_inviter() {
  // @@protoc_insertion_point(field_release:chat.QueryAddfriendInfoRes.inviter)
  
  return inviter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryAddfriendInfoRes::set_allocated_inviter(::std::string* inviter) {
  if (inviter != NULL) {
    
  } else {
    
  }
  inviter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inviter);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryAddfriendInfoRes.inviter)
}

// optional string invitee = 2;
void QueryAddfriendInfoRes::clear_invitee() {
  invitee_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QueryAddfriendInfoRes::invitee() const {
  // @@protoc_insertion_point(field_get:chat.QueryAddfriendInfoRes.invitee)
  return invitee_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryAddfriendInfoRes::set_invitee(const ::std::string& value) {
  
  invitee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryAddfriendInfoRes.invitee)
}
void QueryAddfriendInfoRes::set_invitee(const char* value) {
  
  invitee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryAddfriendInfoRes.invitee)
}
void QueryAddfriendInfoRes::set_invitee(const char* value, size_t size) {
  
  invitee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryAddfriendInfoRes.invitee)
}
::std::string* QueryAddfriendInfoRes::mutable_invitee() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryAddfriendInfoRes.invitee)
  return invitee_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryAddfriendInfoRes::release_invitee() {
  // @@protoc_insertion_point(field_release:chat.QueryAddfriendInfoRes.invitee)
  
  return invitee_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryAddfriendInfoRes::set_allocated_invitee(::std::string* invitee) {
  if (invitee != NULL) {
    
  } else {
    
  }
  invitee_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), invitee);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryAddfriendInfoRes.invitee)
}

// optional string toNodeID = 3;
void QueryAddfriendInfoRes::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QueryAddfriendInfoRes::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.QueryAddfriendInfoRes.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryAddfriendInfoRes::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryAddfriendInfoRes.toNodeID)
}
void QueryAddfriendInfoRes::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryAddfriendInfoRes.toNodeID)
}
void QueryAddfriendInfoRes::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryAddfriendInfoRes.toNodeID)
}
::std::string* QueryAddfriendInfoRes::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryAddfriendInfoRes.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryAddfriendInfoRes::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.QueryAddfriendInfoRes.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryAddfriendInfoRes::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryAddfriendInfoRes.toNodeID)
}

// optional bool isEnd = 4;
void QueryAddfriendInfoRes::clear_isend() {
  isend_ = false;
}
bool QueryAddfriendInfoRes::isend() const {
  // @@protoc_insertion_point(field_get:chat.QueryAddfriendInfoRes.isEnd)
  return isend_;
}
void QueryAddfriendInfoRes::set_isend(bool value) {
  
  isend_ = value;
  // @@protoc_insertion_point(field_set:chat.QueryAddfriendInfoRes.isEnd)
}

inline const QueryAddfriendInfoRes* QueryAddfriendInfoRes::internal_default_instance() {
  return &QueryAddfriendInfoRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateGroup::kUserIDFieldNumber;
const int CreateGroup::kNicknameFieldNumber;
const int CreateGroup::kMembersIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateGroup::CreateGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.CreateGroup)
}

void CreateGroup::InitAsDefaultInstance() {
}

CreateGroup::CreateGroup(const CreateGroup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.CreateGroup)
}

void CreateGroup::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CreateGroup::~CreateGroup() {
  // @@protoc_insertion_point(destructor:chat.CreateGroup)
  SharedDtor();
}

void CreateGroup::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateGroup_descriptor_;
}

const CreateGroup& CreateGroup::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CreateGroup> CreateGroup_default_instance_;

CreateGroup* CreateGroup::New(::google::protobuf::Arena* arena) const {
  CreateGroup* n = new CreateGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.CreateGroup)
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  membersid_.Clear();
}

bool CreateGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.CreateGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.CreateGroup.userID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.CreateGroup.nickname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_membersID;
        break;
      }

      // repeated string membersID = 3;
      case 3: {
        if (tag == 26) {
         parse_membersID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_membersid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->membersid(this->membersid_size() - 1).data(),
            this->membersid(this->membersid_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.CreateGroup.membersID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_membersID;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.CreateGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.CreateGroup)
  return false;
#undef DO_
}

void CreateGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.CreateGroup)
  // optional string userID = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.CreateGroup.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // optional string nickname = 2;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.CreateGroup.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // repeated string membersID = 3;
  for (int i = 0; i < this->membersid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->membersid(i).data(), this->membersid(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.CreateGroup.membersID");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->membersid(i), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.CreateGroup)
}

::google::protobuf::uint8* CreateGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.CreateGroup)
  // optional string userID = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.CreateGroup.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // optional string nickname = 2;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.CreateGroup.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // repeated string membersID = 3;
  for (int i = 0; i < this->membersid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->membersid(i).data(), this->membersid(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.CreateGroup.membersID");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->membersid(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.CreateGroup)
  return target;
}

size_t CreateGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.CreateGroup)
  size_t total_size = 0;

  // optional string userID = 1;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // optional string nickname = 2;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  // repeated string membersID = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->membersid_size());
  for (int i = 0; i < this->membersid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->membersid(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.CreateGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CreateGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.CreateGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.CreateGroup)
    UnsafeMergeFrom(*source);
  }
}

void CreateGroup::MergeFrom(const CreateGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.CreateGroup)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CreateGroup::UnsafeMergeFrom(const CreateGroup& from) {
  GOOGLE_DCHECK(&from != this);
  membersid_.UnsafeMergeFrom(from.membersid_);
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
}

void CreateGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.CreateGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGroup::CopyFrom(const CreateGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.CreateGroup)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CreateGroup::IsInitialized() const {

  return true;
}

void CreateGroup::Swap(CreateGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateGroup::InternalSwap(CreateGroup* other) {
  userid_.Swap(&other->userid_);
  nickname_.Swap(&other->nickname_);
  membersid_.UnsafeArenaSwap(&other->membersid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateGroup_descriptor_;
  metadata.reflection = CreateGroup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateGroup

// optional string userID = 1;
void CreateGroup::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateGroup::userid() const {
  // @@protoc_insertion_point(field_get:chat.CreateGroup.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateGroup::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.CreateGroup.userID)
}
void CreateGroup::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.CreateGroup.userID)
}
void CreateGroup::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.CreateGroup.userID)
}
::std::string* CreateGroup::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:chat.CreateGroup.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateGroup::release_userid() {
  // @@protoc_insertion_point(field_release:chat.CreateGroup.userID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateGroup::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:chat.CreateGroup.userID)
}

// optional string nickname = 2;
void CreateGroup::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateGroup::nickname() const {
  // @@protoc_insertion_point(field_get:chat.CreateGroup.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateGroup::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.CreateGroup.nickname)
}
void CreateGroup::set_nickname(const char* value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.CreateGroup.nickname)
}
void CreateGroup::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.CreateGroup.nickname)
}
::std::string* CreateGroup::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:chat.CreateGroup.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateGroup::release_nickname() {
  // @@protoc_insertion_point(field_release:chat.CreateGroup.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateGroup::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:chat.CreateGroup.nickname)
}

// repeated string membersID = 3;
int CreateGroup::membersid_size() const {
  return membersid_.size();
}
void CreateGroup::clear_membersid() {
  membersid_.Clear();
}
const ::std::string& CreateGroup::membersid(int index) const {
  // @@protoc_insertion_point(field_get:chat.CreateGroup.membersID)
  return membersid_.Get(index);
}
::std::string* CreateGroup::mutable_membersid(int index) {
  // @@protoc_insertion_point(field_mutable:chat.CreateGroup.membersID)
  return membersid_.Mutable(index);
}
void CreateGroup::set_membersid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chat.CreateGroup.membersID)
  membersid_.Mutable(index)->assign(value);
}
void CreateGroup::set_membersid(int index, const char* value) {
  membersid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.CreateGroup.membersID)
}
void CreateGroup::set_membersid(int index, const char* value, size_t size) {
  membersid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.CreateGroup.membersID)
}
::std::string* CreateGroup::add_membersid() {
  // @@protoc_insertion_point(field_add_mutable:chat.CreateGroup.membersID)
  return membersid_.Add();
}
void CreateGroup::add_membersid(const ::std::string& value) {
  membersid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chat.CreateGroup.membersID)
}
void CreateGroup::add_membersid(const char* value) {
  membersid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chat.CreateGroup.membersID)
}
void CreateGroup::add_membersid(const char* value, size_t size) {
  membersid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chat.CreateGroup.membersID)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CreateGroup::membersid() const {
  // @@protoc_insertion_point(field_list:chat.CreateGroup.membersID)
  return membersid_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CreateGroup::mutable_membersid() {
  // @@protoc_insertion_point(field_mutable_list:chat.CreateGroup.membersID)
  return &membersid_;
}

inline const CreateGroup* CreateGroup::internal_default_instance() {
  return &CreateGroup_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateGroupRes::kToUserIDOuterFieldNumber;
const int CreateGroupRes::kNicknameFieldNumber;
const int CreateGroupRes::kToNodeIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateGroupRes::CreateGroupRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.CreateGroupRes)
}

void CreateGroupRes::InitAsDefaultInstance() {
}

CreateGroupRes::CreateGroupRes(const CreateGroupRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.CreateGroupRes)
}

void CreateGroupRes::SharedCtor() {
  touserid_outer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tonodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CreateGroupRes::~CreateGroupRes() {
  // @@protoc_insertion_point(destructor:chat.CreateGroupRes)
  SharedDtor();
}

void CreateGroupRes::SharedDtor() {
  touserid_outer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tonodeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateGroupRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateGroupRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateGroupRes_descriptor_;
}

const CreateGroupRes& CreateGroupRes::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CreateGroupRes> CreateGroupRes_default_instance_;

CreateGroupRes* CreateGroupRes::New(::google::protobuf::Arena* arena) const {
  CreateGroupRes* n = new CreateGroupRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateGroupRes::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.CreateGroupRes)
  touserid_outer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CreateGroupRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.CreateGroupRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string toUserID_outer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_touserid_outer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->touserid_outer().data(), this->touserid_outer().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.CreateGroupRes.toUserID_outer"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.CreateGroupRes.nickname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_toNodeID;
        break;
      }

      // optional string toNodeID = 3;
      case 3: {
        if (tag == 26) {
         parse_toNodeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tonodeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tonodeid().data(), this->tonodeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.CreateGroupRes.toNodeID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.CreateGroupRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.CreateGroupRes)
  return false;
#undef DO_
}

void CreateGroupRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.CreateGroupRes)
  // optional string toUserID_outer = 1;
  if (this->touserid_outer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->touserid_outer().data(), this->touserid_outer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.CreateGroupRes.toUserID_outer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->touserid_outer(), output);
  }

  // optional string nickname = 2;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.CreateGroupRes.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional string toNodeID = 3;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.CreateGroupRes.toNodeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tonodeid(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.CreateGroupRes)
}

::google::protobuf::uint8* CreateGroupRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.CreateGroupRes)
  // optional string toUserID_outer = 1;
  if (this->touserid_outer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->touserid_outer().data(), this->touserid_outer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.CreateGroupRes.toUserID_outer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->touserid_outer(), target);
  }

  // optional string nickname = 2;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.CreateGroupRes.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional string toNodeID = 3;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.CreateGroupRes.toNodeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tonodeid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.CreateGroupRes)
  return target;
}

size_t CreateGroupRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.CreateGroupRes)
  size_t total_size = 0;

  // optional string toUserID_outer = 1;
  if (this->touserid_outer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->touserid_outer());
  }

  // optional string nickname = 2;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  // optional string toNodeID = 3;
  if (this->tonodeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tonodeid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateGroupRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.CreateGroupRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CreateGroupRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateGroupRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.CreateGroupRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.CreateGroupRes)
    UnsafeMergeFrom(*source);
  }
}

void CreateGroupRes::MergeFrom(const CreateGroupRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.CreateGroupRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CreateGroupRes::UnsafeMergeFrom(const CreateGroupRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.touserid_outer().size() > 0) {

    touserid_outer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.touserid_outer_);
  }
  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.tonodeid().size() > 0) {

    tonodeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tonodeid_);
  }
}

void CreateGroupRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.CreateGroupRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGroupRes::CopyFrom(const CreateGroupRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.CreateGroupRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CreateGroupRes::IsInitialized() const {

  return true;
}

void CreateGroupRes::Swap(CreateGroupRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateGroupRes::InternalSwap(CreateGroupRes* other) {
  touserid_outer_.Swap(&other->touserid_outer_);
  nickname_.Swap(&other->nickname_);
  tonodeid_.Swap(&other->tonodeid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateGroupRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateGroupRes_descriptor_;
  metadata.reflection = CreateGroupRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateGroupRes

// optional string toUserID_outer = 1;
void CreateGroupRes::clear_touserid_outer() {
  touserid_outer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateGroupRes::touserid_outer() const {
  // @@protoc_insertion_point(field_get:chat.CreateGroupRes.toUserID_outer)
  return touserid_outer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateGroupRes::set_touserid_outer(const ::std::string& value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.CreateGroupRes.toUserID_outer)
}
void CreateGroupRes::set_touserid_outer(const char* value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.CreateGroupRes.toUserID_outer)
}
void CreateGroupRes::set_touserid_outer(const char* value, size_t size) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.CreateGroupRes.toUserID_outer)
}
::std::string* CreateGroupRes::mutable_touserid_outer() {
  
  // @@protoc_insertion_point(field_mutable:chat.CreateGroupRes.toUserID_outer)
  return touserid_outer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateGroupRes::release_touserid_outer() {
  // @@protoc_insertion_point(field_release:chat.CreateGroupRes.toUserID_outer)
  
  return touserid_outer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateGroupRes::set_allocated_touserid_outer(::std::string* touserid_outer) {
  if (touserid_outer != NULL) {
    
  } else {
    
  }
  touserid_outer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), touserid_outer);
  // @@protoc_insertion_point(field_set_allocated:chat.CreateGroupRes.toUserID_outer)
}

// optional string nickname = 2;
void CreateGroupRes::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateGroupRes::nickname() const {
  // @@protoc_insertion_point(field_get:chat.CreateGroupRes.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateGroupRes::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.CreateGroupRes.nickname)
}
void CreateGroupRes::set_nickname(const char* value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.CreateGroupRes.nickname)
}
void CreateGroupRes::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.CreateGroupRes.nickname)
}
::std::string* CreateGroupRes::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:chat.CreateGroupRes.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateGroupRes::release_nickname() {
  // @@protoc_insertion_point(field_release:chat.CreateGroupRes.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateGroupRes::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:chat.CreateGroupRes.nickname)
}

// optional string toNodeID = 3;
void CreateGroupRes::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateGroupRes::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.CreateGroupRes.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateGroupRes::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.CreateGroupRes.toNodeID)
}
void CreateGroupRes::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.CreateGroupRes.toNodeID)
}
void CreateGroupRes::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.CreateGroupRes.toNodeID)
}
::std::string* CreateGroupRes::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.CreateGroupRes.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateGroupRes::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.CreateGroupRes.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateGroupRes::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.CreateGroupRes.toNodeID)
}

inline const CreateGroupRes* CreateGroupRes::internal_default_instance() {
  return &CreateGroupRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupAddMember::kToNodeIDFieldNumber;
const int GroupAddMember::kMembersIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupAddMember::GroupAddMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.GroupAddMember)
}

void GroupAddMember::InitAsDefaultInstance() {
}

GroupAddMember::GroupAddMember(const GroupAddMember& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.GroupAddMember)
}

void GroupAddMember::SharedCtor() {
  tonodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GroupAddMember::~GroupAddMember() {
  // @@protoc_insertion_point(destructor:chat.GroupAddMember)
  SharedDtor();
}

void GroupAddMember::SharedDtor() {
  tonodeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GroupAddMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupAddMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupAddMember_descriptor_;
}

const GroupAddMember& GroupAddMember::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GroupAddMember> GroupAddMember_default_instance_;

GroupAddMember* GroupAddMember::New(::google::protobuf::Arena* arena) const {
  GroupAddMember* n = new GroupAddMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupAddMember::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.GroupAddMember)
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  membersid_.Clear();
}

bool GroupAddMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.GroupAddMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string toNodeID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tonodeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tonodeid().data(), this->tonodeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.GroupAddMember.toNodeID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_membersID;
        break;
      }

      // repeated string membersID = 2;
      case 2: {
        if (tag == 18) {
         parse_membersID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_membersid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->membersid(this->membersid_size() - 1).data(),
            this->membersid(this->membersid_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.GroupAddMember.membersID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_membersID;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.GroupAddMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.GroupAddMember)
  return false;
#undef DO_
}

void GroupAddMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.GroupAddMember)
  // optional string toNodeID = 1;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.GroupAddMember.toNodeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tonodeid(), output);
  }

  // repeated string membersID = 2;
  for (int i = 0; i < this->membersid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->membersid(i).data(), this->membersid(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.GroupAddMember.membersID");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->membersid(i), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.GroupAddMember)
}

::google::protobuf::uint8* GroupAddMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.GroupAddMember)
  // optional string toNodeID = 1;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.GroupAddMember.toNodeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tonodeid(), target);
  }

  // repeated string membersID = 2;
  for (int i = 0; i < this->membersid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->membersid(i).data(), this->membersid(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.GroupAddMember.membersID");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->membersid(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.GroupAddMember)
  return target;
}

size_t GroupAddMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.GroupAddMember)
  size_t total_size = 0;

  // optional string toNodeID = 1;
  if (this->tonodeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tonodeid());
  }

  // repeated string membersID = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->membersid_size());
  for (int i = 0; i < this->membersid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->membersid(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupAddMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.GroupAddMember)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GroupAddMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GroupAddMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.GroupAddMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.GroupAddMember)
    UnsafeMergeFrom(*source);
  }
}

void GroupAddMember::MergeFrom(const GroupAddMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.GroupAddMember)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GroupAddMember::UnsafeMergeFrom(const GroupAddMember& from) {
  GOOGLE_DCHECK(&from != this);
  membersid_.UnsafeMergeFrom(from.membersid_);
  if (from.tonodeid().size() > 0) {

    tonodeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tonodeid_);
  }
}

void GroupAddMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.GroupAddMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupAddMember::CopyFrom(const GroupAddMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.GroupAddMember)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GroupAddMember::IsInitialized() const {

  return true;
}

void GroupAddMember::Swap(GroupAddMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupAddMember::InternalSwap(GroupAddMember* other) {
  tonodeid_.Swap(&other->tonodeid_);
  membersid_.UnsafeArenaSwap(&other->membersid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GroupAddMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupAddMember_descriptor_;
  metadata.reflection = GroupAddMember_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupAddMember

// optional string toNodeID = 1;
void GroupAddMember::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GroupAddMember::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.GroupAddMember.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GroupAddMember::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.GroupAddMember.toNodeID)
}
void GroupAddMember::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.GroupAddMember.toNodeID)
}
void GroupAddMember::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.GroupAddMember.toNodeID)
}
::std::string* GroupAddMember::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.GroupAddMember.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GroupAddMember::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.GroupAddMember.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GroupAddMember::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.GroupAddMember.toNodeID)
}

// repeated string membersID = 2;
int GroupAddMember::membersid_size() const {
  return membersid_.size();
}
void GroupAddMember::clear_membersid() {
  membersid_.Clear();
}
const ::std::string& GroupAddMember::membersid(int index) const {
  // @@protoc_insertion_point(field_get:chat.GroupAddMember.membersID)
  return membersid_.Get(index);
}
::std::string* GroupAddMember::mutable_membersid(int index) {
  // @@protoc_insertion_point(field_mutable:chat.GroupAddMember.membersID)
  return membersid_.Mutable(index);
}
void GroupAddMember::set_membersid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:chat.GroupAddMember.membersID)
  membersid_.Mutable(index)->assign(value);
}
void GroupAddMember::set_membersid(int index, const char* value) {
  membersid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chat.GroupAddMember.membersID)
}
void GroupAddMember::set_membersid(int index, const char* value, size_t size) {
  membersid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chat.GroupAddMember.membersID)
}
::std::string* GroupAddMember::add_membersid() {
  // @@protoc_insertion_point(field_add_mutable:chat.GroupAddMember.membersID)
  return membersid_.Add();
}
void GroupAddMember::add_membersid(const ::std::string& value) {
  membersid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chat.GroupAddMember.membersID)
}
void GroupAddMember::add_membersid(const char* value) {
  membersid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chat.GroupAddMember.membersID)
}
void GroupAddMember::add_membersid(const char* value, size_t size) {
  membersid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chat.GroupAddMember.membersID)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
GroupAddMember::membersid() const {
  // @@protoc_insertion_point(field_list:chat.GroupAddMember.membersID)
  return membersid_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
GroupAddMember::mutable_membersid() {
  // @@protoc_insertion_point(field_mutable_list:chat.GroupAddMember.membersID)
  return &membersid_;
}

inline const GroupAddMember* GroupAddMember::internal_default_instance() {
  return &GroupAddMember_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupAddMemberRes::kToUserIDOuterFieldNumber;
const int GroupAddMemberRes::kToNodeIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupAddMemberRes::GroupAddMemberRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.GroupAddMemberRes)
}

void GroupAddMemberRes::InitAsDefaultInstance() {
}

GroupAddMemberRes::GroupAddMemberRes(const GroupAddMemberRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.GroupAddMemberRes)
}

void GroupAddMemberRes::SharedCtor() {
  touserid_outer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tonodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GroupAddMemberRes::~GroupAddMemberRes() {
  // @@protoc_insertion_point(destructor:chat.GroupAddMemberRes)
  SharedDtor();
}

void GroupAddMemberRes::SharedDtor() {
  touserid_outer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tonodeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GroupAddMemberRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupAddMemberRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupAddMemberRes_descriptor_;
}

const GroupAddMemberRes& GroupAddMemberRes::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<GroupAddMemberRes> GroupAddMemberRes_default_instance_;

GroupAddMemberRes* GroupAddMemberRes::New(::google::protobuf::Arena* arena) const {
  GroupAddMemberRes* n = new GroupAddMemberRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupAddMemberRes::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.GroupAddMemberRes)
  touserid_outer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GroupAddMemberRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.GroupAddMemberRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string toUserID_outer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_touserid_outer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->touserid_outer().data(), this->touserid_outer().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.GroupAddMemberRes.toUserID_outer"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_toNodeID;
        break;
      }

      // optional string toNodeID = 2;
      case 2: {
        if (tag == 18) {
         parse_toNodeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tonodeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tonodeid().data(), this->tonodeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.GroupAddMemberRes.toNodeID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.GroupAddMemberRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.GroupAddMemberRes)
  return false;
#undef DO_
}

void GroupAddMemberRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.GroupAddMemberRes)
  // optional string toUserID_outer = 1;
  if (this->touserid_outer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->touserid_outer().data(), this->touserid_outer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.GroupAddMemberRes.toUserID_outer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->touserid_outer(), output);
  }

  // optional string toNodeID = 2;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.GroupAddMemberRes.toNodeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tonodeid(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.GroupAddMemberRes)
}

::google::protobuf::uint8* GroupAddMemberRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.GroupAddMemberRes)
  // optional string toUserID_outer = 1;
  if (this->touserid_outer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->touserid_outer().data(), this->touserid_outer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.GroupAddMemberRes.toUserID_outer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->touserid_outer(), target);
  }

  // optional string toNodeID = 2;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.GroupAddMemberRes.toNodeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tonodeid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.GroupAddMemberRes)
  return target;
}

size_t GroupAddMemberRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.GroupAddMemberRes)
  size_t total_size = 0;

  // optional string toUserID_outer = 1;
  if (this->touserid_outer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->touserid_outer());
  }

  // optional string toNodeID = 2;
  if (this->tonodeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tonodeid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupAddMemberRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.GroupAddMemberRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GroupAddMemberRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GroupAddMemberRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.GroupAddMemberRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.GroupAddMemberRes)
    UnsafeMergeFrom(*source);
  }
}

void GroupAddMemberRes::MergeFrom(const GroupAddMemberRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.GroupAddMemberRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void GroupAddMemberRes::UnsafeMergeFrom(const GroupAddMemberRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.touserid_outer().size() > 0) {

    touserid_outer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.touserid_outer_);
  }
  if (from.tonodeid().size() > 0) {

    tonodeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tonodeid_);
  }
}

void GroupAddMemberRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.GroupAddMemberRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupAddMemberRes::CopyFrom(const GroupAddMemberRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.GroupAddMemberRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool GroupAddMemberRes::IsInitialized() const {

  return true;
}

void GroupAddMemberRes::Swap(GroupAddMemberRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupAddMemberRes::InternalSwap(GroupAddMemberRes* other) {
  touserid_outer_.Swap(&other->touserid_outer_);
  tonodeid_.Swap(&other->tonodeid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GroupAddMemberRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupAddMemberRes_descriptor_;
  metadata.reflection = GroupAddMemberRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupAddMemberRes

// optional string toUserID_outer = 1;
void GroupAddMemberRes::clear_touserid_outer() {
  touserid_outer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GroupAddMemberRes::touserid_outer() const {
  // @@protoc_insertion_point(field_get:chat.GroupAddMemberRes.toUserID_outer)
  return touserid_outer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GroupAddMemberRes::set_touserid_outer(const ::std::string& value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.GroupAddMemberRes.toUserID_outer)
}
void GroupAddMemberRes::set_touserid_outer(const char* value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.GroupAddMemberRes.toUserID_outer)
}
void GroupAddMemberRes::set_touserid_outer(const char* value, size_t size) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.GroupAddMemberRes.toUserID_outer)
}
::std::string* GroupAddMemberRes::mutable_touserid_outer() {
  
  // @@protoc_insertion_point(field_mutable:chat.GroupAddMemberRes.toUserID_outer)
  return touserid_outer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GroupAddMemberRes::release_touserid_outer() {
  // @@protoc_insertion_point(field_release:chat.GroupAddMemberRes.toUserID_outer)
  
  return touserid_outer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GroupAddMemberRes::set_allocated_touserid_outer(::std::string* touserid_outer) {
  if (touserid_outer != NULL) {
    
  } else {
    
  }
  touserid_outer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), touserid_outer);
  // @@protoc_insertion_point(field_set_allocated:chat.GroupAddMemberRes.toUserID_outer)
}

// optional string toNodeID = 2;
void GroupAddMemberRes::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GroupAddMemberRes::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.GroupAddMemberRes.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GroupAddMemberRes::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.GroupAddMemberRes.toNodeID)
}
void GroupAddMemberRes::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.GroupAddMemberRes.toNodeID)
}
void GroupAddMemberRes::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.GroupAddMemberRes.toNodeID)
}
::std::string* GroupAddMemberRes::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.GroupAddMemberRes.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GroupAddMemberRes::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.GroupAddMemberRes.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GroupAddMemberRes::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.GroupAddMemberRes.toNodeID)
}

inline const GroupAddMemberRes* GroupAddMemberRes::internal_default_instance() {
  return &GroupAddMemberRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeMessage::kIdFieldNumber;
const int NodeMessage::kFromUserIDFieldNumber;
const int NodeMessage::kToNodeIDFieldNumber;
const int NodeMessage::kIncrementIDFieldNumber;
const int NodeMessage::kTypeFieldNumber;
const int NodeMessage::kContentFieldNumber;
const int NodeMessage::kToUserIDOuterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeMessage::NodeMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.NodeMessage)
}

void NodeMessage::InitAsDefaultInstance() {
}

NodeMessage::NodeMessage(const NodeMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.NodeMessage)
}

void NodeMessage::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromuserid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tonodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  touserid_outer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&incrementid_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&incrementid_) + sizeof(type_));
  _cached_size_ = 0;
}

NodeMessage::~NodeMessage() {
  // @@protoc_insertion_point(destructor:chat.NodeMessage)
  SharedDtor();
}

void NodeMessage::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromuserid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tonodeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  touserid_outer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NodeMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeMessage_descriptor_;
}

const NodeMessage& NodeMessage::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NodeMessage> NodeMessage_default_instance_;

NodeMessage* NodeMessage::New(::google::protobuf::Arena* arena) const {
  NodeMessage* n = new NodeMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.NodeMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(NodeMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<NodeMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(incrementid_, type_);
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromuserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  touserid_outer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool NodeMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.NodeMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.NodeMessage.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fromUserID;
        break;
      }

      // optional string fromUserID = 2;
      case 2: {
        if (tag == 18) {
         parse_fromUserID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromuserid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fromuserid().data(), this->fromuserid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.NodeMessage.fromUserID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_toNodeID;
        break;
      }

      // optional string toNodeID = 3;
      case 3: {
        if (tag == 26) {
         parse_toNodeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tonodeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tonodeid().data(), this->tonodeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.NodeMessage.toNodeID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_incrementID;
        break;
      }

      // optional int32 incrementID = 4;
      case 4: {
        if (tag == 32) {
         parse_incrementID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &incrementid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .chat.MediaType type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::chat::MediaType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (tag == 50) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.NodeMessage.content"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_toUserID_outer;
        break;
      }

      // optional string toUserID_outer = 7;
      case 7: {
        if (tag == 58) {
         parse_toUserID_outer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_touserid_outer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->touserid_outer().data(), this->touserid_outer().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.NodeMessage.toUserID_outer"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.NodeMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.NodeMessage)
  return false;
#undef DO_
}

void NodeMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.NodeMessage)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.NodeMessage.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string fromUserID = 2;
  if (this->fromuserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fromuserid().data(), this->fromuserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.NodeMessage.fromUserID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fromuserid(), output);
  }

  // optional string toNodeID = 3;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.NodeMessage.toNodeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tonodeid(), output);
  }

  // optional int32 incrementID = 4;
  if (this->incrementid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->incrementid(), output);
  }

  // optional .chat.MediaType type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional string content = 6;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.NodeMessage.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->content(), output);
  }

  // optional string toUserID_outer = 7;
  if (this->touserid_outer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->touserid_outer().data(), this->touserid_outer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.NodeMessage.toUserID_outer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->touserid_outer(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.NodeMessage)
}

::google::protobuf::uint8* NodeMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.NodeMessage)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.NodeMessage.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string fromUserID = 2;
  if (this->fromuserid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fromuserid().data(), this->fromuserid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.NodeMessage.fromUserID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fromuserid(), target);
  }

  // optional string toNodeID = 3;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.NodeMessage.toNodeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tonodeid(), target);
  }

  // optional int32 incrementID = 4;
  if (this->incrementid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->incrementid(), target);
  }

  // optional .chat.MediaType type = 5;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // optional string content = 6;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.NodeMessage.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // optional string toUserID_outer = 7;
  if (this->touserid_outer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->touserid_outer().data(), this->touserid_outer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.NodeMessage.toUserID_outer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->touserid_outer(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.NodeMessage)
  return target;
}

size_t NodeMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.NodeMessage)
  size_t total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string fromUserID = 2;
  if (this->fromuserid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fromuserid());
  }

  // optional string toNodeID = 3;
  if (this->tonodeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tonodeid());
  }

  // optional int32 incrementID = 4;
  if (this->incrementid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->incrementid());
  }

  // optional .chat.MediaType type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string content = 6;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  // optional string toUserID_outer = 7;
  if (this->touserid_outer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->touserid_outer());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.NodeMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NodeMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.NodeMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.NodeMessage)
    UnsafeMergeFrom(*source);
  }
}

void NodeMessage::MergeFrom(const NodeMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.NodeMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NodeMessage::UnsafeMergeFrom(const NodeMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.fromuserid().size() > 0) {

    fromuserid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromuserid_);
  }
  if (from.tonodeid().size() > 0) {

    tonodeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tonodeid_);
  }
  if (from.incrementid() != 0) {
    set_incrementid(from.incrementid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.touserid_outer().size() > 0) {

    touserid_outer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.touserid_outer_);
  }
}

void NodeMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.NodeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeMessage::CopyFrom(const NodeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.NodeMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NodeMessage::IsInitialized() const {

  return true;
}

void NodeMessage::Swap(NodeMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeMessage::InternalSwap(NodeMessage* other) {
  id_.Swap(&other->id_);
  fromuserid_.Swap(&other->fromuserid_);
  tonodeid_.Swap(&other->tonodeid_);
  std::swap(incrementid_, other->incrementid_);
  std::swap(type_, other->type_);
  content_.Swap(&other->content_);
  touserid_outer_.Swap(&other->touserid_outer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeMessage_descriptor_;
  metadata.reflection = NodeMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeMessage

// optional string id = 1;
void NodeMessage::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NodeMessage::id() const {
  // @@protoc_insertion_point(field_get:chat.NodeMessage.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeMessage::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.NodeMessage.id)
}
void NodeMessage::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.NodeMessage.id)
}
void NodeMessage::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.NodeMessage.id)
}
::std::string* NodeMessage::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:chat.NodeMessage.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NodeMessage::release_id() {
  // @@protoc_insertion_point(field_release:chat.NodeMessage.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeMessage::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:chat.NodeMessage.id)
}

// optional string fromUserID = 2;
void NodeMessage::clear_fromuserid() {
  fromuserid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NodeMessage::fromuserid() const {
  // @@protoc_insertion_point(field_get:chat.NodeMessage.fromUserID)
  return fromuserid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeMessage::set_fromuserid(const ::std::string& value) {
  
  fromuserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.NodeMessage.fromUserID)
}
void NodeMessage::set_fromuserid(const char* value) {
  
  fromuserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.NodeMessage.fromUserID)
}
void NodeMessage::set_fromuserid(const char* value, size_t size) {
  
  fromuserid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.NodeMessage.fromUserID)
}
::std::string* NodeMessage::mutable_fromuserid() {
  
  // @@protoc_insertion_point(field_mutable:chat.NodeMessage.fromUserID)
  return fromuserid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NodeMessage::release_fromuserid() {
  // @@protoc_insertion_point(field_release:chat.NodeMessage.fromUserID)
  
  return fromuserid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeMessage::set_allocated_fromuserid(::std::string* fromuserid) {
  if (fromuserid != NULL) {
    
  } else {
    
  }
  fromuserid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromuserid);
  // @@protoc_insertion_point(field_set_allocated:chat.NodeMessage.fromUserID)
}

// optional string toNodeID = 3;
void NodeMessage::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NodeMessage::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.NodeMessage.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeMessage::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.NodeMessage.toNodeID)
}
void NodeMessage::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.NodeMessage.toNodeID)
}
void NodeMessage::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.NodeMessage.toNodeID)
}
::std::string* NodeMessage::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.NodeMessage.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NodeMessage::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.NodeMessage.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeMessage::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.NodeMessage.toNodeID)
}

// optional int32 incrementID = 4;
void NodeMessage::clear_incrementid() {
  incrementid_ = 0;
}
::google::protobuf::int32 NodeMessage::incrementid() const {
  // @@protoc_insertion_point(field_get:chat.NodeMessage.incrementID)
  return incrementid_;
}
void NodeMessage::set_incrementid(::google::protobuf::int32 value) {
  
  incrementid_ = value;
  // @@protoc_insertion_point(field_set:chat.NodeMessage.incrementID)
}

// optional .chat.MediaType type = 5;
void NodeMessage::clear_type() {
  type_ = 0;
}
::chat::MediaType NodeMessage::type() const {
  // @@protoc_insertion_point(field_get:chat.NodeMessage.type)
  return static_cast< ::chat::MediaType >(type_);
}
void NodeMessage::set_type(::chat::MediaType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:chat.NodeMessage.type)
}

// optional string content = 6;
void NodeMessage::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NodeMessage::content() const {
  // @@protoc_insertion_point(field_get:chat.NodeMessage.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeMessage::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.NodeMessage.content)
}
void NodeMessage::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.NodeMessage.content)
}
void NodeMessage::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.NodeMessage.content)
}
::std::string* NodeMessage::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:chat.NodeMessage.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NodeMessage::release_content() {
  // @@protoc_insertion_point(field_release:chat.NodeMessage.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeMessage::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:chat.NodeMessage.content)
}

// optional string toUserID_outer = 7;
void NodeMessage::clear_touserid_outer() {
  touserid_outer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NodeMessage::touserid_outer() const {
  // @@protoc_insertion_point(field_get:chat.NodeMessage.toUserID_outer)
  return touserid_outer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeMessage::set_touserid_outer(const ::std::string& value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.NodeMessage.toUserID_outer)
}
void NodeMessage::set_touserid_outer(const char* value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.NodeMessage.toUserID_outer)
}
void NodeMessage::set_touserid_outer(const char* value, size_t size) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.NodeMessage.toUserID_outer)
}
::std::string* NodeMessage::mutable_touserid_outer() {
  
  // @@protoc_insertion_point(field_mutable:chat.NodeMessage.toUserID_outer)
  return touserid_outer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NodeMessage::release_touserid_outer() {
  // @@protoc_insertion_point(field_release:chat.NodeMessage.toUserID_outer)
  
  return touserid_outer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeMessage::set_allocated_touserid_outer(::std::string* touserid_outer) {
  if (touserid_outer != NULL) {
    
  } else {
    
  }
  touserid_outer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), touserid_outer);
  // @@protoc_insertion_point(field_set_allocated:chat.NodeMessage.toUserID_outer)
}

inline const NodeMessage* NodeMessage::internal_default_instance() {
  return &NodeMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeMessageRes::kToNodeIDFieldNumber;
const int NodeMessageRes::kIncrementIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeMessageRes::NodeMessageRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.NodeMessageRes)
}

void NodeMessageRes::InitAsDefaultInstance() {
}

NodeMessageRes::NodeMessageRes(const NodeMessageRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.NodeMessageRes)
}

void NodeMessageRes::SharedCtor() {
  tonodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  incrementid_ = 0;
  _cached_size_ = 0;
}

NodeMessageRes::~NodeMessageRes() {
  // @@protoc_insertion_point(destructor:chat.NodeMessageRes)
  SharedDtor();
}

void NodeMessageRes::SharedDtor() {
  tonodeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NodeMessageRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeMessageRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeMessageRes_descriptor_;
}

const NodeMessageRes& NodeMessageRes::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NodeMessageRes> NodeMessageRes_default_instance_;

NodeMessageRes* NodeMessageRes::New(::google::protobuf::Arena* arena) const {
  NodeMessageRes* n = new NodeMessageRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeMessageRes::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.NodeMessageRes)
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  incrementid_ = 0;
}

bool NodeMessageRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.NodeMessageRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string toNodeID = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tonodeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tonodeid().data(), this->tonodeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.NodeMessageRes.toNodeID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_incrementID;
        break;
      }

      // optional int32 incrementID = 3;
      case 3: {
        if (tag == 24) {
         parse_incrementID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &incrementid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.NodeMessageRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.NodeMessageRes)
  return false;
#undef DO_
}

void NodeMessageRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.NodeMessageRes)
  // optional string toNodeID = 2;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.NodeMessageRes.toNodeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tonodeid(), output);
  }

  // optional int32 incrementID = 3;
  if (this->incrementid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->incrementid(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.NodeMessageRes)
}

::google::protobuf::uint8* NodeMessageRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.NodeMessageRes)
  // optional string toNodeID = 2;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.NodeMessageRes.toNodeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tonodeid(), target);
  }

  // optional int32 incrementID = 3;
  if (this->incrementid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->incrementid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.NodeMessageRes)
  return target;
}

size_t NodeMessageRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.NodeMessageRes)
  size_t total_size = 0;

  // optional string toNodeID = 2;
  if (this->tonodeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tonodeid());
  }

  // optional int32 incrementID = 3;
  if (this->incrementid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->incrementid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeMessageRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.NodeMessageRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NodeMessageRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeMessageRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.NodeMessageRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.NodeMessageRes)
    UnsafeMergeFrom(*source);
  }
}

void NodeMessageRes::MergeFrom(const NodeMessageRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.NodeMessageRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NodeMessageRes::UnsafeMergeFrom(const NodeMessageRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.tonodeid().size() > 0) {

    tonodeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tonodeid_);
  }
  if (from.incrementid() != 0) {
    set_incrementid(from.incrementid());
  }
}

void NodeMessageRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.NodeMessageRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeMessageRes::CopyFrom(const NodeMessageRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.NodeMessageRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NodeMessageRes::IsInitialized() const {

  return true;
}

void NodeMessageRes::Swap(NodeMessageRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeMessageRes::InternalSwap(NodeMessageRes* other) {
  tonodeid_.Swap(&other->tonodeid_);
  std::swap(incrementid_, other->incrementid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeMessageRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeMessageRes_descriptor_;
  metadata.reflection = NodeMessageRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeMessageRes

// optional string toNodeID = 2;
void NodeMessageRes::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NodeMessageRes::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.NodeMessageRes.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeMessageRes::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.NodeMessageRes.toNodeID)
}
void NodeMessageRes::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.NodeMessageRes.toNodeID)
}
void NodeMessageRes::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.NodeMessageRes.toNodeID)
}
::std::string* NodeMessageRes::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.NodeMessageRes.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NodeMessageRes::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.NodeMessageRes.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeMessageRes::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.NodeMessageRes.toNodeID)
}

// optional int32 incrementID = 3;
void NodeMessageRes::clear_incrementid() {
  incrementid_ = 0;
}
::google::protobuf::int32 NodeMessageRes::incrementid() const {
  // @@protoc_insertion_point(field_get:chat.NodeMessageRes.incrementID)
  return incrementid_;
}
void NodeMessageRes::set_incrementid(::google::protobuf::int32 value) {
  
  incrementid_ = value;
  // @@protoc_insertion_point(field_set:chat.NodeMessageRes.incrementID)
}

inline const NodeMessageRes* NodeMessageRes::internal_default_instance() {
  return &NodeMessageRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeMessageNoti::kToNodeIDFieldNumber;
const int NodeMessageNoti::kUnreadIncrementFieldNumber;
const int NodeMessageNoti::kToUserIDOuterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeMessageNoti::NodeMessageNoti()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.NodeMessageNoti)
}

void NodeMessageNoti::InitAsDefaultInstance() {
}

NodeMessageNoti::NodeMessageNoti(const NodeMessageNoti& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.NodeMessageNoti)
}

void NodeMessageNoti::SharedCtor() {
  tonodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  touserid_outer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unreadincrement_ = 0;
  _cached_size_ = 0;
}

NodeMessageNoti::~NodeMessageNoti() {
  // @@protoc_insertion_point(destructor:chat.NodeMessageNoti)
  SharedDtor();
}

void NodeMessageNoti::SharedDtor() {
  tonodeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  touserid_outer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NodeMessageNoti::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeMessageNoti::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeMessageNoti_descriptor_;
}

const NodeMessageNoti& NodeMessageNoti::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NodeMessageNoti> NodeMessageNoti_default_instance_;

NodeMessageNoti* NodeMessageNoti::New(::google::protobuf::Arena* arena) const {
  NodeMessageNoti* n = new NodeMessageNoti;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeMessageNoti::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.NodeMessageNoti)
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unreadincrement_ = 0;
  touserid_outer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool NodeMessageNoti::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.NodeMessageNoti)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string toNodeID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tonodeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tonodeid().data(), this->tonodeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.NodeMessageNoti.toNodeID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unreadIncrement;
        break;
      }

      // optional int32 unreadIncrement = 2;
      case 2: {
        if (tag == 16) {
         parse_unreadIncrement:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unreadincrement_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_toUserID_outer;
        break;
      }

      // optional string toUserID_outer = 3;
      case 3: {
        if (tag == 26) {
         parse_toUserID_outer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_touserid_outer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->touserid_outer().data(), this->touserid_outer().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.NodeMessageNoti.toUserID_outer"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.NodeMessageNoti)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.NodeMessageNoti)
  return false;
#undef DO_
}

void NodeMessageNoti::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.NodeMessageNoti)
  // optional string toNodeID = 1;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.NodeMessageNoti.toNodeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tonodeid(), output);
  }

  // optional int32 unreadIncrement = 2;
  if (this->unreadincrement() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->unreadincrement(), output);
  }

  // optional string toUserID_outer = 3;
  if (this->touserid_outer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->touserid_outer().data(), this->touserid_outer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.NodeMessageNoti.toUserID_outer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->touserid_outer(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.NodeMessageNoti)
}

::google::protobuf::uint8* NodeMessageNoti::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.NodeMessageNoti)
  // optional string toNodeID = 1;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.NodeMessageNoti.toNodeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tonodeid(), target);
  }

  // optional int32 unreadIncrement = 2;
  if (this->unreadincrement() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->unreadincrement(), target);
  }

  // optional string toUserID_outer = 3;
  if (this->touserid_outer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->touserid_outer().data(), this->touserid_outer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.NodeMessageNoti.toUserID_outer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->touserid_outer(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.NodeMessageNoti)
  return target;
}

size_t NodeMessageNoti::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.NodeMessageNoti)
  size_t total_size = 0;

  // optional string toNodeID = 1;
  if (this->tonodeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tonodeid());
  }

  // optional int32 unreadIncrement = 2;
  if (this->unreadincrement() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unreadincrement());
  }

  // optional string toUserID_outer = 3;
  if (this->touserid_outer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->touserid_outer());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeMessageNoti::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.NodeMessageNoti)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NodeMessageNoti* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeMessageNoti>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.NodeMessageNoti)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.NodeMessageNoti)
    UnsafeMergeFrom(*source);
  }
}

void NodeMessageNoti::MergeFrom(const NodeMessageNoti& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.NodeMessageNoti)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NodeMessageNoti::UnsafeMergeFrom(const NodeMessageNoti& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.tonodeid().size() > 0) {

    tonodeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tonodeid_);
  }
  if (from.unreadincrement() != 0) {
    set_unreadincrement(from.unreadincrement());
  }
  if (from.touserid_outer().size() > 0) {

    touserid_outer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.touserid_outer_);
  }
}

void NodeMessageNoti::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.NodeMessageNoti)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeMessageNoti::CopyFrom(const NodeMessageNoti& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.NodeMessageNoti)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NodeMessageNoti::IsInitialized() const {

  return true;
}

void NodeMessageNoti::Swap(NodeMessageNoti* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeMessageNoti::InternalSwap(NodeMessageNoti* other) {
  tonodeid_.Swap(&other->tonodeid_);
  std::swap(unreadincrement_, other->unreadincrement_);
  touserid_outer_.Swap(&other->touserid_outer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeMessageNoti::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeMessageNoti_descriptor_;
  metadata.reflection = NodeMessageNoti_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeMessageNoti

// optional string toNodeID = 1;
void NodeMessageNoti::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NodeMessageNoti::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.NodeMessageNoti.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeMessageNoti::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.NodeMessageNoti.toNodeID)
}
void NodeMessageNoti::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.NodeMessageNoti.toNodeID)
}
void NodeMessageNoti::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.NodeMessageNoti.toNodeID)
}
::std::string* NodeMessageNoti::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.NodeMessageNoti.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NodeMessageNoti::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.NodeMessageNoti.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeMessageNoti::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.NodeMessageNoti.toNodeID)
}

// optional int32 unreadIncrement = 2;
void NodeMessageNoti::clear_unreadincrement() {
  unreadincrement_ = 0;
}
::google::protobuf::int32 NodeMessageNoti::unreadincrement() const {
  // @@protoc_insertion_point(field_get:chat.NodeMessageNoti.unreadIncrement)
  return unreadincrement_;
}
void NodeMessageNoti::set_unreadincrement(::google::protobuf::int32 value) {
  
  unreadincrement_ = value;
  // @@protoc_insertion_point(field_set:chat.NodeMessageNoti.unreadIncrement)
}

// optional string toUserID_outer = 3;
void NodeMessageNoti::clear_touserid_outer() {
  touserid_outer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NodeMessageNoti::touserid_outer() const {
  // @@protoc_insertion_point(field_get:chat.NodeMessageNoti.toUserID_outer)
  return touserid_outer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeMessageNoti::set_touserid_outer(const ::std::string& value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.NodeMessageNoti.toUserID_outer)
}
void NodeMessageNoti::set_touserid_outer(const char* value) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.NodeMessageNoti.toUserID_outer)
}
void NodeMessageNoti::set_touserid_outer(const char* value, size_t size) {
  
  touserid_outer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.NodeMessageNoti.toUserID_outer)
}
::std::string* NodeMessageNoti::mutable_touserid_outer() {
  
  // @@protoc_insertion_point(field_mutable:chat.NodeMessageNoti.toUserID_outer)
  return touserid_outer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NodeMessageNoti::release_touserid_outer() {
  // @@protoc_insertion_point(field_release:chat.NodeMessageNoti.toUserID_outer)
  
  return touserid_outer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeMessageNoti::set_allocated_touserid_outer(::std::string* touserid_outer) {
  if (touserid_outer != NULL) {
    
  } else {
    
  }
  touserid_outer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), touserid_outer);
  // @@protoc_insertion_point(field_set_allocated:chat.NodeMessageNoti.toUserID_outer)
}

inline const NodeMessageNoti* NodeMessageNoti::internal_default_instance() {
  return &NodeMessageNoti_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int setReadMessage::kToNodeIDFieldNumber;
const int setReadMessage::kReadedIncrementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

setReadMessage::setReadMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.setReadMessage)
}

void setReadMessage::InitAsDefaultInstance() {
}

setReadMessage::setReadMessage(const setReadMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.setReadMessage)
}

void setReadMessage::SharedCtor() {
  tonodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  readedincrement_ = 0;
  _cached_size_ = 0;
}

setReadMessage::~setReadMessage() {
  // @@protoc_insertion_point(destructor:chat.setReadMessage)
  SharedDtor();
}

void setReadMessage::SharedDtor() {
  tonodeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void setReadMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* setReadMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return setReadMessage_descriptor_;
}

const setReadMessage& setReadMessage::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<setReadMessage> setReadMessage_default_instance_;

setReadMessage* setReadMessage::New(::google::protobuf::Arena* arena) const {
  setReadMessage* n = new setReadMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void setReadMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.setReadMessage)
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  readedincrement_ = 0;
}

bool setReadMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.setReadMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string toNodeID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tonodeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tonodeid().data(), this->tonodeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.setReadMessage.toNodeID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_readedIncrement;
        break;
      }

      // optional int32 readedIncrement = 2;
      case 2: {
        if (tag == 16) {
         parse_readedIncrement:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &readedincrement_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.setReadMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.setReadMessage)
  return false;
#undef DO_
}

void setReadMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.setReadMessage)
  // optional string toNodeID = 1;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.setReadMessage.toNodeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tonodeid(), output);
  }

  // optional int32 readedIncrement = 2;
  if (this->readedincrement() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->readedincrement(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.setReadMessage)
}

::google::protobuf::uint8* setReadMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.setReadMessage)
  // optional string toNodeID = 1;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.setReadMessage.toNodeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tonodeid(), target);
  }

  // optional int32 readedIncrement = 2;
  if (this->readedincrement() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->readedincrement(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.setReadMessage)
  return target;
}

size_t setReadMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.setReadMessage)
  size_t total_size = 0;

  // optional string toNodeID = 1;
  if (this->tonodeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tonodeid());
  }

  // optional int32 readedIncrement = 2;
  if (this->readedincrement() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->readedincrement());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void setReadMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.setReadMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const setReadMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const setReadMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.setReadMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.setReadMessage)
    UnsafeMergeFrom(*source);
  }
}

void setReadMessage::MergeFrom(const setReadMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.setReadMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void setReadMessage::UnsafeMergeFrom(const setReadMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.tonodeid().size() > 0) {

    tonodeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tonodeid_);
  }
  if (from.readedincrement() != 0) {
    set_readedincrement(from.readedincrement());
  }
}

void setReadMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.setReadMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void setReadMessage::CopyFrom(const setReadMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.setReadMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool setReadMessage::IsInitialized() const {

  return true;
}

void setReadMessage::Swap(setReadMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void setReadMessage::InternalSwap(setReadMessage* other) {
  tonodeid_.Swap(&other->tonodeid_);
  std::swap(readedincrement_, other->readedincrement_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata setReadMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = setReadMessage_descriptor_;
  metadata.reflection = setReadMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// setReadMessage

// optional string toNodeID = 1;
void setReadMessage::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& setReadMessage::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.setReadMessage.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void setReadMessage::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.setReadMessage.toNodeID)
}
void setReadMessage::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.setReadMessage.toNodeID)
}
void setReadMessage::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.setReadMessage.toNodeID)
}
::std::string* setReadMessage::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.setReadMessage.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* setReadMessage::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.setReadMessage.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void setReadMessage::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.setReadMessage.toNodeID)
}

// optional int32 readedIncrement = 2;
void setReadMessage::clear_readedincrement() {
  readedincrement_ = 0;
}
::google::protobuf::int32 setReadMessage::readedincrement() const {
  // @@protoc_insertion_point(field_get:chat.setReadMessage.readedIncrement)
  return readedincrement_;
}
void setReadMessage::set_readedincrement(::google::protobuf::int32 value) {
  
  readedincrement_ = value;
  // @@protoc_insertion_point(field_set:chat.setReadMessage.readedIncrement)
}

inline const setReadMessage* setReadMessage::internal_default_instance() {
  return &setReadMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryMessage::kToNodeIDFieldNumber;
const int QueryMessage::kFromIncrementIDFieldNumber;
const int QueryMessage::kToIncrementIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryMessage::QueryMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.QueryMessage)
}

void QueryMessage::InitAsDefaultInstance() {
}

QueryMessage::QueryMessage(const QueryMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.QueryMessage)
}

void QueryMessage::SharedCtor() {
  tonodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&fromincrementid_, 0, reinterpret_cast<char*>(&toincrementid_) -
    reinterpret_cast<char*>(&fromincrementid_) + sizeof(toincrementid_));
  _cached_size_ = 0;
}

QueryMessage::~QueryMessage() {
  // @@protoc_insertion_point(destructor:chat.QueryMessage)
  SharedDtor();
}

void QueryMessage::SharedDtor() {
  tonodeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QueryMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryMessage_descriptor_;
}

const QueryMessage& QueryMessage::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QueryMessage> QueryMessage_default_instance_;

QueryMessage* QueryMessage::New(::google::protobuf::Arena* arena) const {
  QueryMessage* n = new QueryMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.QueryMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(QueryMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<QueryMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(fromincrementid_, toincrementid_);
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool QueryMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.QueryMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string toNodeID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tonodeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tonodeid().data(), this->tonodeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.QueryMessage.toNodeID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_fromIncrementID;
        break;
      }

      // optional int32 fromIncrementID = 2;
      case 2: {
        if (tag == 16) {
         parse_fromIncrementID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fromincrementid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_toIncrementID;
        break;
      }

      // optional int32 toIncrementID = 3;
      case 3: {
        if (tag == 24) {
         parse_toIncrementID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toincrementid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.QueryMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.QueryMessage)
  return false;
#undef DO_
}

void QueryMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.QueryMessage)
  // optional string toNodeID = 1;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryMessage.toNodeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tonodeid(), output);
  }

  // optional int32 fromIncrementID = 2;
  if (this->fromincrementid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fromincrementid(), output);
  }

  // optional int32 toIncrementID = 3;
  if (this->toincrementid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->toincrementid(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.QueryMessage)
}

::google::protobuf::uint8* QueryMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.QueryMessage)
  // optional string toNodeID = 1;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryMessage.toNodeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tonodeid(), target);
  }

  // optional int32 fromIncrementID = 2;
  if (this->fromincrementid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fromincrementid(), target);
  }

  // optional int32 toIncrementID = 3;
  if (this->toincrementid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->toincrementid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.QueryMessage)
  return target;
}

size_t QueryMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.QueryMessage)
  size_t total_size = 0;

  // optional string toNodeID = 1;
  if (this->tonodeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tonodeid());
  }

  // optional int32 fromIncrementID = 2;
  if (this->fromincrementid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fromincrementid());
  }

  // optional int32 toIncrementID = 3;
  if (this->toincrementid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->toincrementid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.QueryMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.QueryMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.QueryMessage)
    UnsafeMergeFrom(*source);
  }
}

void QueryMessage::MergeFrom(const QueryMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.QueryMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QueryMessage::UnsafeMergeFrom(const QueryMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.tonodeid().size() > 0) {

    tonodeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tonodeid_);
  }
  if (from.fromincrementid() != 0) {
    set_fromincrementid(from.fromincrementid());
  }
  if (from.toincrementid() != 0) {
    set_toincrementid(from.toincrementid());
  }
}

void QueryMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.QueryMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryMessage::CopyFrom(const QueryMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.QueryMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QueryMessage::IsInitialized() const {

  return true;
}

void QueryMessage::Swap(QueryMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryMessage::InternalSwap(QueryMessage* other) {
  tonodeid_.Swap(&other->tonodeid_);
  std::swap(fromincrementid_, other->fromincrementid_);
  std::swap(toincrementid_, other->toincrementid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryMessage_descriptor_;
  metadata.reflection = QueryMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryMessage

// optional string toNodeID = 1;
void QueryMessage::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QueryMessage::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.QueryMessage.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryMessage::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryMessage.toNodeID)
}
void QueryMessage::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryMessage.toNodeID)
}
void QueryMessage::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryMessage.toNodeID)
}
::std::string* QueryMessage::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryMessage.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryMessage::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.QueryMessage.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryMessage::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryMessage.toNodeID)
}

// optional int32 fromIncrementID = 2;
void QueryMessage::clear_fromincrementid() {
  fromincrementid_ = 0;
}
::google::protobuf::int32 QueryMessage::fromincrementid() const {
  // @@protoc_insertion_point(field_get:chat.QueryMessage.fromIncrementID)
  return fromincrementid_;
}
void QueryMessage::set_fromincrementid(::google::protobuf::int32 value) {
  
  fromincrementid_ = value;
  // @@protoc_insertion_point(field_set:chat.QueryMessage.fromIncrementID)
}

// optional int32 toIncrementID = 3;
void QueryMessage::clear_toincrementid() {
  toincrementid_ = 0;
}
::google::protobuf::int32 QueryMessage::toincrementid() const {
  // @@protoc_insertion_point(field_get:chat.QueryMessage.toIncrementID)
  return toincrementid_;
}
void QueryMessage::set_toincrementid(::google::protobuf::int32 value) {
  
  toincrementid_ = value;
  // @@protoc_insertion_point(field_set:chat.QueryMessage.toIncrementID)
}

inline const QueryMessage* QueryMessage::internal_default_instance() {
  return &QueryMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryOneMessage::kToNodeIDFieldNumber;
const int QueryOneMessage::kIncrementIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryOneMessage::QueryOneMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.QueryOneMessage)
}

void QueryOneMessage::InitAsDefaultInstance() {
}

QueryOneMessage::QueryOneMessage(const QueryOneMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.QueryOneMessage)
}

void QueryOneMessage::SharedCtor() {
  tonodeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  incrementid_ = 0;
  _cached_size_ = 0;
}

QueryOneMessage::~QueryOneMessage() {
  // @@protoc_insertion_point(destructor:chat.QueryOneMessage)
  SharedDtor();
}

void QueryOneMessage::SharedDtor() {
  tonodeid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QueryOneMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryOneMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryOneMessage_descriptor_;
}

const QueryOneMessage& QueryOneMessage::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QueryOneMessage> QueryOneMessage_default_instance_;

QueryOneMessage* QueryOneMessage::New(::google::protobuf::Arena* arena) const {
  QueryOneMessage* n = new QueryOneMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryOneMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.QueryOneMessage)
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  incrementid_ = 0;
}

bool QueryOneMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.QueryOneMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string toNodeID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tonodeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tonodeid().data(), this->tonodeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.QueryOneMessage.toNodeID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_incrementID;
        break;
      }

      // optional int32 incrementID = 2;
      case 2: {
        if (tag == 16) {
         parse_incrementID:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &incrementid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.QueryOneMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.QueryOneMessage)
  return false;
#undef DO_
}

void QueryOneMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.QueryOneMessage)
  // optional string toNodeID = 1;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryOneMessage.toNodeID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tonodeid(), output);
  }

  // optional int32 incrementID = 2;
  if (this->incrementid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->incrementid(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.QueryOneMessage)
}

::google::protobuf::uint8* QueryOneMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.QueryOneMessage)
  // optional string toNodeID = 1;
  if (this->tonodeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tonodeid().data(), this->tonodeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryOneMessage.toNodeID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tonodeid(), target);
  }

  // optional int32 incrementID = 2;
  if (this->incrementid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->incrementid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.QueryOneMessage)
  return target;
}

size_t QueryOneMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.QueryOneMessage)
  size_t total_size = 0;

  // optional string toNodeID = 1;
  if (this->tonodeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tonodeid());
  }

  // optional int32 incrementID = 2;
  if (this->incrementid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->incrementid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryOneMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.QueryOneMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryOneMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryOneMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.QueryOneMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.QueryOneMessage)
    UnsafeMergeFrom(*source);
  }
}

void QueryOneMessage::MergeFrom(const QueryOneMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.QueryOneMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QueryOneMessage::UnsafeMergeFrom(const QueryOneMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.tonodeid().size() > 0) {

    tonodeid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tonodeid_);
  }
  if (from.incrementid() != 0) {
    set_incrementid(from.incrementid());
  }
}

void QueryOneMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.QueryOneMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryOneMessage::CopyFrom(const QueryOneMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.QueryOneMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QueryOneMessage::IsInitialized() const {

  return true;
}

void QueryOneMessage::Swap(QueryOneMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryOneMessage::InternalSwap(QueryOneMessage* other) {
  tonodeid_.Swap(&other->tonodeid_);
  std::swap(incrementid_, other->incrementid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryOneMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryOneMessage_descriptor_;
  metadata.reflection = QueryOneMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryOneMessage

// optional string toNodeID = 1;
void QueryOneMessage::clear_tonodeid() {
  tonodeid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QueryOneMessage::tonodeid() const {
  // @@protoc_insertion_point(field_get:chat.QueryOneMessage.toNodeID)
  return tonodeid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryOneMessage::set_tonodeid(const ::std::string& value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryOneMessage.toNodeID)
}
void QueryOneMessage::set_tonodeid(const char* value) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryOneMessage.toNodeID)
}
void QueryOneMessage::set_tonodeid(const char* value, size_t size) {
  
  tonodeid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryOneMessage.toNodeID)
}
::std::string* QueryOneMessage::mutable_tonodeid() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryOneMessage.toNodeID)
  return tonodeid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryOneMessage::release_tonodeid() {
  // @@protoc_insertion_point(field_release:chat.QueryOneMessage.toNodeID)
  
  return tonodeid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryOneMessage::set_allocated_tonodeid(::std::string* tonodeid) {
  if (tonodeid != NULL) {
    
  } else {
    
  }
  tonodeid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tonodeid);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryOneMessage.toNodeID)
}

// optional int32 incrementID = 2;
void QueryOneMessage::clear_incrementid() {
  incrementid_ = 0;
}
::google::protobuf::int32 QueryOneMessage::incrementid() const {
  // @@protoc_insertion_point(field_get:chat.QueryOneMessage.incrementID)
  return incrementid_;
}
void QueryOneMessage::set_incrementid(::google::protobuf::int32 value) {
  
  incrementid_ = value;
  // @@protoc_insertion_point(field_set:chat.QueryOneMessage.incrementID)
}

inline const QueryOneMessage* QueryOneMessage::internal_default_instance() {
  return &QueryOneMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerConnect::kServerNameFieldNumber;
const int ServerConnect::kServerIPFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerConnect::ServerConnect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ServerConnect)
}

void ServerConnect::InitAsDefaultInstance() {
}

ServerConnect::ServerConnect(const ServerConnect& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.ServerConnect)
}

void ServerConnect::SharedCtor() {
  servername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ServerConnect::~ServerConnect() {
  // @@protoc_insertion_point(destructor:chat.ServerConnect)
  SharedDtor();
}

void ServerConnect::SharedDtor() {
  servername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerConnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerConnect_descriptor_;
}

const ServerConnect& ServerConnect::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ServerConnect> ServerConnect_default_instance_;

ServerConnect* ServerConnect::New(::google::protobuf::Arena* arena) const {
  ServerConnect* n = new ServerConnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ServerConnect)
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ServerConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ServerConnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serverName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ServerConnect.serverName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_serverIP;
        break;
      }

      // optional string serverIP = 2;
      case 2: {
        if (tag == 18) {
         parse_serverIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serverip().data(), this->serverip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ServerConnect.serverIP"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ServerConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ServerConnect)
  return false;
#undef DO_
}

void ServerConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ServerConnect)
  // optional string serverName = 1;
  if (this->servername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ServerConnect.serverName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->servername(), output);
  }

  // optional string serverIP = 2;
  if (this->serverip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverip().data(), this->serverip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ServerConnect.serverIP");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serverip(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.ServerConnect)
}

::google::protobuf::uint8* ServerConnect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.ServerConnect)
  // optional string serverName = 1;
  if (this->servername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ServerConnect.serverName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->servername(), target);
  }

  // optional string serverIP = 2;
  if (this->serverip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverip().data(), this->serverip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ServerConnect.serverIP");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverip(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.ServerConnect)
  return target;
}

size_t ServerConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ServerConnect)
  size_t total_size = 0;

  // optional string serverName = 1;
  if (this->servername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->servername());
  }

  // optional string serverIP = 2;
  if (this->serverip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serverip());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerConnect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ServerConnect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ServerConnect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerConnect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ServerConnect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ServerConnect)
    UnsafeMergeFrom(*source);
  }
}

void ServerConnect::MergeFrom(const ServerConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ServerConnect)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ServerConnect::UnsafeMergeFrom(const ServerConnect& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.servername().size() > 0) {

    servername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servername_);
  }
  if (from.serverip().size() > 0) {

    serverip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverip_);
  }
}

void ServerConnect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ServerConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerConnect::CopyFrom(const ServerConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ServerConnect)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ServerConnect::IsInitialized() const {

  return true;
}

void ServerConnect::Swap(ServerConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerConnect::InternalSwap(ServerConnect* other) {
  servername_.Swap(&other->servername_);
  serverip_.Swap(&other->serverip_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerConnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerConnect_descriptor_;
  metadata.reflection = ServerConnect_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerConnect

// optional string serverName = 1;
void ServerConnect::clear_servername() {
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ServerConnect::servername() const {
  // @@protoc_insertion_point(field_get:chat.ServerConnect.serverName)
  return servername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServerConnect::set_servername(const ::std::string& value) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ServerConnect.serverName)
}
void ServerConnect::set_servername(const char* value) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ServerConnect.serverName)
}
void ServerConnect::set_servername(const char* value, size_t size) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ServerConnect.serverName)
}
::std::string* ServerConnect::mutable_servername() {
  
  // @@protoc_insertion_point(field_mutable:chat.ServerConnect.serverName)
  return servername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServerConnect::release_servername() {
  // @@protoc_insertion_point(field_release:chat.ServerConnect.serverName)
  
  return servername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServerConnect::set_allocated_servername(::std::string* servername) {
  if (servername != NULL) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:chat.ServerConnect.serverName)
}

// optional string serverIP = 2;
void ServerConnect::clear_serverip() {
  serverip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ServerConnect::serverip() const {
  // @@protoc_insertion_point(field_get:chat.ServerConnect.serverIP)
  return serverip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServerConnect::set_serverip(const ::std::string& value) {
  
  serverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ServerConnect.serverIP)
}
void ServerConnect::set_serverip(const char* value) {
  
  serverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ServerConnect.serverIP)
}
void ServerConnect::set_serverip(const char* value, size_t size) {
  
  serverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ServerConnect.serverIP)
}
::std::string* ServerConnect::mutable_serverip() {
  
  // @@protoc_insertion_point(field_mutable:chat.ServerConnect.serverIP)
  return serverip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServerConnect::release_serverip() {
  // @@protoc_insertion_point(field_release:chat.ServerConnect.serverIP)
  
  return serverip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServerConnect::set_allocated_serverip(::std::string* serverip) {
  if (serverip != NULL) {
    
  } else {
    
  }
  serverip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serverip);
  // @@protoc_insertion_point(field_set_allocated:chat.ServerConnect.serverIP)
}

inline const ServerConnect* ServerConnect::internal_default_instance() {
  return &ServerConnect_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerDisconnect::kServerNameFieldNumber;
const int ServerDisconnect::kServerIPFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerDisconnect::ServerDisconnect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ServerDisconnect)
}

void ServerDisconnect::InitAsDefaultInstance() {
}

ServerDisconnect::ServerDisconnect(const ServerDisconnect& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.ServerDisconnect)
}

void ServerDisconnect::SharedCtor() {
  servername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ServerDisconnect::~ServerDisconnect() {
  // @@protoc_insertion_point(destructor:chat.ServerDisconnect)
  SharedDtor();
}

void ServerDisconnect::SharedDtor() {
  servername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerDisconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerDisconnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerDisconnect_descriptor_;
}

const ServerDisconnect& ServerDisconnect::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ServerDisconnect> ServerDisconnect_default_instance_;

ServerDisconnect* ServerDisconnect::New(::google::protobuf::Arena* arena) const {
  ServerDisconnect* n = new ServerDisconnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerDisconnect::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ServerDisconnect)
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ServerDisconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ServerDisconnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string serverName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ServerDisconnect.serverName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_serverIP;
        break;
      }

      // optional string serverIP = 2;
      case 2: {
        if (tag == 18) {
         parse_serverIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serverip().data(), this->serverip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ServerDisconnect.serverIP"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ServerDisconnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ServerDisconnect)
  return false;
#undef DO_
}

void ServerDisconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ServerDisconnect)
  // optional string serverName = 1;
  if (this->servername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ServerDisconnect.serverName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->servername(), output);
  }

  // optional string serverIP = 2;
  if (this->serverip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverip().data(), this->serverip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ServerDisconnect.serverIP");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serverip(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.ServerDisconnect)
}

::google::protobuf::uint8* ServerDisconnect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.ServerDisconnect)
  // optional string serverName = 1;
  if (this->servername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ServerDisconnect.serverName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->servername(), target);
  }

  // optional string serverIP = 2;
  if (this->serverip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serverip().data(), this->serverip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ServerDisconnect.serverIP");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverip(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.ServerDisconnect)
  return target;
}

size_t ServerDisconnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ServerDisconnect)
  size_t total_size = 0;

  // optional string serverName = 1;
  if (this->servername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->servername());
  }

  // optional string serverIP = 2;
  if (this->serverip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serverip());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerDisconnect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ServerDisconnect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ServerDisconnect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerDisconnect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ServerDisconnect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ServerDisconnect)
    UnsafeMergeFrom(*source);
  }
}

void ServerDisconnect::MergeFrom(const ServerDisconnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ServerDisconnect)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ServerDisconnect::UnsafeMergeFrom(const ServerDisconnect& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.servername().size() > 0) {

    servername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servername_);
  }
  if (from.serverip().size() > 0) {

    serverip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serverip_);
  }
}

void ServerDisconnect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ServerDisconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerDisconnect::CopyFrom(const ServerDisconnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ServerDisconnect)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ServerDisconnect::IsInitialized() const {

  return true;
}

void ServerDisconnect::Swap(ServerDisconnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerDisconnect::InternalSwap(ServerDisconnect* other) {
  servername_.Swap(&other->servername_);
  serverip_.Swap(&other->serverip_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServerDisconnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerDisconnect_descriptor_;
  metadata.reflection = ServerDisconnect_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerDisconnect

// optional string serverName = 1;
void ServerDisconnect::clear_servername() {
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ServerDisconnect::servername() const {
  // @@protoc_insertion_point(field_get:chat.ServerDisconnect.serverName)
  return servername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServerDisconnect::set_servername(const ::std::string& value) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ServerDisconnect.serverName)
}
void ServerDisconnect::set_servername(const char* value) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ServerDisconnect.serverName)
}
void ServerDisconnect::set_servername(const char* value, size_t size) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ServerDisconnect.serverName)
}
::std::string* ServerDisconnect::mutable_servername() {
  
  // @@protoc_insertion_point(field_mutable:chat.ServerDisconnect.serverName)
  return servername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServerDisconnect::release_servername() {
  // @@protoc_insertion_point(field_release:chat.ServerDisconnect.serverName)
  
  return servername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServerDisconnect::set_allocated_servername(::std::string* servername) {
  if (servername != NULL) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:chat.ServerDisconnect.serverName)
}

// optional string serverIP = 2;
void ServerDisconnect::clear_serverip() {
  serverip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ServerDisconnect::serverip() const {
  // @@protoc_insertion_point(field_get:chat.ServerDisconnect.serverIP)
  return serverip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServerDisconnect::set_serverip(const ::std::string& value) {
  
  serverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ServerDisconnect.serverIP)
}
void ServerDisconnect::set_serverip(const char* value) {
  
  serverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ServerDisconnect.serverIP)
}
void ServerDisconnect::set_serverip(const char* value, size_t size) {
  
  serverip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ServerDisconnect.serverIP)
}
::std::string* ServerDisconnect::mutable_serverip() {
  
  // @@protoc_insertion_point(field_mutable:chat.ServerDisconnect.serverIP)
  return serverip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServerDisconnect::release_serverip() {
  // @@protoc_insertion_point(field_release:chat.ServerDisconnect.serverIP)
  
  return serverip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServerDisconnect::set_allocated_serverip(::std::string* serverip) {
  if (serverip != NULL) {
    
  } else {
    
  }
  serverip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serverip);
  // @@protoc_insertion_point(field_set_allocated:chat.ServerDisconnect.serverIP)
}

inline const ServerDisconnect* ServerDisconnect::internal_default_instance() {
  return &ServerDisconnect_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectInfo::kUUIDFieldNumber;
const int ConnectInfo::kUserIDFieldNumber;
const int ConnectInfo::kIsLoginFieldNumber;
const int ConnectInfo::kIsConnectedFieldNumber;
const int ConnectInfo::kIsReciveNotiFieldNumber;
const int ConnectInfo::kServerNameFieldNumber;
const int ConnectInfo::kUsersFieldNumber;
const int ConnectInfo::kClientVersionFieldNumber;
const int ConnectInfo::kOSVersionFieldNumber;
const int ConnectInfo::kAppVersionFieldNumber;
const int ConnectInfo::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectInfo::ConnectInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ConnectInfo)
}

void ConnectInfo::InitAsDefaultInstance() {
}

ConnectInfo::ConnectInfo(const ConnectInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.ConnectInfo)
}

void ConnectInfo::SharedCtor() {
  users_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  users_.SetEntryDescriptor(
      &::chat::ConnectInfo_UsersEntry_descriptor_);
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  osversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&islogin_, 0, reinterpret_cast<char*>(&isrecivenoti_) -
    reinterpret_cast<char*>(&islogin_) + sizeof(isrecivenoti_));
  _cached_size_ = 0;
}

ConnectInfo::~ConnectInfo() {
  // @@protoc_insertion_point(destructor:chat.ConnectInfo)
  SharedDtor();
}

void ConnectInfo::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  osversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConnectInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectInfo_descriptor_;
}

const ConnectInfo& ConnectInfo::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ConnectInfo> ConnectInfo_default_instance_;

ConnectInfo* ConnectInfo::New(::google::protobuf::Arena* arena) const {
  ConnectInfo* n = new ConnectInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ConnectInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ConnectInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ConnectInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(islogin_, isrecivenoti_);
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  osversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  users_.Clear();
}

bool ConnectInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ConnectInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UUID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ConnectInfo.UUID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userID;
        break;
      }

      // optional string userID = 2;
      case 2: {
        if (tag == 18) {
         parse_userID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ConnectInfo.userID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isLogin;
        break;
      }

      // optional bool isLogin = 3;
      case 3: {
        if (tag == 24) {
         parse_isLogin:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islogin_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_isConnected;
        break;
      }

      // optional bool isConnected = 4;
      case 4: {
        if (tag == 32) {
         parse_isConnected:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isconnected_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_isReciveNoti;
        break;
      }

      // optional bool isReciveNoti = 5;
      case 5: {
        if (tag == 40) {
         parse_isReciveNoti:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrecivenoti_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_serverName;
        break;
      }

      // optional string serverName = 6;
      case 6: {
        if (tag == 50) {
         parse_serverName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->servername().data(), this->servername().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ConnectInfo.serverName"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_users;
        break;
      }

      // map<string, int32> users = 8;
      case 8: {
        if (tag == 66) {
         parse_users:
          DO_(input->IncrementRecursionDepth());
         parse_loop_users:
          ConnectInfo_UsersEntry::Parser< ::google::protobuf::internal::MapField<
              ::std::string, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 > > parser(&users_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ConnectInfo.UsersEntry.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_users;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(74)) goto parse_clientVersion;
        break;
      }

      // optional string clientVersion = 9;
      case 9: {
        if (tag == 74) {
         parse_clientVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientversion().data(), this->clientversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ConnectInfo.clientVersion"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_OSVersion;
        break;
      }

      // optional string OSVersion = 10;
      case 10: {
        if (tag == 82) {
         parse_OSVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_osversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->osversion().data(), this->osversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ConnectInfo.OSVersion"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_appVersion;
        break;
      }

      // optional string appVersion = 11;
      case 11: {
        if (tag == 90) {
         parse_appVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->appversion().data(), this->appversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ConnectInfo.appVersion"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 12;
      case 12: {
        if (tag == 98) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ConnectInfo.timestamp"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ConnectInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ConnectInfo)
  return false;
#undef DO_
}

void ConnectInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ConnectInfo)
  // optional string UUID = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ConnectInfo.UUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ConnectInfo.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  // optional bool isLogin = 3;
  if (this->islogin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->islogin(), output);
  }

  // optional bool isConnected = 4;
  if (this->isconnected() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isconnected(), output);
  }

  // optional bool isReciveNoti = 5;
  if (this->isrecivenoti() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isrecivenoti(), output);
  }

  // optional string serverName = 6;
  if (this->servername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ConnectInfo.serverName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->servername(), output);
  }

  // map<string, int32> users = 8;
  if (!this->users().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "chat.ConnectInfo.UsersEntry.key");
      }
    };

    if (output->IsSerializationDeterminstic() &&
        this->users().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->users().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->users().begin();
          it != this->users().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ConnectInfo_UsersEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(users_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ConnectInfo_UsersEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->users().begin();
          it != this->users().end(); ++it) {
        entry.reset(users_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional string clientVersion = 9;
  if (this->clientversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientversion().data(), this->clientversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ConnectInfo.clientVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->clientversion(), output);
  }

  // optional string OSVersion = 10;
  if (this->osversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->osversion().data(), this->osversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ConnectInfo.OSVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->osversion(), output);
  }

  // optional string appVersion = 11;
  if (this->appversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appversion().data(), this->appversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ConnectInfo.appVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->appversion(), output);
  }

  // optional string timestamp = 12;
  if (this->timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ConnectInfo.timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.ConnectInfo)
}

::google::protobuf::uint8* ConnectInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.ConnectInfo)
  // optional string UUID = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ConnectInfo.UUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ConnectInfo.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  // optional bool isLogin = 3;
  if (this->islogin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->islogin(), target);
  }

  // optional bool isConnected = 4;
  if (this->isconnected() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isconnected(), target);
  }

  // optional bool isReciveNoti = 5;
  if (this->isrecivenoti() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isrecivenoti(), target);
  }

  // optional string serverName = 6;
  if (this->servername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servername().data(), this->servername().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ConnectInfo.serverName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->servername(), target);
  }

  // map<string, int32> users = 8;
  if (!this->users().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "chat.ConnectInfo.UsersEntry.key");
      }
    };

    if (deterministic &&
        this->users().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->users().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->users().begin();
          it != this->users().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<ConnectInfo_UsersEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(users_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ConnectInfo_UsersEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->users().begin();
          it != this->users().end(); ++it) {
        entry.reset(users_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional string clientVersion = 9;
  if (this->clientversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientversion().data(), this->clientversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ConnectInfo.clientVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->clientversion(), target);
  }

  // optional string OSVersion = 10;
  if (this->osversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->osversion().data(), this->osversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ConnectInfo.OSVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->osversion(), target);
  }

  // optional string appVersion = 11;
  if (this->appversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->appversion().data(), this->appversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ConnectInfo.appVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->appversion(), target);
  }

  // optional string timestamp = 12;
  if (this->timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ConnectInfo.timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.ConnectInfo)
  return target;
}

size_t ConnectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ConnectInfo)
  size_t total_size = 0;

  // optional string UUID = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // optional bool isLogin = 3;
  if (this->islogin() != 0) {
    total_size += 1 + 1;
  }

  // optional bool isConnected = 4;
  if (this->isconnected() != 0) {
    total_size += 1 + 1;
  }

  // optional bool isReciveNoti = 5;
  if (this->isrecivenoti() != 0) {
    total_size += 1 + 1;
  }

  // optional string serverName = 6;
  if (this->servername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->servername());
  }

  // optional string clientVersion = 9;
  if (this->clientversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientversion());
  }

  // optional string OSVersion = 10;
  if (this->osversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->osversion());
  }

  // optional string appVersion = 11;
  if (this->appversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->appversion());
  }

  // optional string timestamp = 12;
  if (this->timestamp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timestamp());
  }

  // map<string, int32> users = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->users_size());
  {
    ::google::protobuf::scoped_ptr<ConnectInfo_UsersEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
        it = this->users().begin();
        it != this->users().end(); ++it) {
      entry.reset(users_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ConnectInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConnectInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ConnectInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ConnectInfo)
    UnsafeMergeFrom(*source);
  }
}

void ConnectInfo::MergeFrom(const ConnectInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ConnectInfo)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ConnectInfo::UnsafeMergeFrom(const ConnectInfo& from) {
  GOOGLE_DCHECK(&from != this);
  users_.MergeFrom(from.users_);
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.islogin() != 0) {
    set_islogin(from.islogin());
  }
  if (from.isconnected() != 0) {
    set_isconnected(from.isconnected());
  }
  if (from.isrecivenoti() != 0) {
    set_isrecivenoti(from.isrecivenoti());
  }
  if (from.servername().size() > 0) {

    servername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servername_);
  }
  if (from.clientversion().size() > 0) {

    clientversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientversion_);
  }
  if (from.osversion().size() > 0) {

    osversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.osversion_);
  }
  if (from.appversion().size() > 0) {

    appversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.appversion_);
  }
  if (from.timestamp().size() > 0) {

    timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
}

void ConnectInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ConnectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectInfo::CopyFrom(const ConnectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ConnectInfo)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ConnectInfo::IsInitialized() const {

  return true;
}

void ConnectInfo::Swap(ConnectInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectInfo::InternalSwap(ConnectInfo* other) {
  uuid_.Swap(&other->uuid_);
  userid_.Swap(&other->userid_);
  std::swap(islogin_, other->islogin_);
  std::swap(isconnected_, other->isconnected_);
  std::swap(isrecivenoti_, other->isrecivenoti_);
  servername_.Swap(&other->servername_);
  users_.Swap(&other->users_);
  clientversion_.Swap(&other->clientversion_);
  osversion_.Swap(&other->osversion_);
  appversion_.Swap(&other->appversion_);
  timestamp_.Swap(&other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnectInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectInfo_descriptor_;
  metadata.reflection = ConnectInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnectInfo

// optional string UUID = 1;
void ConnectInfo::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConnectInfo::uuid() const {
  // @@protoc_insertion_point(field_get:chat.ConnectInfo.UUID)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectInfo::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ConnectInfo.UUID)
}
void ConnectInfo::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ConnectInfo.UUID)
}
void ConnectInfo::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ConnectInfo.UUID)
}
::std::string* ConnectInfo::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:chat.ConnectInfo.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConnectInfo::release_uuid() {
  // @@protoc_insertion_point(field_release:chat.ConnectInfo.UUID)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectInfo::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:chat.ConnectInfo.UUID)
}

// optional string userID = 2;
void ConnectInfo::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConnectInfo::userid() const {
  // @@protoc_insertion_point(field_get:chat.ConnectInfo.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectInfo::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ConnectInfo.userID)
}
void ConnectInfo::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ConnectInfo.userID)
}
void ConnectInfo::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ConnectInfo.userID)
}
::std::string* ConnectInfo::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:chat.ConnectInfo.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConnectInfo::release_userid() {
  // @@protoc_insertion_point(field_release:chat.ConnectInfo.userID)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectInfo::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:chat.ConnectInfo.userID)
}

// optional bool isLogin = 3;
void ConnectInfo::clear_islogin() {
  islogin_ = false;
}
bool ConnectInfo::islogin() const {
  // @@protoc_insertion_point(field_get:chat.ConnectInfo.isLogin)
  return islogin_;
}
void ConnectInfo::set_islogin(bool value) {
  
  islogin_ = value;
  // @@protoc_insertion_point(field_set:chat.ConnectInfo.isLogin)
}

// optional bool isConnected = 4;
void ConnectInfo::clear_isconnected() {
  isconnected_ = false;
}
bool ConnectInfo::isconnected() const {
  // @@protoc_insertion_point(field_get:chat.ConnectInfo.isConnected)
  return isconnected_;
}
void ConnectInfo::set_isconnected(bool value) {
  
  isconnected_ = value;
  // @@protoc_insertion_point(field_set:chat.ConnectInfo.isConnected)
}

// optional bool isReciveNoti = 5;
void ConnectInfo::clear_isrecivenoti() {
  isrecivenoti_ = false;
}
bool ConnectInfo::isrecivenoti() const {
  // @@protoc_insertion_point(field_get:chat.ConnectInfo.isReciveNoti)
  return isrecivenoti_;
}
void ConnectInfo::set_isrecivenoti(bool value) {
  
  isrecivenoti_ = value;
  // @@protoc_insertion_point(field_set:chat.ConnectInfo.isReciveNoti)
}

// optional string serverName = 6;
void ConnectInfo::clear_servername() {
  servername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConnectInfo::servername() const {
  // @@protoc_insertion_point(field_get:chat.ConnectInfo.serverName)
  return servername_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectInfo::set_servername(const ::std::string& value) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ConnectInfo.serverName)
}
void ConnectInfo::set_servername(const char* value) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ConnectInfo.serverName)
}
void ConnectInfo::set_servername(const char* value, size_t size) {
  
  servername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ConnectInfo.serverName)
}
::std::string* ConnectInfo::mutable_servername() {
  
  // @@protoc_insertion_point(field_mutable:chat.ConnectInfo.serverName)
  return servername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConnectInfo::release_servername() {
  // @@protoc_insertion_point(field_release:chat.ConnectInfo.serverName)
  
  return servername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectInfo::set_allocated_servername(::std::string* servername) {
  if (servername != NULL) {
    
  } else {
    
  }
  servername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servername);
  // @@protoc_insertion_point(field_set_allocated:chat.ConnectInfo.serverName)
}

// map<string, int32> users = 8;
int ConnectInfo::users_size() const {
  return users_.size();
}
void ConnectInfo::clear_users() {
  users_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
ConnectInfo::users() const {
  // @@protoc_insertion_point(field_map:chat.ConnectInfo.users)
  return users_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
ConnectInfo::mutable_users() {
  // @@protoc_insertion_point(field_mutable_map:chat.ConnectInfo.users)
  return users_.MutableMap();
}

// optional string clientVersion = 9;
void ConnectInfo::clear_clientversion() {
  clientversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConnectInfo::clientversion() const {
  // @@protoc_insertion_point(field_get:chat.ConnectInfo.clientVersion)
  return clientversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectInfo::set_clientversion(const ::std::string& value) {
  
  clientversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ConnectInfo.clientVersion)
}
void ConnectInfo::set_clientversion(const char* value) {
  
  clientversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ConnectInfo.clientVersion)
}
void ConnectInfo::set_clientversion(const char* value, size_t size) {
  
  clientversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ConnectInfo.clientVersion)
}
::std::string* ConnectInfo::mutable_clientversion() {
  
  // @@protoc_insertion_point(field_mutable:chat.ConnectInfo.clientVersion)
  return clientversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConnectInfo::release_clientversion() {
  // @@protoc_insertion_point(field_release:chat.ConnectInfo.clientVersion)
  
  return clientversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectInfo::set_allocated_clientversion(::std::string* clientversion) {
  if (clientversion != NULL) {
    
  } else {
    
  }
  clientversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientversion);
  // @@protoc_insertion_point(field_set_allocated:chat.ConnectInfo.clientVersion)
}

// optional string OSVersion = 10;
void ConnectInfo::clear_osversion() {
  osversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConnectInfo::osversion() const {
  // @@protoc_insertion_point(field_get:chat.ConnectInfo.OSVersion)
  return osversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectInfo::set_osversion(const ::std::string& value) {
  
  osversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ConnectInfo.OSVersion)
}
void ConnectInfo::set_osversion(const char* value) {
  
  osversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ConnectInfo.OSVersion)
}
void ConnectInfo::set_osversion(const char* value, size_t size) {
  
  osversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ConnectInfo.OSVersion)
}
::std::string* ConnectInfo::mutable_osversion() {
  
  // @@protoc_insertion_point(field_mutable:chat.ConnectInfo.OSVersion)
  return osversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConnectInfo::release_osversion() {
  // @@protoc_insertion_point(field_release:chat.ConnectInfo.OSVersion)
  
  return osversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectInfo::set_allocated_osversion(::std::string* osversion) {
  if (osversion != NULL) {
    
  } else {
    
  }
  osversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), osversion);
  // @@protoc_insertion_point(field_set_allocated:chat.ConnectInfo.OSVersion)
}

// optional string appVersion = 11;
void ConnectInfo::clear_appversion() {
  appversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConnectInfo::appversion() const {
  // @@protoc_insertion_point(field_get:chat.ConnectInfo.appVersion)
  return appversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectInfo::set_appversion(const ::std::string& value) {
  
  appversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ConnectInfo.appVersion)
}
void ConnectInfo::set_appversion(const char* value) {
  
  appversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ConnectInfo.appVersion)
}
void ConnectInfo::set_appversion(const char* value, size_t size) {
  
  appversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ConnectInfo.appVersion)
}
::std::string* ConnectInfo::mutable_appversion() {
  
  // @@protoc_insertion_point(field_mutable:chat.ConnectInfo.appVersion)
  return appversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConnectInfo::release_appversion() {
  // @@protoc_insertion_point(field_release:chat.ConnectInfo.appVersion)
  
  return appversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectInfo::set_allocated_appversion(::std::string* appversion) {
  if (appversion != NULL) {
    
  } else {
    
  }
  appversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appversion);
  // @@protoc_insertion_point(field_set_allocated:chat.ConnectInfo.appVersion)
}

// optional string timestamp = 12;
void ConnectInfo::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConnectInfo::timestamp() const {
  // @@protoc_insertion_point(field_get:chat.ConnectInfo.timestamp)
  return timestamp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectInfo::set_timestamp(const ::std::string& value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ConnectInfo.timestamp)
}
void ConnectInfo::set_timestamp(const char* value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ConnectInfo.timestamp)
}
void ConnectInfo::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ConnectInfo.timestamp)
}
::std::string* ConnectInfo::mutable_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:chat.ConnectInfo.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConnectInfo::release_timestamp() {
  // @@protoc_insertion_point(field_release:chat.ConnectInfo.timestamp)
  
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectInfo::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:chat.ConnectInfo.timestamp)
}

inline const ConnectInfo* ConnectInfo::internal_default_instance() {
  return &ConnectInfo_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectInfoLittle::kUUIDFieldNumber;
const int ConnectInfoLittle::kIsConnectedFieldNumber;
const int ConnectInfoLittle::kIsReciveNotiFieldNumber;
const int ConnectInfoLittle::kNodepointorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectInfoLittle::ConnectInfoLittle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ConnectInfoLittle)
}

void ConnectInfoLittle::InitAsDefaultInstance() {
}

ConnectInfoLittle::ConnectInfoLittle(const ConnectInfoLittle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.ConnectInfoLittle)
}

void ConnectInfoLittle::SharedCtor() {
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nodepointor_, 0, reinterpret_cast<char*>(&isrecivenoti_) -
    reinterpret_cast<char*>(&nodepointor_) + sizeof(isrecivenoti_));
  _cached_size_ = 0;
}

ConnectInfoLittle::~ConnectInfoLittle() {
  // @@protoc_insertion_point(destructor:chat.ConnectInfoLittle)
  SharedDtor();
}

void ConnectInfoLittle::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConnectInfoLittle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectInfoLittle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectInfoLittle_descriptor_;
}

const ConnectInfoLittle& ConnectInfoLittle::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ConnectInfoLittle> ConnectInfoLittle_default_instance_;

ConnectInfoLittle* ConnectInfoLittle::New(::google::protobuf::Arena* arena) const {
  ConnectInfoLittle* n = new ConnectInfoLittle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectInfoLittle::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ConnectInfoLittle)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ConnectInfoLittle, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ConnectInfoLittle*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(nodepointor_, isrecivenoti_);
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ConnectInfoLittle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ConnectInfoLittle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UUID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ConnectInfoLittle.UUID"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isConnected;
        break;
      }

      // optional bool isConnected = 2;
      case 2: {
        if (tag == 16) {
         parse_isConnected:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isconnected_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_isReciveNoti;
        break;
      }

      // optional bool isReciveNoti = 3;
      case 3: {
        if (tag == 24) {
         parse_isReciveNoti:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrecivenoti_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_nodepointor;
        break;
      }

      // optional int64 nodepointor = 4;
      case 4: {
        if (tag == 32) {
         parse_nodepointor:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nodepointor_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ConnectInfoLittle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ConnectInfoLittle)
  return false;
#undef DO_
}

void ConnectInfoLittle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ConnectInfoLittle)
  // optional string UUID = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ConnectInfoLittle.UUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // optional bool isConnected = 2;
  if (this->isconnected() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isconnected(), output);
  }

  // optional bool isReciveNoti = 3;
  if (this->isrecivenoti() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isrecivenoti(), output);
  }

  // optional int64 nodepointor = 4;
  if (this->nodepointor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->nodepointor(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.ConnectInfoLittle)
}

::google::protobuf::uint8* ConnectInfoLittle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.ConnectInfoLittle)
  // optional string UUID = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ConnectInfoLittle.UUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // optional bool isConnected = 2;
  if (this->isconnected() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isconnected(), target);
  }

  // optional bool isReciveNoti = 3;
  if (this->isrecivenoti() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isrecivenoti(), target);
  }

  // optional int64 nodepointor = 4;
  if (this->nodepointor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->nodepointor(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.ConnectInfoLittle)
  return target;
}

size_t ConnectInfoLittle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ConnectInfoLittle)
  size_t total_size = 0;

  // optional string UUID = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // optional bool isConnected = 2;
  if (this->isconnected() != 0) {
    total_size += 1 + 1;
  }

  // optional bool isReciveNoti = 3;
  if (this->isrecivenoti() != 0) {
    total_size += 1 + 1;
  }

  // optional int64 nodepointor = 4;
  if (this->nodepointor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nodepointor());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectInfoLittle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ConnectInfoLittle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConnectInfoLittle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectInfoLittle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ConnectInfoLittle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ConnectInfoLittle)
    UnsafeMergeFrom(*source);
  }
}

void ConnectInfoLittle::MergeFrom(const ConnectInfoLittle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ConnectInfoLittle)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ConnectInfoLittle::UnsafeMergeFrom(const ConnectInfoLittle& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.isconnected() != 0) {
    set_isconnected(from.isconnected());
  }
  if (from.isrecivenoti() != 0) {
    set_isrecivenoti(from.isrecivenoti());
  }
  if (from.nodepointor() != 0) {
    set_nodepointor(from.nodepointor());
  }
}

void ConnectInfoLittle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ConnectInfoLittle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectInfoLittle::CopyFrom(const ConnectInfoLittle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ConnectInfoLittle)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ConnectInfoLittle::IsInitialized() const {

  return true;
}

void ConnectInfoLittle::Swap(ConnectInfoLittle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectInfoLittle::InternalSwap(ConnectInfoLittle* other) {
  uuid_.Swap(&other->uuid_);
  std::swap(isconnected_, other->isconnected_);
  std::swap(isrecivenoti_, other->isrecivenoti_);
  std::swap(nodepointor_, other->nodepointor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnectInfoLittle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectInfoLittle_descriptor_;
  metadata.reflection = ConnectInfoLittle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnectInfoLittle

// optional string UUID = 1;
void ConnectInfoLittle::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConnectInfoLittle::uuid() const {
  // @@protoc_insertion_point(field_get:chat.ConnectInfoLittle.UUID)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectInfoLittle::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.ConnectInfoLittle.UUID)
}
void ConnectInfoLittle::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.ConnectInfoLittle.UUID)
}
void ConnectInfoLittle::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.ConnectInfoLittle.UUID)
}
::std::string* ConnectInfoLittle::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:chat.ConnectInfoLittle.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConnectInfoLittle::release_uuid() {
  // @@protoc_insertion_point(field_release:chat.ConnectInfoLittle.UUID)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectInfoLittle::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:chat.ConnectInfoLittle.UUID)
}

// optional bool isConnected = 2;
void ConnectInfoLittle::clear_isconnected() {
  isconnected_ = false;
}
bool ConnectInfoLittle::isconnected() const {
  // @@protoc_insertion_point(field_get:chat.ConnectInfoLittle.isConnected)
  return isconnected_;
}
void ConnectInfoLittle::set_isconnected(bool value) {
  
  isconnected_ = value;
  // @@protoc_insertion_point(field_set:chat.ConnectInfoLittle.isConnected)
}

// optional bool isReciveNoti = 3;
void ConnectInfoLittle::clear_isrecivenoti() {
  isrecivenoti_ = false;
}
bool ConnectInfoLittle::isrecivenoti() const {
  // @@protoc_insertion_point(field_get:chat.ConnectInfoLittle.isReciveNoti)
  return isrecivenoti_;
}
void ConnectInfoLittle::set_isrecivenoti(bool value) {
  
  isrecivenoti_ = value;
  // @@protoc_insertion_point(field_set:chat.ConnectInfoLittle.isReciveNoti)
}

// optional int64 nodepointor = 4;
void ConnectInfoLittle::clear_nodepointor() {
  nodepointor_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ConnectInfoLittle::nodepointor() const {
  // @@protoc_insertion_point(field_get:chat.ConnectInfoLittle.nodepointor)
  return nodepointor_;
}
void ConnectInfoLittle::set_nodepointor(::google::protobuf::int64 value) {
  
  nodepointor_ = value;
  // @@protoc_insertion_point(field_set:chat.ConnectInfoLittle.nodepointor)
}

inline const ConnectInfoLittle* ConnectInfoLittle::internal_default_instance() {
  return &ConnectInfoLittle_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Media::kSha1FieldNumber;
const int Media::kNthFieldNumber;
const int Media::kTypeFieldNumber;
const int Media::kLengthFieldNumber;
const int Media::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Media::Media()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.Media)
}

void Media::InitAsDefaultInstance() {
}

Media::Media(const Media& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.Media)
}

void Media::SharedCtor() {
  sha1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nth_, 0, reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&nth_) + sizeof(length_));
  _cached_size_ = 0;
}

Media::~Media() {
  // @@protoc_insertion_point(destructor:chat.Media)
  SharedDtor();
}

void Media::SharedDtor() {
  sha1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Media::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Media::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Media_descriptor_;
}

const Media& Media::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Media> Media_default_instance_;

Media* Media::New(::google::protobuf::Arena* arena) const {
  Media* n = new Media;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Media::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.Media)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Media, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Media*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(nth_, length_);
  sha1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Media::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.Media)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sha1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sha1()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sha1().data(), this->sha1().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.Media.sha1"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nth;
        break;
      }

      // optional int32 nth = 2;
      case 2: {
        if (tag == 16) {
         parse_nth:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nth_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .chat.MediaType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::chat::MediaType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_length;
        break;
      }

      // optional int32 length = 4;
      case 4: {
        if (tag == 32) {
         parse_length:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }

      // optional bytes content = 5;
      case 5: {
        if (tag == 42) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.Media)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.Media)
  return false;
#undef DO_
}

void Media::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.Media)
  // optional string sha1 = 1;
  if (this->sha1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sha1().data(), this->sha1().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Media.sha1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sha1(), output);
  }

  // optional int32 nth = 2;
  if (this->nth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nth(), output);
  }

  // optional .chat.MediaType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional int32 length = 4;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->length(), output);
  }

  // optional bytes content = 5;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->content(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.Media)
}

::google::protobuf::uint8* Media::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.Media)
  // optional string sha1 = 1;
  if (this->sha1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sha1().data(), this->sha1().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.Media.sha1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sha1(), target);
  }

  // optional int32 nth = 2;
  if (this->nth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nth(), target);
  }

  // optional .chat.MediaType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional int32 length = 4;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->length(), target);
  }

  // optional bytes content = 5;
  if (this->content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->content(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.Media)
  return target;
}

size_t Media::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.Media)
  size_t total_size = 0;

  // optional string sha1 = 1;
  if (this->sha1().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sha1());
  }

  // optional int32 nth = 2;
  if (this->nth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nth());
  }

  // optional .chat.MediaType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional int32 length = 4;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->length());
  }

  // optional bytes content = 5;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Media::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.Media)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Media* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Media>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.Media)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.Media)
    UnsafeMergeFrom(*source);
  }
}

void Media::MergeFrom(const Media& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.Media)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Media::UnsafeMergeFrom(const Media& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.sha1().size() > 0) {

    sha1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha1_);
  }
  if (from.nth() != 0) {
    set_nth(from.nth());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void Media::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.Media)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Media::CopyFrom(const Media& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.Media)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Media::IsInitialized() const {

  return true;
}

void Media::Swap(Media* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Media::InternalSwap(Media* other) {
  sha1_.Swap(&other->sha1_);
  std::swap(nth_, other->nth_);
  std::swap(type_, other->type_);
  std::swap(length_, other->length_);
  content_.Swap(&other->content_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Media::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Media_descriptor_;
  metadata.reflection = Media_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Media

// optional string sha1 = 1;
void Media::clear_sha1() {
  sha1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Media::sha1() const {
  // @@protoc_insertion_point(field_get:chat.Media.sha1)
  return sha1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Media::set_sha1(const ::std::string& value) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Media.sha1)
}
void Media::set_sha1(const char* value) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Media.sha1)
}
void Media::set_sha1(const char* value, size_t size) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Media.sha1)
}
::std::string* Media::mutable_sha1() {
  
  // @@protoc_insertion_point(field_mutable:chat.Media.sha1)
  return sha1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Media::release_sha1() {
  // @@protoc_insertion_point(field_release:chat.Media.sha1)
  
  return sha1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Media::set_allocated_sha1(::std::string* sha1) {
  if (sha1 != NULL) {
    
  } else {
    
  }
  sha1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha1);
  // @@protoc_insertion_point(field_set_allocated:chat.Media.sha1)
}

// optional int32 nth = 2;
void Media::clear_nth() {
  nth_ = 0;
}
::google::protobuf::int32 Media::nth() const {
  // @@protoc_insertion_point(field_get:chat.Media.nth)
  return nth_;
}
void Media::set_nth(::google::protobuf::int32 value) {
  
  nth_ = value;
  // @@protoc_insertion_point(field_set:chat.Media.nth)
}

// optional .chat.MediaType type = 3;
void Media::clear_type() {
  type_ = 0;
}
::chat::MediaType Media::type() const {
  // @@protoc_insertion_point(field_get:chat.Media.type)
  return static_cast< ::chat::MediaType >(type_);
}
void Media::set_type(::chat::MediaType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:chat.Media.type)
}

// optional int32 length = 4;
void Media::clear_length() {
  length_ = 0;
}
::google::protobuf::int32 Media::length() const {
  // @@protoc_insertion_point(field_get:chat.Media.length)
  return length_;
}
void Media::set_length(::google::protobuf::int32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:chat.Media.length)
}

// optional bytes content = 5;
void Media::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Media::content() const {
  // @@protoc_insertion_point(field_get:chat.Media.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Media::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.Media.content)
}
void Media::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.Media.content)
}
void Media::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.Media.content)
}
::std::string* Media::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:chat.Media.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Media::release_content() {
  // @@protoc_insertion_point(field_release:chat.Media.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Media::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:chat.Media.content)
}

inline const Media* Media::internal_default_instance() {
  return &Media_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MediaRes::kSha1FieldNumber;
const int MediaRes::kNthFieldNumber;
const int MediaRes::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MediaRes::MediaRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.MediaRes)
}

void MediaRes::InitAsDefaultInstance() {
}

MediaRes::MediaRes(const MediaRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.MediaRes)
}

void MediaRes::SharedCtor() {
  sha1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nth_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&nth_) + sizeof(type_));
  _cached_size_ = 0;
}

MediaRes::~MediaRes() {
  // @@protoc_insertion_point(destructor:chat.MediaRes)
  SharedDtor();
}

void MediaRes::SharedDtor() {
  sha1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MediaRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaRes_descriptor_;
}

const MediaRes& MediaRes::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MediaRes> MediaRes_default_instance_;

MediaRes* MediaRes::New(::google::protobuf::Arena* arena) const {
  MediaRes* n = new MediaRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MediaRes::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.MediaRes)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MediaRes, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MediaRes*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(nth_, type_);
  sha1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool MediaRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.MediaRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sha1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sha1()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sha1().data(), this->sha1().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.MediaRes.sha1"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nth;
        break;
      }

      // optional int32 nth = 2;
      case 2: {
        if (tag == 16) {
         parse_nth:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nth_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .chat.MediaType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::chat::MediaType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.MediaRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.MediaRes)
  return false;
#undef DO_
}

void MediaRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.MediaRes)
  // optional string sha1 = 1;
  if (this->sha1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sha1().data(), this->sha1().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.MediaRes.sha1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sha1(), output);
  }

  // optional int32 nth = 2;
  if (this->nth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nth(), output);
  }

  // optional .chat.MediaType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.MediaRes)
}

::google::protobuf::uint8* MediaRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.MediaRes)
  // optional string sha1 = 1;
  if (this->sha1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sha1().data(), this->sha1().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.MediaRes.sha1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sha1(), target);
  }

  // optional int32 nth = 2;
  if (this->nth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nth(), target);
  }

  // optional .chat.MediaType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.MediaRes)
  return target;
}

size_t MediaRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.MediaRes)
  size_t total_size = 0;

  // optional string sha1 = 1;
  if (this->sha1().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sha1());
  }

  // optional int32 nth = 2;
  if (this->nth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nth());
  }

  // optional .chat.MediaType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.MediaRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MediaRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MediaRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.MediaRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.MediaRes)
    UnsafeMergeFrom(*source);
  }
}

void MediaRes::MergeFrom(const MediaRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.MediaRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MediaRes::UnsafeMergeFrom(const MediaRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.sha1().size() > 0) {

    sha1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha1_);
  }
  if (from.nth() != 0) {
    set_nth(from.nth());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void MediaRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.MediaRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaRes::CopyFrom(const MediaRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.MediaRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MediaRes::IsInitialized() const {

  return true;
}

void MediaRes::Swap(MediaRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MediaRes::InternalSwap(MediaRes* other) {
  sha1_.Swap(&other->sha1_);
  std::swap(nth_, other->nth_);
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MediaRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaRes_descriptor_;
  metadata.reflection = MediaRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MediaRes

// optional string sha1 = 1;
void MediaRes::clear_sha1() {
  sha1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MediaRes::sha1() const {
  // @@protoc_insertion_point(field_get:chat.MediaRes.sha1)
  return sha1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MediaRes::set_sha1(const ::std::string& value) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.MediaRes.sha1)
}
void MediaRes::set_sha1(const char* value) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.MediaRes.sha1)
}
void MediaRes::set_sha1(const char* value, size_t size) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.MediaRes.sha1)
}
::std::string* MediaRes::mutable_sha1() {
  
  // @@protoc_insertion_point(field_mutable:chat.MediaRes.sha1)
  return sha1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MediaRes::release_sha1() {
  // @@protoc_insertion_point(field_release:chat.MediaRes.sha1)
  
  return sha1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MediaRes::set_allocated_sha1(::std::string* sha1) {
  if (sha1 != NULL) {
    
  } else {
    
  }
  sha1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha1);
  // @@protoc_insertion_point(field_set_allocated:chat.MediaRes.sha1)
}

// optional int32 nth = 2;
void MediaRes::clear_nth() {
  nth_ = 0;
}
::google::protobuf::int32 MediaRes::nth() const {
  // @@protoc_insertion_point(field_get:chat.MediaRes.nth)
  return nth_;
}
void MediaRes::set_nth(::google::protobuf::int32 value) {
  
  nth_ = value;
  // @@protoc_insertion_point(field_set:chat.MediaRes.nth)
}

// optional .chat.MediaType type = 3;
void MediaRes::clear_type() {
  type_ = 0;
}
::chat::MediaType MediaRes::type() const {
  // @@protoc_insertion_point(field_get:chat.MediaRes.type)
  return static_cast< ::chat::MediaType >(type_);
}
void MediaRes::set_type(::chat::MediaType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:chat.MediaRes.type)
}

inline const MediaRes* MediaRes::internal_default_instance() {
  return &MediaRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryMedia::kSha1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryMedia::QueryMedia()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.QueryMedia)
}

void QueryMedia::InitAsDefaultInstance() {
}

QueryMedia::QueryMedia(const QueryMedia& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.QueryMedia)
}

void QueryMedia::SharedCtor() {
  sha1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

QueryMedia::~QueryMedia() {
  // @@protoc_insertion_point(destructor:chat.QueryMedia)
  SharedDtor();
}

void QueryMedia::SharedDtor() {
  sha1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QueryMedia::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryMedia::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryMedia_descriptor_;
}

const QueryMedia& QueryMedia::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<QueryMedia> QueryMedia_default_instance_;

QueryMedia* QueryMedia::New(::google::protobuf::Arena* arena) const {
  QueryMedia* n = new QueryMedia;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryMedia::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.QueryMedia)
  sha1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool QueryMedia::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.QueryMedia)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sha1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sha1()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sha1().data(), this->sha1().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.QueryMedia.sha1"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.QueryMedia)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.QueryMedia)
  return false;
#undef DO_
}

void QueryMedia::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.QueryMedia)
  // optional string sha1 = 1;
  if (this->sha1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sha1().data(), this->sha1().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryMedia.sha1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sha1(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.QueryMedia)
}

::google::protobuf::uint8* QueryMedia::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.QueryMedia)
  // optional string sha1 = 1;
  if (this->sha1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sha1().data(), this->sha1().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.QueryMedia.sha1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sha1(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.QueryMedia)
  return target;
}

size_t QueryMedia::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.QueryMedia)
  size_t total_size = 0;

  // optional string sha1 = 1;
  if (this->sha1().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sha1());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryMedia::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.QueryMedia)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const QueryMedia* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryMedia>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.QueryMedia)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.QueryMedia)
    UnsafeMergeFrom(*source);
  }
}

void QueryMedia::MergeFrom(const QueryMedia& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.QueryMedia)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void QueryMedia::UnsafeMergeFrom(const QueryMedia& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.sha1().size() > 0) {

    sha1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha1_);
  }
}

void QueryMedia::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.QueryMedia)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryMedia::CopyFrom(const QueryMedia& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.QueryMedia)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool QueryMedia::IsInitialized() const {

  return true;
}

void QueryMedia::Swap(QueryMedia* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryMedia::InternalSwap(QueryMedia* other) {
  sha1_.Swap(&other->sha1_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryMedia::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryMedia_descriptor_;
  metadata.reflection = QueryMedia_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryMedia

// optional string sha1 = 1;
void QueryMedia::clear_sha1() {
  sha1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& QueryMedia::sha1() const {
  // @@protoc_insertion_point(field_get:chat.QueryMedia.sha1)
  return sha1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryMedia::set_sha1(const ::std::string& value) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.QueryMedia.sha1)
}
void QueryMedia::set_sha1(const char* value) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.QueryMedia.sha1)
}
void QueryMedia::set_sha1(const char* value, size_t size) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.QueryMedia.sha1)
}
::std::string* QueryMedia::mutable_sha1() {
  
  // @@protoc_insertion_point(field_mutable:chat.QueryMedia.sha1)
  return sha1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryMedia::release_sha1() {
  // @@protoc_insertion_point(field_release:chat.QueryMedia.sha1)
  
  return sha1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryMedia::set_allocated_sha1(::std::string* sha1) {
  if (sha1 != NULL) {
    
  } else {
    
  }
  sha1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha1);
  // @@protoc_insertion_point(field_set_allocated:chat.QueryMedia.sha1)
}

inline const QueryMedia* QueryMedia::internal_default_instance() {
  return &QueryMedia_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MediaIsExist::kSha1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MediaIsExist::MediaIsExist()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.MediaIsExist)
}

void MediaIsExist::InitAsDefaultInstance() {
}

MediaIsExist::MediaIsExist(const MediaIsExist& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.MediaIsExist)
}

void MediaIsExist::SharedCtor() {
  sha1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MediaIsExist::~MediaIsExist() {
  // @@protoc_insertion_point(destructor:chat.MediaIsExist)
  SharedDtor();
}

void MediaIsExist::SharedDtor() {
  sha1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MediaIsExist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaIsExist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaIsExist_descriptor_;
}

const MediaIsExist& MediaIsExist::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MediaIsExist> MediaIsExist_default_instance_;

MediaIsExist* MediaIsExist::New(::google::protobuf::Arena* arena) const {
  MediaIsExist* n = new MediaIsExist;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MediaIsExist::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.MediaIsExist)
  sha1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MediaIsExist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.MediaIsExist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sha1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sha1()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sha1().data(), this->sha1().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.MediaIsExist.sha1"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.MediaIsExist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.MediaIsExist)
  return false;
#undef DO_
}

void MediaIsExist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.MediaIsExist)
  // optional string sha1 = 1;
  if (this->sha1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sha1().data(), this->sha1().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.MediaIsExist.sha1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sha1(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.MediaIsExist)
}

::google::protobuf::uint8* MediaIsExist::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.MediaIsExist)
  // optional string sha1 = 1;
  if (this->sha1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sha1().data(), this->sha1().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.MediaIsExist.sha1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sha1(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.MediaIsExist)
  return target;
}

size_t MediaIsExist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.MediaIsExist)
  size_t total_size = 0;

  // optional string sha1 = 1;
  if (this->sha1().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sha1());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaIsExist::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.MediaIsExist)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MediaIsExist* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MediaIsExist>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.MediaIsExist)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.MediaIsExist)
    UnsafeMergeFrom(*source);
  }
}

void MediaIsExist::MergeFrom(const MediaIsExist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.MediaIsExist)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MediaIsExist::UnsafeMergeFrom(const MediaIsExist& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.sha1().size() > 0) {

    sha1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha1_);
  }
}

void MediaIsExist::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.MediaIsExist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaIsExist::CopyFrom(const MediaIsExist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.MediaIsExist)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MediaIsExist::IsInitialized() const {

  return true;
}

void MediaIsExist::Swap(MediaIsExist* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MediaIsExist::InternalSwap(MediaIsExist* other) {
  sha1_.Swap(&other->sha1_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MediaIsExist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaIsExist_descriptor_;
  metadata.reflection = MediaIsExist_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MediaIsExist

// optional string sha1 = 1;
void MediaIsExist::clear_sha1() {
  sha1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MediaIsExist::sha1() const {
  // @@protoc_insertion_point(field_get:chat.MediaIsExist.sha1)
  return sha1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MediaIsExist::set_sha1(const ::std::string& value) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.MediaIsExist.sha1)
}
void MediaIsExist::set_sha1(const char* value) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.MediaIsExist.sha1)
}
void MediaIsExist::set_sha1(const char* value, size_t size) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.MediaIsExist.sha1)
}
::std::string* MediaIsExist::mutable_sha1() {
  
  // @@protoc_insertion_point(field_mutable:chat.MediaIsExist.sha1)
  return sha1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MediaIsExist::release_sha1() {
  // @@protoc_insertion_point(field_release:chat.MediaIsExist.sha1)
  
  return sha1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MediaIsExist::set_allocated_sha1(::std::string* sha1) {
  if (sha1 != NULL) {
    
  } else {
    
  }
  sha1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha1);
  // @@protoc_insertion_point(field_set_allocated:chat.MediaIsExist.sha1)
}

inline const MediaIsExist* MediaIsExist::internal_default_instance() {
  return &MediaIsExist_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MediaIsExistRes::kIsExistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MediaIsExistRes::MediaIsExistRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.MediaIsExistRes)
}

void MediaIsExistRes::InitAsDefaultInstance() {
}

MediaIsExistRes::MediaIsExistRes(const MediaIsExistRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.MediaIsExistRes)
}

void MediaIsExistRes::SharedCtor() {
  isexist_ = false;
  _cached_size_ = 0;
}

MediaIsExistRes::~MediaIsExistRes() {
  // @@protoc_insertion_point(destructor:chat.MediaIsExistRes)
  SharedDtor();
}

void MediaIsExistRes::SharedDtor() {
}

void MediaIsExistRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaIsExistRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaIsExistRes_descriptor_;
}

const MediaIsExistRes& MediaIsExistRes::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MediaIsExistRes> MediaIsExistRes_default_instance_;

MediaIsExistRes* MediaIsExistRes::New(::google::protobuf::Arena* arena) const {
  MediaIsExistRes* n = new MediaIsExistRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MediaIsExistRes::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.MediaIsExistRes)
  isexist_ = false;
}

bool MediaIsExistRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.MediaIsExistRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isExist = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isexist_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.MediaIsExistRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.MediaIsExistRes)
  return false;
#undef DO_
}

void MediaIsExistRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.MediaIsExistRes)
  // optional bool isExist = 1;
  if (this->isexist() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isexist(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.MediaIsExistRes)
}

::google::protobuf::uint8* MediaIsExistRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.MediaIsExistRes)
  // optional bool isExist = 1;
  if (this->isexist() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isexist(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.MediaIsExistRes)
  return target;
}

size_t MediaIsExistRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.MediaIsExistRes)
  size_t total_size = 0;

  // optional bool isExist = 1;
  if (this->isexist() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaIsExistRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.MediaIsExistRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MediaIsExistRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MediaIsExistRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.MediaIsExistRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.MediaIsExistRes)
    UnsafeMergeFrom(*source);
  }
}

void MediaIsExistRes::MergeFrom(const MediaIsExistRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.MediaIsExistRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MediaIsExistRes::UnsafeMergeFrom(const MediaIsExistRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.isexist() != 0) {
    set_isexist(from.isexist());
  }
}

void MediaIsExistRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.MediaIsExistRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaIsExistRes::CopyFrom(const MediaIsExistRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.MediaIsExistRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MediaIsExistRes::IsInitialized() const {

  return true;
}

void MediaIsExistRes::Swap(MediaIsExistRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MediaIsExistRes::InternalSwap(MediaIsExistRes* other) {
  std::swap(isexist_, other->isexist_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MediaIsExistRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaIsExistRes_descriptor_;
  metadata.reflection = MediaIsExistRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MediaIsExistRes

// optional bool isExist = 1;
void MediaIsExistRes::clear_isexist() {
  isexist_ = false;
}
bool MediaIsExistRes::isexist() const {
  // @@protoc_insertion_point(field_get:chat.MediaIsExistRes.isExist)
  return isexist_;
}
void MediaIsExistRes::set_isexist(bool value) {
  
  isexist_ = value;
  // @@protoc_insertion_point(field_set:chat.MediaIsExistRes.isExist)
}

inline const MediaIsExistRes* MediaIsExistRes::internal_default_instance() {
  return &MediaIsExistRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MediaCheck::kSha1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MediaCheck::MediaCheck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.MediaCheck)
}

void MediaCheck::InitAsDefaultInstance() {
}

MediaCheck::MediaCheck(const MediaCheck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.MediaCheck)
}

void MediaCheck::SharedCtor() {
  sha1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

MediaCheck::~MediaCheck() {
  // @@protoc_insertion_point(destructor:chat.MediaCheck)
  SharedDtor();
}

void MediaCheck::SharedDtor() {
  sha1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MediaCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaCheck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaCheck_descriptor_;
}

const MediaCheck& MediaCheck::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MediaCheck> MediaCheck_default_instance_;

MediaCheck* MediaCheck::New(::google::protobuf::Arena* arena) const {
  MediaCheck* n = new MediaCheck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MediaCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.MediaCheck)
  sha1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MediaCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.MediaCheck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sha1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sha1()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sha1().data(), this->sha1().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.MediaCheck.sha1"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.MediaCheck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.MediaCheck)
  return false;
#undef DO_
}

void MediaCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.MediaCheck)
  // optional string sha1 = 1;
  if (this->sha1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sha1().data(), this->sha1().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.MediaCheck.sha1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sha1(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.MediaCheck)
}

::google::protobuf::uint8* MediaCheck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.MediaCheck)
  // optional string sha1 = 1;
  if (this->sha1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sha1().data(), this->sha1().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.MediaCheck.sha1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sha1(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.MediaCheck)
  return target;
}

size_t MediaCheck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.MediaCheck)
  size_t total_size = 0;

  // optional string sha1 = 1;
  if (this->sha1().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sha1());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaCheck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.MediaCheck)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MediaCheck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MediaCheck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.MediaCheck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.MediaCheck)
    UnsafeMergeFrom(*source);
  }
}

void MediaCheck::MergeFrom(const MediaCheck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.MediaCheck)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MediaCheck::UnsafeMergeFrom(const MediaCheck& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.sha1().size() > 0) {

    sha1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha1_);
  }
}

void MediaCheck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.MediaCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaCheck::CopyFrom(const MediaCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.MediaCheck)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MediaCheck::IsInitialized() const {

  return true;
}

void MediaCheck::Swap(MediaCheck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MediaCheck::InternalSwap(MediaCheck* other) {
  sha1_.Swap(&other->sha1_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MediaCheck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaCheck_descriptor_;
  metadata.reflection = MediaCheck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MediaCheck

// optional string sha1 = 1;
void MediaCheck::clear_sha1() {
  sha1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MediaCheck::sha1() const {
  // @@protoc_insertion_point(field_get:chat.MediaCheck.sha1)
  return sha1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MediaCheck::set_sha1(const ::std::string& value) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.MediaCheck.sha1)
}
void MediaCheck::set_sha1(const char* value) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.MediaCheck.sha1)
}
void MediaCheck::set_sha1(const char* value, size_t size) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.MediaCheck.sha1)
}
::std::string* MediaCheck::mutable_sha1() {
  
  // @@protoc_insertion_point(field_mutable:chat.MediaCheck.sha1)
  return sha1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MediaCheck::release_sha1() {
  // @@protoc_insertion_point(field_release:chat.MediaCheck.sha1)
  
  return sha1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MediaCheck::set_allocated_sha1(::std::string* sha1) {
  if (sha1 != NULL) {
    
  } else {
    
  }
  sha1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha1);
  // @@protoc_insertion_point(field_set_allocated:chat.MediaCheck.sha1)
}

inline const MediaCheck* MediaCheck::internal_default_instance() {
  return &MediaCheck_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MediaCheckRes::kSha1FieldNumber;
const int MediaCheckRes::kIsIntactFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MediaCheckRes::MediaCheckRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_chat_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.MediaCheckRes)
}

void MediaCheckRes::InitAsDefaultInstance() {
}

MediaCheckRes::MediaCheckRes(const MediaCheckRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chat.MediaCheckRes)
}

void MediaCheckRes::SharedCtor() {
  sha1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isintact_ = false;
  _cached_size_ = 0;
}

MediaCheckRes::~MediaCheckRes() {
  // @@protoc_insertion_point(destructor:chat.MediaCheckRes)
  SharedDtor();
}

void MediaCheckRes::SharedDtor() {
  sha1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MediaCheckRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MediaCheckRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MediaCheckRes_descriptor_;
}

const MediaCheckRes& MediaCheckRes::default_instance() {
  protobuf_InitDefaults_chat_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<MediaCheckRes> MediaCheckRes_default_instance_;

MediaCheckRes* MediaCheckRes::New(::google::protobuf::Arena* arena) const {
  MediaCheckRes* n = new MediaCheckRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MediaCheckRes::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.MediaCheckRes)
  sha1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isintact_ = false;
}

bool MediaCheckRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.MediaCheckRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sha1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sha1()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sha1().data(), this->sha1().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.MediaCheckRes.sha1"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isIntact;
        break;
      }

      // optional bool isIntact = 2;
      case 2: {
        if (tag == 16) {
         parse_isIntact:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isintact_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.MediaCheckRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.MediaCheckRes)
  return false;
#undef DO_
}

void MediaCheckRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.MediaCheckRes)
  // optional string sha1 = 1;
  if (this->sha1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sha1().data(), this->sha1().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.MediaCheckRes.sha1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sha1(), output);
  }

  // optional bool isIntact = 2;
  if (this->isintact() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isintact(), output);
  }

  // @@protoc_insertion_point(serialize_end:chat.MediaCheckRes)
}

::google::protobuf::uint8* MediaCheckRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.MediaCheckRes)
  // optional string sha1 = 1;
  if (this->sha1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sha1().data(), this->sha1().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.MediaCheckRes.sha1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sha1(), target);
  }

  // optional bool isIntact = 2;
  if (this->isintact() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isintact(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:chat.MediaCheckRes)
  return target;
}

size_t MediaCheckRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.MediaCheckRes)
  size_t total_size = 0;

  // optional string sha1 = 1;
  if (this->sha1().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sha1());
  }

  // optional bool isIntact = 2;
  if (this->isintact() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MediaCheckRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.MediaCheckRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MediaCheckRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MediaCheckRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.MediaCheckRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.MediaCheckRes)
    UnsafeMergeFrom(*source);
  }
}

void MediaCheckRes::MergeFrom(const MediaCheckRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.MediaCheckRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void MediaCheckRes::UnsafeMergeFrom(const MediaCheckRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.sha1().size() > 0) {

    sha1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha1_);
  }
  if (from.isintact() != 0) {
    set_isintact(from.isintact());
  }
}

void MediaCheckRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.MediaCheckRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaCheckRes::CopyFrom(const MediaCheckRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.MediaCheckRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool MediaCheckRes::IsInitialized() const {

  return true;
}

void MediaCheckRes::Swap(MediaCheckRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MediaCheckRes::InternalSwap(MediaCheckRes* other) {
  sha1_.Swap(&other->sha1_);
  std::swap(isintact_, other->isintact_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MediaCheckRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MediaCheckRes_descriptor_;
  metadata.reflection = MediaCheckRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MediaCheckRes

// optional string sha1 = 1;
void MediaCheckRes::clear_sha1() {
  sha1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MediaCheckRes::sha1() const {
  // @@protoc_insertion_point(field_get:chat.MediaCheckRes.sha1)
  return sha1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MediaCheckRes::set_sha1(const ::std::string& value) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chat.MediaCheckRes.sha1)
}
void MediaCheckRes::set_sha1(const char* value) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chat.MediaCheckRes.sha1)
}
void MediaCheckRes::set_sha1(const char* value, size_t size) {
  
  sha1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chat.MediaCheckRes.sha1)
}
::std::string* MediaCheckRes::mutable_sha1() {
  
  // @@protoc_insertion_point(field_mutable:chat.MediaCheckRes.sha1)
  return sha1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MediaCheckRes::release_sha1() {
  // @@protoc_insertion_point(field_release:chat.MediaCheckRes.sha1)
  
  return sha1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MediaCheckRes::set_allocated_sha1(::std::string* sha1) {
  if (sha1 != NULL) {
    
  } else {
    
  }
  sha1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sha1);
  // @@protoc_insertion_point(field_set_allocated:chat.MediaCheckRes.sha1)
}

// optional bool isIntact = 2;
void MediaCheckRes::clear_isintact() {
  isintact_ = false;
}
bool MediaCheckRes::isintact() const {
  // @@protoc_insertion_point(field_get:chat.MediaCheckRes.isIntact)
  return isintact_;
}
void MediaCheckRes::set_isintact(bool value) {
  
  isintact_ = value;
  // @@protoc_insertion_point(field_set:chat.MediaCheckRes.isIntact)
}

inline const MediaCheckRes* MediaCheckRes::internal_default_instance() {
  return &MediaCheckRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace chat

// @@protoc_insertion_point(global_scope)
